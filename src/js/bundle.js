(()=>{"use strict";class t{static get BACKGROUND_SIZE(){return t.fieldsX.BACKGROUND_SIZE}static get WALL_WIDTH(){return t.fieldsX.WALL_WIDTH}static get WALL_HEIGHT(){return t.fieldsY.WALL_HEIGHT}static get TRACK_INDENT(){return t.fieldsY.TRACK_INDENT}static get HULL_WIDTH(){return t.fieldsX.HULL_WIDTH}static get HULL_HEIGHT(){return t.fieldsY.HULL_HEIGHT}static get TURRET_INDENT_X(){return t.fieldsX.TURRET_INDENT_X}static get TURRET_WIDTH(){return t.fieldsX.TURRET_WIDTH}static get TURRET_HEIGHT(){return t.fieldsY.TURRET_HEIGHT}static get WEAPON_WIDTH(){return t.fieldsX.WEAPON_WIDTH}static get WEAPON_HEIGHT(){return t.fieldsY.WEAPON_HEIGHT}static get BULLET_WIDTH(){return t.fieldsX.BULLET_WIDTH}static get BULLET_HEIGHT(){return t.fieldsY.BULLET_HEIGHT}static get ACCELERATION_SIZE(){return t.fieldsX.ACCELERATION_SIZE}static get EXPLOSION_SIZE(){return t.fieldsX.EXPLOSION_SIZE}static get ACCELERATION_EFFECT_INDENT_X(){return t.fieldsX.ACCELERATION_EFFECT_INDENT_X}static get KEY_SIZE(){return t.fieldsX.KEY_SIZE}static get BOX_SIZE(){return t.fieldsX.BOX_SIZE}static get HEALTH_BAR_HEIGHT(){return t.fieldsY.HEALTH_BAR_HEIGHT}static get ARMOR_BAR_HEIGHT(){return t.fieldsY.ARMOR_BAR_HEIGHT}static get HEALTH_ARMOR_BAR_INDENT_Y(){return t.fieldsY.HEALTH_ARMOR_BAR_INDENT_Y}static getTankEntityWidth(e){return t.HULL_WIDTH[e]+t.TRACK_INDENT}static getTankEntityHeight(e){return t.HULL_HEIGHT[e]+(t.TRACK_INDENT<<1)}static resizeX(e){return Math.round(e*t.resizeWidthCoeff)}static resizeY(e){return Math.round(e*t.resizeHeightCoeff)}static undoResizeX(e){return Math.round(e/t.resizeWidthCoeff)}static undoResizeY(e){return Math.round(e/t.resizeHeightCoeff)}static setResolutionResizeCoeff(e,i){t.resizeWidthCoeff=e/t.DEVELOPING_SCREEN_WIDTH,t.resizeHeightCoeff=i/t.DEVELOPING_SCREEN_HEIGHT,t.resizeConstants()}static resizeConstants(){for(const e in t.fieldsX){const i=t.fieldsX[e];t.fieldsX[e]=Array.isArray(i)?i.map(t.resizeX):t.resizeX(i)}for(const e in t.fieldsY){const i=t.fieldsY[e];t.fieldsY[e]=Array.isArray(i)?i.map(t.resizeY):t.resizeY(i)}}}t.resizeWidthCoeff=1,t.resizeHeightCoeff=1,t.DEVELOPING_SCREEN_WIDTH=1920,t.DEVELOPING_SCREEN_HEIGHT=1080,t.fieldsX={BACKGROUND_SIZE:115,WALL_WIDTH:[110,55],HULL_WIDTH:[63,67,64,53,67,67,63,57],TURRET_INDENT_X:[17,21,17,12,21,21,21,17],TURRET_WIDTH:[35,42,30,30,24,30,35,24],WEAPON_WIDTH:[39,41,33,35,42,30,35,30],BULLET_WIDTH:[13,18,25,26,21],ACCELERATION_SIZE:70,EXPLOSION_SIZE:99,ACCELERATION_EFFECT_INDENT_X:[4,11,0,0,4,4,0,0,0],KEY_SIZE:55,BOX_SIZE:55},t.fieldsY={WALL_HEIGHT:[55,55],TRACK_INDENT:5,HULL_HEIGHT:[41,52,41,34,57,46,40,34],TURRET_HEIGHT:[30,30,19,30,24,24,30,24],WEAPON_HEIGHT:[12,9,12,6,9,13,12,12],BULLET_HEIGHT:[6,9,11,7,9],HEALTH_BAR_HEIGHT:10,ARMOR_BAR_HEIGHT:4,HEALTH_ARMOR_BAR_INDENT_Y:3};const e=Math.PI/180,i=["Grass","Ground","Sandstone"],s=["Rect","Square"],n=[[4,2],[5.5,2.5],[7,3]],r=[.55,.7,.85],a=11;var o;!function(t){t[t.bulLight=0]="bulLight",t[t.bulMedium=1]="bulMedium",t[t.bulHeavy=2]="bulHeavy",t[t.bulGrenade=3]="bulGrenade",t[t.bulSniper=4]="bulSniper",t[t.key=5]="key"}(o||(o={}));class l{get startingSpeed(){return 35}get damage(){return 15}get armorPenetration(){return.1}get mass(){return.008}get health(){return 1}get num(){return 0}}class h{constructor(){}static calcAcceleration(t,e,i,s,n,r,a){return(t-e*r*.01-i*n*n*a)/r*(s/17)}static calcAngularAcceleration(t,e,i,s,n,r,a,o){return this.calcAcceleration(t,e,i,s,n,r,a)/o}}class c{constructor(){}static calcAcceleration(t,e,i,s,n,r){return(t-e*s*s*r)/n*(i/17)}static calcAngularAcceleration(t,e,i,s,n,r,a){return this.calcAcceleration(t,e,i,s,n,r)/a}}class _{constructor(t,e){this._entity=t,this._health=e}get health(){return this._health}isDead(){return this._health<=0}get entity(){return this._entity}isIdle(){return 0===this._entity.velocity.length}isAngularMotionStopped(){return 0===this._entity.angularVelocity}applyVelocityChange(t,e){const i=this._entity,s=Math.sign(i.velocity.x),n=Math.sign(i.velocity.y);i.velocity.addToCoordinates(t*Math.cos(e),t*Math.sin(e)),s!==Math.sign(i.velocity.x)&&(i.velocity.x=0),n!==Math.sign(i.velocity.y)&&(i.velocity.y=0)}applyAngularVelocityChange(t){const e=this._entity,i=e.angularVelocity;i>0?e.angularVelocity+=i+t<0?-i:t:e.angularVelocity-=i+t>0?-i:t}takeDamage(t){this._health-=t.damage}}class u extends _{residualMovement(t,e,i){const s=this._entity,n=h.calcAcceleration(0,t,e,i,s.velocity.length,s.mass,s.lengthwiseArea);this.applyVelocityChange(n,s.velocity.angle)}residualAngularMovement(t,e,i){const s=this._entity,n=h.calcAngularAcceleration(0,t,e,i,s.angularVelocity,s.mass,s.lengthwiseArea,s.radiusLength);this.applyAngularVelocityChange(n)}}class d extends _{residualMovement(t,e){const i=this._entity,s=c.calcAcceleration(0,t,e,i.velocity.length,i.mass,i.lengthwiseArea);this.applyVelocityChange(s,i.velocity.angle)}residualAngularMovement(t,e){const i=this._entity,s=c.calcAngularAcceleration(0,t,e,i.angularVelocity,i.mass,i.lengthwiseArea,i.radiusLength);this.applyAngularVelocityChange(s)}}class m extends d{constructor(t,e,i){super(e,t.health),this._damage=t.damage*i.damageCoeff,this._armorPenetration=t.armorPenetration*i.armorPenetrationCoeff,this._maxHealth=t.health}get maxHealth(){return this._maxHealth}get damage(){return this._damage}get armorPenetration(){return this._armorPenetration}}class g{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}clone(){return new g(this._x,this._y)}addToCoordinates(t,e){this._x+=t,this._y+=e}}class I extends g{get length(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalize(){const t=this.length;0!==t&&(this._x/=t,this._y/=t)}get angle(){return Math.atan2(this.y,this.x)}clone(){return new I(this.x,this.y)}addVector(t){this._x+=t._x,this._y+=t._y}subtractVector(t){this._x-=t._x,this._y-=t._y}scale(t){this._x*=t,this._y*=t}}class p extends I{constructor(t,e){super(t,e)}static create(t,e){const i=new p(t.y-e.y,e.x-t.x);return i.normalize(),i}clone(){return new p(this._x,this._y)}}class E{constructor(){}static rotatePointAroundTarget(t,e,i,s){const n=t.x-e.x,r=t.y-e.y;t.x=e.x+n*s-r*i,t.y=e.y+n*i+r*s}static rotatePoint(t,e,i){const s=t.x,n=t.y;t.x=s*i-n*e,t.y=s*e+n*i}}class T{constructor(){}static movement(t){for(const e of t.points)e.addToCoordinates(t.velocity.x,t.velocity.y)}static angularMovement(t){T.rotateEntity(t,t.angularVelocity)}static rotateEntity(t,e){const i=Math.sin(e),s=Math.cos(e),n=t.calcCenter();for(const e of t.points)E.rotatePointAroundTarget(e,n,i,s);E.rotatePoint(t.velocity,i,s)}}function L(t,e){const i=e.x-t.x,s=e.y-t.y;return Math.sqrt(i*i+s*s)}function M(t,e=0,i=2*Math.PI){for(;t<e;)t+=i-e;for(;t>=i;)t-=i-e;return t}function A(t){return t>Math.PI/2&&t<3*Math.PI/2}function f(t,e){return M(t-e)}function w(t,e){return new g((t.x+e.x)/2,(t.y+e.y)/2)}class S{constructor(t,e,i,s,n,r){this._angularVelocity=0,this._velocity=new I(0,0);const a=e*e+i*i;this._radiusLength=.5*Math.sqrt(a),this._momentOfInertia=S.scalingCoeff*n*a,this._mass=n,this._id=r,this._width=e,this._height=i,this.adjustPolygon(t,e,i,s)}adjustPolygon(t,e,i,s){this._points=[t.clone(),new g(t.x+e,t.y),new g(t.x+e,t.y+i),new g(t.x,t.y+i)],0!==s&&T.rotateEntity(this,s)}get velocity(){return this._velocity}get angle(){return Math.atan2(this._points[1].y-this._points[0].y,this._points[1].x-this._points[0].x)}get points(){return this._points}get mass(){return this._mass}get angularVelocity(){return this._angularVelocity}set angularVelocity(t){this._angularVelocity=t}get id(){return this._id}get radiusLength(){return this._radiusLength}get momentOfInertia(){return this._momentOfInertia}calcCenter(){return w(this._points[0],this._points[2])}get lengthwiseArea(){const t=this.angle-this._velocity.angle;return this._height*Math.abs(Math.cos(t))+this._width*Math.abs(Math.sin(t))}get movementLength(){const t=this.angle-this._velocity.angle;return this._width*Math.abs(Math.cos(t))+this._height*Math.abs(Math.sin(t))}}S.scalingCoeff=.3125;class y{constructor(){}static extractType(t){return t%y.TYPE_DIVIDER}static isTank(t){return y.extractType(t)===y.TANK_TYPE}static isWall(t){return y.extractType(t)===y.WALL_TYPE}static isBullet(t){return y.extractType(t)===y.BULLET_TYPE}static checkForMaxValue(t){if(t>=y.MAX_VALUE)throw new Error("Maximum ID is reached.")}static get tankId(){return y.checkForMaxValue(y.TANK_ID),++y.TANK_ID*y.TYPE_DIVIDER+y.TANK_TYPE}static get wallId(){return y.checkForMaxValue(y.WALL_ID),++y.WALL_ID*y.TYPE_DIVIDER+y.WALL_TYPE}static get bulletId(){return y.checkForMaxValue(y.BULLET_ID),++y.BULLET_ID*y.TYPE_DIVIDER+y.BULLET_TYPE}static get collectibleItemId(){return y.checkForMaxValue(y.COLLECTIBLE_ITEM_ID),++y.COLLECTIBLE_ITEM_ID*y.TYPE_DIVIDER+y.COLLECTIBLE_ITEM_TYPE}}y.TANK_TYPE=0,y.WALL_TYPE=1,y.BULLET_TYPE=2,y.COLLECTIBLE_ITEM_TYPE=3,y.TYPE_DIVIDER=1e3,y.MAX_VALUE=Math.floor(Number.MAX_SAFE_INTEGER/y.TYPE_DIVIDER)-1,y.TANK_ID=0,y.WALL_ID=0,y.BULLET_ID=0,y.COLLECTIBLE_ITEM_ID=0;class R{constructor(){}static create(e,i,s,n){const r=R.createBullet(e),a=R.calcDefaultEntityPoint(e,i,s),o=new S(a,t.BULLET_WIDTH[e],t.BULLET_HEIGHT[e],s,r.mass,y.bulletId),l=r.startingSpeed*n.startingSpeedCoeff;return o.velocity.x=l*Math.cos(s),o.velocity.y=l*Math.sin(s),new m(r,o,n)}static calcDefaultEntityPoint(e,i,s){const n=new g(i.x+t.BULLET_HEIGHT[e]/2*Math.sin(s),i.y-t.BULLET_HEIGHT[e]/2*Math.cos(s)),r=Math.sin(s),a=Math.cos(s),o=new g(n.x+t.BULLET_WIDTH[e]/2*a-t.BULLET_HEIGHT[e]/2*r,n.y+t.BULLET_HEIGHT[e]/2*a+t.BULLET_WIDTH[e]/2*r);return E.rotatePointAroundTarget(n,o,-r,a),n}static createBullet(t){if(0===t)return new l;throw new Error(`Bullet model ${t} was not found`)}}function C(t,e){return Math.floor(Math.random()*(e+1-t))+t}class k{get angleSpeed(){return 6e-4}get mass(){return.35}get bulletCapacity(){return 3}get num(){return 0}}class N{get armorPenetrationCoeff(){return 1}get damageCoeff(){return 1}get startingSpeedCoeff(){return 1}get reloadSpeed(){return 1e3}get mass(){return.15}get num(){return 0}}class D extends u{get maxHealth(){return this._tankParts.hull.health}get maxArmor(){return this._tankParts.hull.armor}constructor(t,e){super(e,t.hull.health),this._lastTimeShot=Date.now(),this._bulletQuantity=0,this._bulletNum=D.DEFAULT_BULLET_NUM,this._isBraking=!1,this._isDrift=!1,this._tankParts=t,this._turretAngle=e.angle,this._armor=t.hull.armor}takeDamage(t){this._armor-=t.armorPenetration,this._armor<0&&(this._armor=0);const e=t.damage-this._armor*this.armorStrength;e>0&&(this._health-=e)}get turretAngle(){return this._turretAngle}get armor(){return this._armor}get armorStrength(){return this._tankParts.hull.armorStrength}get bulletNum(){return this._bulletNum}shot(){const t=Date.now();if(t-this._lastTimeShot<this._tankParts.weapon.reloadSpeed)return null;0===this._bulletQuantity?this._bulletNum=D.DEFAULT_BULLET_NUM:this._bulletQuantity--;const e=R.create(this._bulletNum,this.calcBulletExit(),this._turretAngle,this._tankParts.weapon);return this._lastTimeShot=t,e}calcBulletExit(){const e=this._entity.calcCenter(),i=this._tankParts,s=(r=i.turret,t.TURRET_WIDTH[r.num]/2+(n=i.weapon,t.WEAPON_WIDTH[n.num]));var n,r;const a=e.x+s*Math.cos(this._turretAngle),o=e.y+s*Math.sin(this._turretAngle);return new g(a,o)}takeBullet(t){this._bulletNum=t,this._bulletQuantity=this._tankParts.turret.bulletCapacity}turretClockwiseMovement(t){this._turretAngle+=this._tankParts.turret.angleSpeed*t}turretCounterclockwiseMovement(t){this._turretAngle-=this._tankParts.turret.angleSpeed*t}incTurretAngle(t){this._turretAngle+=t}hullClockwiseMovement(t,e,i){const s=this._entity,n=this._tankParts.track.angularData;s.angularVelocity<n.finishSpeed&&(s.angularVelocity+=h.calcAngularAcceleration(n.force,t,e,i,s.angularVelocity,s.mass,s.lengthwiseArea,s.radiusLength)),this.updateAngularVelocity(),this.incTurretAngle(s.angularVelocity)}hullCounterclockwiseMovement(t,e,i){const s=this._entity,n=this._tankParts.track.angularData;-s.angularVelocity<n.finishSpeed&&(s.angularVelocity-=h.calcAngularAcceleration(n.force,t,e,i,s.angularVelocity,s.mass,s.lengthwiseArea,s.radiusLength)),this.updateAngularVelocity(),this.incTurretAngle(s.angularVelocity)}updateAngularVelocity(){if(this.isIdle())return;const t=this._entity,e=t.velocity;(this._isDrift||this._isBraking)&&this.incAngularVelocity(t,e),this._isBraking||this.decAngularVelocity(t,e)}incAngularVelocity(t,e){const i=this.calcCoeff(),s=1+e.length/(this._tankParts.track.forwardData.finishSpeed*i),n=1+t.mass/(10*i);t.angularVelocity*=n*s}calcCoeff(){let t=100;return this._isDrift&&(t-=25),this._isBraking&&(t-=5),t}decAngularVelocity(t,e){const i=1-e.length/(20*this._tankParts.track.forwardData.finishSpeed),s=1-t.mass/200;t.angularVelocity*=s*i,e.scale(s)}forwardMovement(t,e,i){this.movement(this._tankParts.track.forwardData,this._entity.angle,t,e,i)}backwardMovement(t,e,i){this.movement(this._tankParts.track.backwardData,this._entity.angle+Math.PI,t,e,i)}movement(t,e,i,s,n){const r=this._entity,a=r.velocity.length,o=0===a?e:r.velocity.angle,l=f(e,o);this.setBrakingStatus(l),D.isStraightMovement(l)?(this._isDrift=!1,this.handleStraightMovement(t,i,s,n,a,o)):(this._isDrift=!D.isReverseMovement(l),this._isDrift&&(this.determineDribbleSpeed(l),this.applyTurn(this.calcShortestTurn(l))),this.handleDriftMovement(t,i,s,n,a,l,o))}setBrakingStatus(t){this._isBraking=A(t)}calcShortestTurn(t){return this._isBraking&&(t=D.adjustTurnForBraking(t)),t=D.adjustTurnForRecovery(t)}static isStraightMovement(t){return t<=e||2*Math.PI-t<=e}static isReverseMovement(t){return Math.abs(t-Math.PI)<=e}handleStraightMovement(t,e,i,s,n,r){if(n<t.finishSpeed){const a=h.calcAcceleration(t.force,e,i,s,n,this._entity.mass,this._entity.lengthwiseArea);this._entity.velocity.addToCoordinates(a*Math.cos(r),a*Math.sin(r))}}handleDriftMovement(t,e,i,s,n,r,a){if(this._isBraking||n<t.finishSpeed){const o=h.calcAcceleration(t.force*Math.cos(r),e,i,s,n,this._entity.mass,this._entity.lengthwiseArea);this.applyVelocityChange(o,a)}}static adjustTurnForBraking(t){return M(t-Math.PI/2)}static adjustTurnForRecovery(t){const e=t-2*Math.PI;return t>Math.abs(e)?e:t}applyTurn(t){t*=D.VELOCITY_RECOVERY_COEFF*this._entity.mass,E.rotatePoint(this._entity.velocity,Math.sin(t),Math.cos(t))}determineDribbleSpeed(t){const e=(Math.abs(Math.cos(t))-(i=0))/(1-i)*(1-(s=.95))+s;var i,s;this._entity.velocity.scale(e)}residualMovement(t,e,i){const s=f(this._entity.angle,this._entity.velocity.angle);(this._isDrift||!D.isStraightMovement(s)&&!D.isReverseMovement(s))&&(this._isDrift=!0,this.determineDribbleSpeed(s)),this._isBraking=!1,super.residualMovement(t,e,i)}residualAngularMovement(t,e,i){this.updateAngularVelocity(),super.residualAngularMovement(t,e,i),this.incTurretAngle(this._entity.angularVelocity)}}D.DEFAULT_BULLET_NUM=0,D.VELOCITY_RECOVERY_COEFF=.017;class P{constructor(){}static extractZIndex(t){return t%P.Z_INDEX_DIVIDER}static checkForMaxValue(t){if(t>=P.MAX_VALUE)throw new Error("Maximum ID is reached.")}static generate(t){for(let e=this.IDs.length;e<=t;e++)P.IDs.push(0);return P.checkForMaxValue(P.IDs[t]),++P.IDs[t]*P.Z_INDEX_DIVIDER+t}}P.Z_INDEX_DIVIDER=1e3,P.MAX_VALUE=Math.floor(Number.MAX_SAFE_INTEGER/P.Z_INDEX_DIVIDER)-1,P.IDs=new Array;class H{constructor(t,e,i){this._sprite=new Image(t,e),this._sprite.classList.add("sprite"),this._id=P.generate(i)}get width(){return this._sprite.width}get height(){return this._sprite.height}get sprite(){return this._sprite}get id(){return this._id}get point(){return this._point}get angle(){return this._angle}set point(t){this._point=t}set angle(t){this._angle=t}}class v extends H{constructor(t,e,i){super(t,e,1),this._opacity=1,this._sprite.src=`src/img/tanks/Effects/Tire Tracks/Tire_Track_Chain_${i}.png`}get opacity(){return this._opacity}set opacity(t){this._opacity=t}}class G{get value(){return this._value}get prev(){return this._prev}get next(){return this._next}set next(t){this._next=t}set prev(t){this._prev=t}constructor(t){this._prev=null,this._next=null,this._value=t}remove(){null!==this._prev&&(this._prev.next=this._next),null!==this._next&&(this._next.prev=this._prev),this._prev=null,this._next=null}}class O{constructor(){this._tail=null,this._head=null,this._length=0}get head(){return null!==this._head?this._head.value:null}get tail(){return null!==this._tail?this._tail.value:null}get length(){return this._length}*[Symbol.iterator](){let t=this._head;for(let e=this._length;e>0;e--)yield t.value,t=t.next}applyAndRemove(t,e,i){let s=this._head;for(;null!==s;)if(t(s.value,i),e(s.value)){const t=s;s=s.next,this.removeNode(t)}else s=s.next}isEmpty(){return 0===this._length}remove(t){let e=this._head;for(;null!==e;){if(e.value===t)return void this.removeNode(e);e=e.next}}removeNode(t){t===this._tail&&(this._tail=t.prev),t===this._head&&(this._head=t.next),this._length--,t.remove()}addToHead(t){const e=new G(t);null===this._head?(this._tail=e,this._head=e):(e.next=this._head,this._head.prev=e,this._head=e),this._length++}addToTail(t){const e=new G(t);null===this._tail?(this._tail=e,this._head=e):(e.prev=this._tail,this._tail.next=e,this._tail=e),this._length++}removeFromTail(){this._tail===this._head?this.clear():(this._tail=this._tail.prev,this._tail.next=null,this._length--)}removeFromHead(){this._tail===this._head?this.clear():(this._head=this._head.next,this._head.prev=null,this._length--)}moveToTail(t){let e=this._tail;for(;null!==e;){if(e.value===t){if(e!==this._tail){const t=e.prev,i=e.next;null!==t&&(t.next=i),null!==i&&(i.prev=t),e.next=null,e.prev=this._tail,this._tail.next=e,this._tail=e}return}e=e.prev}}moveToHead(t){let e=this._head;for(;null!==e;){if(e.value===t){if(e!==this._head){const t=e.prev,i=e.next;null!==t&&(t.next=i),null!==i&&(i.prev=t),e.next=this._head,e.prev=null,this._head.prev=e,this._head=e}return}e=e.next}}clear(){this._tail=this._head=null,this._length=0}}class x{constructor(){}static rotateToDefaultSpritePoint(t,e,i,s){const n=t.width>>1,r=t.height>>1;E.rotatePointAroundTarget(e,new g(e.x+n*s-r*i,e.y+r*s+n*i),-i,s)}static rotateToActualSpritePoint(t,e,i,s){const n=t.width>>1,r=t.height>>1;E.rotatePointAroundTarget(e,new g(e.x+n,e.y+r),i,s)}static updateSpritePart(t,e,i,s,n){x.rotateToDefaultSpritePoint(t,e,i,s),x.setPosAndAngle(t,e,n)}static setPosAndAngle(t,e,i){t.point=e,t.angle=i}static rotateForTurretPoint(t,e,i,s,n,r){const a=t.width>>1,o=t.height>>1;E.rotatePointAroundTarget(e,new g(e.x+a*s-o*i,e.y+o*s+a*i),n*s-r*i,s*r+i*n)}}class W extends H{constructor(t,e,i){super(t,e,1),this._opacity=1,this._sprite.src=`src/img/tanks/Effects/Tire Tracks/Tire_Track_${i}.png`}get opacity(){return this._opacity}set opacity(t){this._opacity=t}}var U,b;!function(t){t[t.dirForward=1]="dirForward",t[t.dirRotate=0]="dirRotate",t[t.dirBackward=1]="dirBackward"}(U||(U={}));class F{get chainWidth(){return this._chainWidth}constructor(t,e,i){this._listOfTirePairs=new O,this._vanishingListOfTirePairs=i,this._storage=t,this._trackWidth=e.width,this._trackHeight=e.height,this._trackType=e.num,this._chainWidth=this.calcWidthOfChain(),this._chainHeight=e.height,this._chainType=e.num%2}calcWidthOfChain(){return this._trackWidth/F.AMOUNT_OF_CHAINS}static calcPositionOfFirstChain(t,e,i,s,n){return new g(t.x+e*n-i*n,t.y+e*s-i*s)}moveToNextChain(t,e,i){t.x=t.x-this._chainWidth*i,t.y=t.y-this._chainWidth*e}vanishFullTrack(){for(const t of this._listOfTirePairs)this._vanishingListOfTirePairs.addToHead(this._listOfTirePairs.head),this._listOfTirePairs.removeFromHead()}static setAndPosTireTrackPair(t,e,i,s,n,r){const a=e.clone(),o=i.clone();x.rotateToDefaultSpritePoint(t.topTire,a,n,r),x.rotateToDefaultSpritePoint(t.bottomTire,o,n,r),x.setPosAndAngle(t.topTire,a,s),x.setPosAndAngle(t.bottomTire,o,s)}createTireTrackChainPair(t,e,i,s,n){const r={topTire:new v(this._chainWidth,this._chainHeight,this._chainType),bottomTire:new v(this._chainWidth,this._chainHeight,this._chainType)};return this._storage.insert(r.topTire),this._storage.insert(r.bottomTire),F.setAndPosTireTrackPair(r,t,e,i,s,n),r}createTireTrackPair(t,e,i,s,n){this.vanishFullTrack();const r={topTire:new W(this._trackWidth,this._trackHeight,this._trackType),bottomTire:new W(this._trackWidth,this._trackHeight,this._trackType)};this._storage.insert(r.topTire),this._storage.insert(r.bottomTire),F.setAndPosTireTrackPair(r,t,e,i,s,n),this._listOfTirePairs.addToHead(r)}calcFirstTopBottomChainPoints(t,e,i,s){const n=F.calcPositionOfFirstChain(e,this._trackWidth,this.chainWidth,i,s),r=t.hullSprite.calcPosition(e,i,s);let a=t.bottomTrackSprite.calcPosition(r,i,s);return a=F.calcPositionOfFirstChain(a,this._trackWidth,this.chainWidth,i,s),{topFirstChainPoint:n,bottomFirstChainPoint:a}}calcLastTopBottomChainPoints(t,e,i,s){const n=e.clone(),r=t.hullSprite.calcPosition(e,i,s);return{topLastChainPoint:n,bottomLastChainPoint:t.bottomTrackSprite.calcPosition(r,i,s)}}spawnFullTireTrack(t,e,i,s,n){this._topFirstChainPoint=t.clone(),this._bottomFirstChainPoint=e.clone();for(let r=0;r<F.AMOUNT_OF_CHAINS;r++){const a=this.createTireTrackChainPair(t,e,i,s,n);this._listOfTirePairs.addToHead(a),r===F.AMOUNT_OF_CHAINS-1&&(this._topLastChainPoint=t.clone(),this._bottomLastChainPoint=e.clone()),this.moveToNextChain(t,s,n),this.moveToNextChain(e,s,n)}}updateAllChainPoints(t,e,i,s){this._topFirstChainPoint=t,this._bottomFirstChainPoint=e,this._topLastChainPoint=i,this._bottomLastChainPoint=s}checkForUpdate(t,e,i,s){const n=L(t,this._topFirstChainPoint),r=L(e,this._bottomFirstChainPoint),a=L(i,this._topLastChainPoint),o=L(s,this._bottomLastChainPoint);return n>=this._chainWidth?{isUpdate:!0,prevPoint:this._topFirstChainPoint,currPoint:t}:r>=this._chainWidth?{isUpdate:!0,prevPoint:this._bottomFirstChainPoint,currPoint:e}:a>=this._chainWidth?{isUpdate:!0,prevPoint:this._topLastChainPoint,currPoint:i}:o>=this._chainWidth?{isUpdate:!0,prevPoint:this._bottomLastChainPoint,currPoint:s}:{isUpdate:!1}}getMovementAngle(t,e){const i=e.x-t.x,s=e.y-t.y;return Math.atan2(s,i)}detectMovementDirection(t,e,i){const s=this.getMovementAngle(t,e);let n=M(i-F.DIRECTION_ANGLE_DIFFERENCE,-Math.PI,Math.PI),r=M(i+F.DIRECTION_ANGLE_DIFFERENCE,-Math.PI,Math.PI),a=!1;if(n>=Math.PI/2&&n<=Math.PI&&r>=-Math.PI&&r<=-Math.PI/2&&(a=!0,s>=0?r=M(r,0,2*Math.PI):n=M(n,-2*Math.PI,0)),s>=n&&s<=r||s<=n&&s>=r)return U.dirForward;{a&&(n<0?(n=M(n,0,2*Math.PI),r=M(r,0,2*Math.PI)):(n=M(n,-2*Math.PI,0),r=M(r,-2*Math.PI,0)));const t=M(s-Math.PI,-Math.PI,Math.PI);return t>=n&&t<=r||t<=n&&t>=r?U.dirBackward:U.dirRotate}}forwardUpdate(t,e,i,s,n){const r=this.createTireTrackChainPair(t,e,i,s,n);this._listOfTirePairs.addToTail(r),this._listOfTirePairs.length>F.AMOUNT_OF_CHAINS&&(this._vanishingListOfTirePairs.addToHead(this._listOfTirePairs.head),this._listOfTirePairs.removeFromHead())}backwardUpdate(t,e,i,s,n){const r=this.createTireTrackChainPair(t,e,i,s,n);this._listOfTirePairs.addToHead(r),this._listOfTirePairs.length>F.AMOUNT_OF_CHAINS&&(this._vanishingListOfTirePairs.addToHead(this._listOfTirePairs.tail),this._listOfTirePairs.removeFromTail())}}F.DIRECTION_ANGLE_DIFFERENCE=.6,F.AMOUNT_OF_CHAINS=10;class B extends H{constructor(){super(t.ACCELERATION_SIZE,t.ACCELERATION_SIZE,2),this._frame=0,this._sprite.src="src/img/tanks/Effects/Movement/Movement.png"}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return B.ORIGINAL_SIZE}get originalHeight(){return B.ORIGINAL_SIZE}}B.ORIGINAL_SIZE=256;class V{constructor(t,e,i){this._topSpriteAccelerationEffect=new B,this._bottomSpriteAccelerationEffect=new B,this._counter=0,this._frame=0,this._storage=t,this._indentX=e,this._tankHeight=i}changeFrame(){this._frame===V.LAST_Frame&&(this._frame=V.WORKING_Frame),this._counter++,this._counter===V.THRESHOLD&&(this._counter=0,this._frame++,this._topSpriteAccelerationEffect.frame=this._frame,this._bottomSpriteAccelerationEffect.frame=this._frame)}setPosition(t,e,i,s){0===this._frame&&0===this._counter&&(this._storage.insert(this._topSpriteAccelerationEffect),this._storage.insert(this._bottomSpriteAccelerationEffect)),this.changeFrame();let n=this.calcPosition(t,e,i,28*this._tankHeight/42);x.updateSpritePart(this._topSpriteAccelerationEffect,n,e,i,s),n=this.calcPosition(t,e,i,37*this._tankHeight/42),x.updateSpritePart(this._bottomSpriteAccelerationEffect,n,e,i,s)}removeAcceleration(){if(0===this._frame&&0===this._counter)return;this._frame=0,this._counter=0;const t=this._topSpriteAccelerationEffect,e=this._bottomSpriteAccelerationEffect;t.frame=this._frame,e.frame=this._frame,this._storage.remove(this._topSpriteAccelerationEffect),this._storage.remove(this._bottomSpriteAccelerationEffect)}calcPosition(e,i,s,n){return new g(e.x+this._indentX*s-n*i-t.ACCELERATION_SIZE/2*s+t.ACCELERATION_SIZE/1.517*i,e.y+n*s+this._indentX*i-t.ACCELERATION_SIZE/1.517*s-t.ACCELERATION_SIZE/2*i)}}V.THRESHOLD=7,V.LAST_Frame=19,V.WORKING_Frame=10;class X{constructor(t,e){this._frame=0,this._counter=0,this._isForwardMovement=!0,this._isResidualMovement=!1,this._minFrameChangeThreshold=[Math.max(Math.round(X.MIN_THRESHOLD_COEFF/e.finishSpeed),X.MIN_FRAME_CHANGE_THRESHOLD_MINIMUM),Math.max(Math.round(X.MIN_THRESHOLD_COEFF/t.finishSpeed),X.MIN_FRAME_CHANGE_THRESHOLD_MINIMUM)],this._maxFrameChangeThreshold=[Math.min(Math.round(X.MAX_THRESHOLD_COEFF/e.force),X.MAX_FRAME_CHANGE_THRESHOLD_MAXIMUM),Math.min(Math.round(X.MAX_THRESHOLD_COEFF/t.force),X.MAX_FRAME_CHANGE_THRESHOLD_MAXIMUM)],this._currentThreshold=this._maxFrameChangeThreshold[this._isForwardMovement?1:0]}set isForwardMovement(t){this._isResidualMovement=!1,this._isForwardMovement!==t&&(this._isForwardMovement=t,this._currentThreshold=this._maxFrameChangeThreshold[this._isForwardMovement?1:0])}setResidualMovement(){this._isResidualMovement=!0}changeFrame(t,e){this._counter++,this._counter>=this._currentThreshold&&(this._counter=0,this._frame^=1,t.frame=this._frame,e.frame=this._frame,this._isResidualMovement?this._currentThreshold<this._maxFrameChangeThreshold[this._isForwardMovement?1:0]&&this._currentThreshold++:this._currentThreshold>this._minFrameChangeThreshold[this._isForwardMovement?1:0]&&this._currentThreshold--)}stopped(){this._currentThreshold=this._maxFrameChangeThreshold[this._isForwardMovement?1:0]}}X.MIN_THRESHOLD_COEFF=17.5,X.MAX_THRESHOLD_COEFF=.5,X.MIN_FRAME_CHANGE_THRESHOLD_MINIMUM=2,X.MAX_FRAME_CHANGE_THRESHOLD_MAXIMUM=30;class K extends H{constructor(){super(...arguments),this._frame=0,this._isEnded=!1,this._timer=0}changeFrame(t){this._timer+=t,this._timer>=this.UPDATE_TIMER_TIME&&(this._timer-=this.UPDATE_TIMER_TIME,this._frame++,this._frame>this.MAX_FRAME&&(this._frame=this.MAX_FRAME,this._isEnded=!0))}get isEnded(){return this._isEnded}}class Y extends K{get UPDATE_TIMER_TIME(){return Y.UPDATE_TIMER_TIME}get MAX_FRAME(){return Y.MAX_FRAME}constructor(t,e){super(t,e,1),this._sprite.src="src/img/tanks/Effects/Sprites/Sprite_Effects_Smoke.png"}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return Y.ORIGINAL_SIZE}get originalHeight(){return Y.ORIGINAL_SIZE}}Y.UPDATE_TIMER_TIME=60,Y.MAX_FRAME=9,Y.ORIGINAL_SIZE=496;class z extends Y{constructor(t,e){super(t,e)}get scaleX(){return-1}get scaleY(){return 1}calcPosition(t,e,i){return new g(t.x+this.width*e+this.height*i,t.y-this.width*i+this.height*e)}}class Z extends Y{constructor(t,e,i){super(t,e),this._trackHeight=i}calcPosition(t,e,i){return new g(t.x-this._trackHeight*e+this.height*i,t.y+this._trackHeight*i+this.height*e)}}!function(t){t[t.rotLeft=-1]="rotLeft",t[t.rotStraight=0]="rotStraight",t[t.rotRight=1]="rotRight",t[t.rotNoRotate=2]="rotNoRotate"}(b||(b={}));class j{constructor(t,e,i){this._delayedAngle=0,this._animationManager=t,this._width=e/4,this._height=e/5,this._trackHeight=i}detectRotateDirection(t){(t>=Math.PI/2&&t<=Math.PI&&this._delayedAngle>=-Math.PI&&this._delayedAngle<=-Math.PI/2||this._delayedAngle>=Math.PI/2&&this._delayedAngle<=Math.PI&&t>=-Math.PI&&t<=-Math.PI/2)&&(t=this._delayedAngle>=0?M(t,0,2*Math.PI):M(t,-2*Math.PI,0));const e=t-this._delayedAngle;return e<0&&Math.abs(e)>j.UPDATE_SMOKE_DELTA_ANGLE?(this._delayedAngle=M(t,-Math.PI,Math.PI),b.rotLeft):e>0&&Math.abs(e)>j.UPDATE_SMOKE_DELTA_ANGLE?(this._delayedAngle=M(t,-Math.PI,Math.PI),b.rotRight):b.rotNoRotate}setPosAndAngle(t,e){const i=Math.sin(e),s=Math.cos(e);x.rotateToDefaultSpritePoint(this._currAnimation,t,i,s),this._currAnimation.point=t,this._currAnimation.angle=e}addAnimation(){this._animationManager.add(this._currAnimation)}spawnTopSmoke(t,e,i,s){this._currAnimation=new z(this._width,this._height);let n=this._currAnimation.calcPosition(t,i,s);const r=e+1.5708;this.setPosAndAngle(n,r),this.addAnimation()}spawnBottomSmoke(t,e,i,s){this._currAnimation=new Z(this._width,this._height,this._trackHeight);let n=this._currAnimation.calcPosition(t,i,s);const r=e+1.5708;this.setPosAndAngle(n,r),this.addAnimation()}}j.UPDATE_SMOKE_DELTA_ANGLE=.113446;class ${constructor(t,e,i){this._tankSpriteParts=t,this._tankTrackEffect=new X(e,i)}get getParts(){return Object.values(this._tankSpriteParts)}get tankSpriteParts(){return this._tankSpriteParts}get tankTrackEffect(){return this._tankTrackEffect}get tankTireTrack(){return this._tankTireTrack}spawnTankAcceleration(t,e,i){this._tankAcceleration=new V(t,e,i)}removeAcceleration(){this._tankAcceleration.removeAcceleration()}spawnTireTracks(t,e,i,s){this._tankTireTrack=new F(t,this._tankSpriteParts.topTrackSprite,s);const n=Math.sin(i),r=Math.cos(i),{topFirstChainPoint:a,bottomFirstChainPoint:o}=this._tankTireTrack.calcFirstTopBottomChainPoints(this._tankSpriteParts,e,n,r);this._tankTireTrack.spawnFullTireTrack(a,o,i,n,r)}spawnDriftSmoke(t){this._tankDrift=new j(t,this._tankSpriteParts.topTrackSprite.width,this._tankSpriteParts.topTrackSprite.height)}updateTireTrack(t,e,i,s){const{topFirstChainPoint:n,bottomFirstChainPoint:r}=this._tankTireTrack.calcFirstTopBottomChainPoints(this._tankSpriteParts,t,i,s),{topLastChainPoint:a,bottomLastChainPoint:o}=this._tankTireTrack.calcLastTopBottomChainPoints(this._tankSpriteParts,t,i,s),{isUpdate:l,prevPoint:h,currPoint:c}=this._tankTireTrack.checkForUpdate(n,r,a,o);if(l){this._tankTireTrack.updateAllChainPoints(n,r,a,o);switch(this._tankTireTrack.detectMovementDirection(h,c,e)){case U.dirForward:this._tankTireTrack.forwardUpdate(n,r,e,i,s);break;case U.dirRotate:this._tankTireTrack.createTireTrackPair(a,o,e,i,s);break;case U.dirBackward:this._tankTireTrack.backwardUpdate(a,o,e,i,s)}}}updateDriftSmoke(t,e,i,s){let n=this._tankSpriteParts.hullSprite.calcPosition(t,i,s);n=this._tankSpriteParts.bottomTrackSprite.calcPosition(n,i,s);switch(this._tankDrift.detectRotateDirection(e)){case b.rotLeft:this._tankDrift.spawnTopSmoke(t,e,i,s);break;case b.rotRight:this._tankDrift.spawnBottomSmoke(n,e,i,s)}}updateForwardAction(t,e,i){this._tankTrackEffect.isForwardMovement=!0;const s=Math.sin(e),n=Math.cos(e),r=this._tankSpriteParts.hullSprite.calcPosition(t,s,n);this.updateSprite(t,e,i,s,n,r),this._tankAcceleration.setPosition(r,s,n,e),this.updateTireTrack(t,e,s,n),this.updateDriftSmoke(t,e,s,n)}updateBackwardAction(t,e,i){this._tankTrackEffect.isForwardMovement=!1;const s=Math.sin(e),n=Math.cos(e);this.defaultUpdate(t,e,i,s,n),this.updateTireTrack(t,e,s,n),this.updateDriftSmoke(t,e,s,n)}preUpdateAction(t,e,i){const s=Math.sin(e),n=Math.cos(e);this.updateTireTrack(t,e,s,n),this.updateDriftSmoke(t,e,s,n),this.defaultUpdate(t,e,i,s,n)}updateAfterAction(t,e,i){const s=Math.sin(e),n=Math.cos(e);this.defaultUpdate(t,e,i,s,n)}defaultUpdate(t,e,i,s,n){const r=this._tankSpriteParts.hullSprite.calcPosition(t,s,n);this.updateSprite(t,e,i,s,n,r)}rotateTurretUpdate(t,e,i,s){const n=Math.sin(e),r=Math.cos(e),a=this._tankSpriteParts.turretSprite,o=a.calcPosition(t,i,s),l=o.clone();x.rotateForTurretPoint(a,l,i,s,n,r),x.rotateToDefaultSpritePoint(a,o,i,s),x.setPosAndAngle(a,o,e);let h=this._tankSpriteParts.weaponSprite.calcPosition(l,n,r);x.updateSpritePart(this._tankSpriteParts.weaponSprite,h,n,r,e)}updateSprite(t,e,i,s,n,r){const a=this._tankSpriteParts.topTrackSprite,o=this._tankSpriteParts.bottomTrackSprite,l=this._tankSpriteParts.hullSprite;let h=a.calcPosition(t);x.updateSpritePart(a,h,s,n,e),h=l.calcPosition(t,s,n),x.updateSpritePart(l,h,s,n,e),h=o.calcPosition(r,s,n),x.updateSpritePart(o,h,s,n,e),this.rotateTurretUpdate(r,i,s,n),this._tankTrackEffect.changeFrame(a,o)}}class q{get health(){return 100}get armor(){return 1}get mass(){return 1}get armorStrength(){return 20}get num(){return 0}}class Q{constructor(){this._angularData={finishSpeed:.0175,force:.03},this._forwardData={finishSpeed:3,force:.03},this._backwardData={finishSpeed:2,force:.025}}get angularData(){return this._angularData}get forwardData(){return this._forwardData}get backwardData(){return this._backwardData}get num(){return 0}}class J{constructor(t,e,i,s){this._hull=t,this._track=e,this._turret=i,this._weapon=s}get hull(){return this._hull}get track(){return this._track}get turret(){return this._turret}get weapon(){return this._weapon}}class tt{constructor(){}static create(t,e,i,s){const n=tt.createTurret(i),r=tt.createWeapon(s),a=tt.createHull(t),o=tt.createTrack(e);return new J(a,o,n,r)}static createHull(t){if(0===t)return new q;throw new Error(`Hull model ${t} was not found`)}static createTrack(t){if(0===t)return new Q;throw new Error(`Track model ${t} was not found`)}static createTurret(t){if(0===t)return new k;throw new Error(`Turret model ${t} was not found`)}static createWeapon(t){if(0===t)return new N;throw new Error(`Weapon model ${t} was not found`)}}class et extends H{get accelerationEffectIndentX(){return this._accelerationEffectIndentX}constructor(e,i){super(t.HULL_WIDTH[i],t.HULL_HEIGHT[i],4),this._accelerationEffectIndentX=t.ACCELERATION_EFFECT_INDENT_X[i],this._sprite.src=`src/img/tanks/Hulls/Hull_${i}/Hull_${e}.png`}calcPosition(e,i,s){return new g(e.x-t.TRACK_INDENT*i,e.y+t.TRACK_INDENT*s)}}class it extends H{static calcHeight(t){return it.PROPORTION_WIDTH_HEIGHT*t}get num(){return this._num}constructor(e,i,s){super(i+t.TRACK_INDENT,s,3),this._frame=0,this._num=e,this._sprite.src=`src/img/tanks/Tracks/Track_${e}.png`}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return it.ORIGINAL_WIDTH}get originalHeight(){return it.ORIGINAL_HEIGHT}}it.PROPORTION_WIDTH_HEIGHT=42/246,it.ORIGINAL_WIDTH=246,it.ORIGINAL_HEIGHT=42;class st extends it{constructor(t,e){super(t,e,it.calcHeight(e))}calcPosition(t){return t.clone()}}class nt extends it{constructor(e,i,s){const n=it.calcHeight(i);super(e,i,n),this._deltaHeight=s+t.TRACK_INDENT-n}calcPosition(t,e,i){return new g(t.x-this._deltaHeight*e,t.y+this._deltaHeight*i)}}class rt extends H{constructor(e,i,s,n){super(t.TURRET_WIDTH[i],t.TURRET_HEIGHT[i],5),this._sprite.src=`src/img/tanks/Turrets/Turret_${i}/Turret_${e}.png`,this._indentX=s,this._indentY=n}calcPosition(t,e,i){return new g(t.x+this._indentX*i-this._indentY*e,t.y+this._indentY*i+this._indentX*e)}}class at extends H{constructor(e,i,s){super(t.WEAPON_WIDTH[e],t.WEAPON_HEIGHT[e],5),this._sprite.src=`src/img/tanks/Weapons/Weapon_${e}.png`,this._indentX=i,this._indentY=s}calcPosition(t,e,i){return new g(t.x+this._indentX*i-this._indentY*e,t.y+this._indentY*i+this._indentX*e)}}class ot{constructor(t,e,i,s,n){this._hullSprite=t,this._bottomTrackSprite=e,this._topTrackSprite=i,this._turretSprite=s,this._weaponSprite=n}get hullSprite(){return this._hullSprite}get bottomTrackSprite(){return this._bottomTrackSprite}get topTrackSprite(){return this._topTrackSprite}get turretSprite(){return this._turretSprite}get weaponSprite(){return this._weaponSprite}}class lt{constructor(){}static create(e,i,s,n,r){return new ot(new et(e,i),new nt(s,t.HULL_WIDTH[i],t.HULL_HEIGHT[i]),new st(s,t.HULL_WIDTH[i]),new rt(e,n,t.TURRET_INDENT_X[i],(t.HULL_HEIGHT[i]>>1)-(t.TURRET_HEIGHT[n]>>1)),new at(r,9*t.TURRET_WIDTH[n]/10,(t.TURRET_HEIGHT[n]>>1)-(t.WEAPON_HEIGHT[r]>>1)))}}class ht{get model(){return this._model}get sprite(){return this._sprite}get id(){return this._model.entity.id}get tankInfo(){return this._tankInfo}set tankInfo(t){this._tankInfo=t}constructor(e,i,s){this._tankInfo=s;const n=tt.create(s.hullNum,s.trackNum,s.turretNum,s.weaponNum),r=new S(e,t.getTankEntityWidth(s.hullNum),t.getTankEntityHeight(s.hullNum),i,n.turret.mass+n.hull.mass+n.weapon.mass,y.tankId);this._model=new D(n,r);const a=n.track;this._sprite=new $(lt.create(s.color,s.hullNum,s.trackNum,s.turretNum,s.weaponNum),a.forwardData,a.backwardData)}spawn(t,e){const i=this._sprite.tankSpriteParts;t.insert(i.topTrackSprite),t.insert(i.bottomTrackSprite),t.insert(i.hullSprite),t.insert(i.weaponSprite),t.insert(i.turretSprite);const s=this._model.entity;e.insert(s),this._sprite.updateAfterAction(s.points[0],s.angle,this._model.turretAngle)}terminate(t,e){const i=this._sprite.tankSpriteParts;this._sprite.tankTireTrack.vanishFullTrack(),t.remove(i.topTrackSprite),t.remove(i.bottomTrackSprite),t.remove(i.hullSprite),t.remove(i.weaponSprite),t.remove(i.turretSprite),e.remove(this._model.entity)}adjustPosition(e,i){this.model.entity.adjustPolygon(e,t.getTankEntityWidth(this._tankInfo.hullNum),t.getTankEntityHeight(this._tankInfo.hullNum),i)}}class ct{constructor(t,e){this._model=t,this._sprite=e}get model(){return this._model}get sprite(){return this._sprite}get id(){return this._model.entity.id}spawn(t,e){t.insert(this._sprite),e.insert(this._model.entity)}terminate(t,e){t.remove(this._sprite),e.remove(this._model.entity)}}class _t extends H{constructor(e,n){super(t.WALL_WIDTH[n],t.WALL_HEIGHT[n],3),this._sprite.src=`src/img/blocks/${i[e]}_${s[n]}.png`}updateAfterAction(t,e){t=t.clone(),x.rotateToDefaultSpritePoint(this,t,Math.sin(e),Math.cos(e)),x.setPosAndAngle(this,t,e)}}class ut extends u{constructor(t){super(t,1/0)}get maxHealth(){return 1/0}}class dt{constructor(){}static createWallsAroundPerimeter(e,i,s,n){const r=new Array,a=this.calcIndent(e,n.width),o=this.calcIndent(i,n.height-2*t.WALL_HEIGHT[0]);return this.createHorWalls(s,a,o,n,r),this.createVertWalls(s,a,o,n,r),{wallsArray:r,point:new g(a,o)}}static calcIndent(e,i){return(i-e*t.WALL_WIDTH[0])/2}static createHorWalls(e,i,s,n,r){for(let a=i;a<=n.width-i-t.WALL_WIDTH[this.RECT_NUM];a+=t.WALL_WIDTH[this.RECT_NUM])r.push(this.createWall(new g(a,s),0,e,this.RECT_NUM)),r.push(this.createWall(new g(a,n.height-t.WALL_HEIGHT[this.RECT_NUM]-s),0,e,this.RECT_NUM))}static createVertWalls(e,i,s,n,r){for(let a=s+t.WALL_HEIGHT[this.RECT_NUM]+(t.WALL_HEIGHT[this.RECT_NUM]>>1);a<=n.height-s-t.WALL_WIDTH[this.RECT_NUM];a+=t.WALL_WIDTH[this.RECT_NUM])r.push(this.createWall(new g(i-(t.WALL_HEIGHT[this.RECT_NUM]>>1),a),this.RAD_90,e,this.RECT_NUM)),r.push(this.createWall(new g(n.width-i-t.WALL_WIDTH[this.RECT_NUM]+(t.WALL_HEIGHT[this.RECT_NUM]>>1),a),this.RAD_90,e,this.RECT_NUM))}static createWall(e,i,s,r,a=!1){const o=a?n[s][r]:1/0,l=new ut(new S(e,t.WALL_WIDTH[r],t.WALL_HEIGHT[r],i,o,y.wallId)),h=new _t(s,r);return h.point=e,h.angle=i,new ct(l,h)}}dt.RAD_90=Math.PI/2,dt.RECT_NUM=0;class mt{constructor(){}static calcGridPoints(e){const i={GRID_COLUMNS_AMOUNT:12,GRID_LINES_AMOUNT:6,GRID_COLUMNS:[],GRID_LINES:[]},s=3*t.WALL_WIDTH[0]/2;for(let t=0;t<i.GRID_COLUMNS_AMOUNT;t++)i.GRID_COLUMNS[t]=e.x+t*s;for(let t=0;t<i.GRID_LINES_AMOUNT;t++)i.GRID_LINES[t]=e.y+t*s;return i}static makeHorWallLine(e,i,s,n,r,a,o){if(e.y===a.GRID_LINES[0]||e.y===a.GRID_LINES[a.GRID_LINES.length-1])throw new Error("Horizontal wall line was made on the obstacle!");e.x!==a.GRID_COLUMNS[0]&&s&&r.push(dt.createWall(e,0,o,1,!1));let l=new g(e.x+t.WALL_WIDTH[1],e.y);for(let s=0;s<i;s++){if(l.x>=a.GRID_COLUMNS[a.GRID_COLUMNS.length-1])throw new Error("Horizontal wall line was made on the obstacle!");r.push(dt.createWall(new g(l.x,l.y),0,o,0,!1)),l=new g(l.x+t.WALL_WIDTH[0],e.y),s!==i-1?(r.push(dt.createWall(new g(l.x,l.y),0,o,1,!1)),l=new g(l.x+t.WALL_WIDTH[1],e.y)):e.x+i*(t.WALL_WIDTH[0]+t.WALL_WIDTH[1])<a.GRID_COLUMNS[a.GRID_COLUMNS.length-1]&&n&&r.push(dt.createWall(new g(l.x,l.y),0,o,1,!1))}}static makeVertWallLine(e,i,s,n,r,a,o){if(e.x===a.GRID_COLUMNS[0]||e.x===a.GRID_COLUMNS[a.GRID_COLUMNS.length-1])throw new Error("Vertical wall line was made on the obstacle!");let l=new g(e.x,e.y);l.y!==a.GRID_LINES[0]&&s&&r.push(dt.createWall(l,0,o,1,!1)),l=new g(l.x,l.y+t.WALL_HEIGHT[1]);let h=new g(l.x+t.WALL_HEIGHT[0],l.y);E.rotatePointAroundTarget(h,new g(h.x-t.WALL_HEIGHT[0]/2,h.y+t.WALL_WIDTH[0]/2),Math.sin(-Math.PI/2),Math.cos(-Math.PI/2));for(let s=0;s<i;s++){if(l.y>=a.GRID_LINES[a.GRID_LINES.length-1])throw new Error("Vertical wall line was made on the obstacle!");r.push(dt.createWall(new g(h.x,h.y),Math.PI/2,o,0,!1)),h=new g(h.x,h.y+t.WALL_WIDTH[0]),l=new g(l.x,l.y+t.WALL_WIDTH[0]),s!==i-1?(r.push(dt.createWall(new g(l.x,l.y),0,o,1,!1)),l=new g(l.x,l.y+t.WALL_HEIGHT[1]),h=new g(h.x,h.y+t.WALL_HEIGHT[1])):e.y+i*(t.WALL_WIDTH[0]+t.WALL_HEIGHT[1])<a.GRID_LINES[a.GRID_LINES.length-1]&&n&&r.push(dt.createWall(new g(l.x,l.y),0,o,1,!1))}}static createMazeLvl1(t,e){const i=mt.calcGridPoints(e),s=new Array;return mt.makeVertWallLine(new g(i.GRID_COLUMNS[1],i.GRID_LINES[1]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[0],i.GRID_LINES[2]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[1],i.GRID_LINES[3]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[1],i.GRID_LINES[4]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[2],i.GRID_LINES[4]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[2],i.GRID_LINES[0]),3,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[2],i.GRID_LINES[3]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[3],i.GRID_LINES[1]),3,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[3],i.GRID_LINES[2]),2,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[5],i.GRID_LINES[2]),2,!1,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[5],i.GRID_LINES[3]),1,!1,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[4],i.GRID_LINES[4]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[4],i.GRID_LINES[3]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[5],i.GRID_LINES[0]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[4],i.GRID_LINES[1]),3,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[6],i.GRID_LINES[1]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[6],i.GRID_LINES[4]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[8],i.GRID_LINES[1]),2,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[7],i.GRID_LINES[2]),2,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[7],i.GRID_LINES[2]),2,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[9],i.GRID_LINES[2]),1,!1,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[9],i.GRID_LINES[3]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[8],i.GRID_LINES[3]),2,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[8],i.GRID_LINES[4]),1,!1,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[9],i.GRID_LINES[1]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[10],i.GRID_LINES[1]),1,!1,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[10],i.GRID_LINES[2]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[10],i.GRID_LINES[4]),1,!0,!0,s,i,t),s}static createMazeLvl2(t,e){const i=mt.calcGridPoints(e),s=new Array;return mt.makeHorWallLine(new g(i.GRID_COLUMNS[0],i.GRID_LINES[1]),2,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[2],i.GRID_LINES[1]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[3],i.GRID_LINES[0]),2,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[3],i.GRID_LINES[2]),2,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[5],i.GRID_LINES[1]),2,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[5],i.GRID_LINES[1]),1,!1,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[5],i.GRID_LINES[3]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[4],i.GRID_LINES[0]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[0],i.GRID_LINES[4]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[1],i.GRID_LINES[2]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[1],i.GRID_LINES[3]),3,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[2],i.GRID_LINES[3]),2,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[7],i.GRID_LINES[0]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[6],i.GRID_LINES[4]),1,!1,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[3],i.GRID_LINES[4]),5,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[7],i.GRID_LINES[2]),2,!1,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[6],i.GRID_LINES[2]),2,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[8],i.GRID_LINES[1]),2,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[9],i.GRID_LINES[0]),3,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[9],i.GRID_LINES[3]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[10],i.GRID_LINES[1]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[10],i.GRID_LINES[2]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[9],i.GRID_LINES[4]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[9],i.GRID_LINES[4]),1,!1,!0,s,i,t),s}static createMazeLvl3(t,e){const i=mt.calcGridPoints(e),s=new Array;return mt.makeVertWallLine(new g(i.GRID_COLUMNS[1],i.GRID_LINES[0]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[0],i.GRID_LINES[2]),2,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[0],i.GRID_LINES[4]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[3],i.GRID_LINES[0]),3,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[2],i.GRID_LINES[1]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[1],i.GRID_LINES[3]),2,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[2],i.GRID_LINES[4]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[4],i.GRID_LINES[3]),2,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[3],i.GRID_LINES[4]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[6],i.GRID_LINES[0]),3,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[4],i.GRID_LINES[1]),2,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[6],i.GRID_LINES[2]),3,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[7],i.GRID_LINES[1]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[9],i.GRID_LINES[1]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[9],i.GRID_LINES[1]),1,!1,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[8],i.GRID_LINES[0]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[6],i.GRID_LINES[4]),1,!1,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[5],i.GRID_LINES[4]),3,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[5],i.GRID_LINES[2]),2,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[4],i.GRID_LINES[2]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[7],i.GRID_LINES[3]),1,!0,!0,s,i,t),mt.makeVertWallLine(new g(i.GRID_COLUMNS[9],i.GRID_LINES[3]),2,!1,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[8],i.GRID_LINES[3]),2,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[10],i.GRID_LINES[2]),1,!0,!0,s,i,t),mt.makeHorWallLine(new g(i.GRID_COLUMNS[10],i.GRID_LINES[4]),1,!0,!0,s,i,t),s}}class gt extends H{constructor(e){super(t.BACKGROUND_SIZE,t.BACKGROUND_SIZE,0),this._sprite.src=`src/img/backgrounds/${i[e]}_${C(0,1)}.png`}}class It{constructor(){}static fullFillBackground(e,i,s){for(let n=0;n<i.width;n+=t.BACKGROUND_SIZE)for(let r=0;r<i.height;r+=t.BACKGROUND_SIZE)s.insert(this.addBackgroundTile(new g(n,r),e))}static addBackgroundTile(t,e){const i=new gt(e);return i.point=t,i}}class pt{constructor(){}static dotProduct(t,e){return t.x*e.x+t.y*e.y}static crossProduct(t,e){return t.x*e.y-t.y*e.x}static add(t,e){return new I(t.x+e.x,t.y+e.y)}static subtract(t,e){return new I(t.x-e.x,t.y-e.y)}static scale(t,e){return new I(t.x*e,t.y*e)}static createFromAngleAndLength(t,e){return new I(e*Math.cos(t),e*Math.sin(t))}static calcCoDirectionalScaleFactor(t,e){return t.x/e.x}static calcScaleFactor(t,e){return t.length/e.length}}class Et{constructor(){}static hasCollision(t,e){const i=Et.getAxes(t),s=Et.getAxes(e);function n(i){for(const s of i){const i=Et.getProjection(t,s),n=Et.getProjection(e,s);if(Math.min(i.max-n.min,n.max-i.min)<=0)return!1}return!0}return n(i)&&n(s)}static getCollisionResult(t,e){const i=Et.getAxes(t),s=Et.getAxes(e);let n,r,a=Number.MAX_VALUE;function o(s){const o=s===i;for(const i of s){const s=Et.getProjection(t,i),l=Et.getProjection(e,i),h=Math.min(s.max-l.min,l.max-s.min);if(h<=0)return!1;h<a&&(a=h,n=i,r=o)}return!0}return o(i)&&o(s)?{collisionPoint:Et.findClosestVertex(t,e,n,r),overlap:a}:null}static findClosestVertex(t,e,i,s){let n,r;return s?(n=this.getProjection(t,i),r=this.getExtendedProjection(e,i,!1)):(n=this.getProjection(e,i),r=this.getExtendedProjection(t,i,!0)),r.max-n.min<n.max-r.min?r.maxPoint:r.minPoint}static getExtendedProjection(t,e,i){let s=pt.dotProduct(e,t.points[0]),n=s,r=t.points[0],a=t.points[0];for(let o=1;o<t.points.length;o++){const l=pt.dotProduct(e,t.points[o]);l<s?(s=l,r=t.points[o]):l>n?(n=l,a=t.points[o]):i&&Math.abs(l-s)<this.EPSILON?r=w(r,t.points[o]):i&&Math.abs(l-n)<this.EPSILON&&(a=w(a,t.points[o]))}return{min:s,max:n,minPoint:r,maxPoint:a}}static getAxes(t){const e=new Array,i=t.points.length-1;for(let s=0;s<i;s++)e.push(p.create(t.points[s],t.points[s+1]));return e.push(p.create(t.points[i],t.points[0])),e}static getProjection(t,e){let i=pt.dotProduct(e,t.points[0]),s=i;for(let n=1;n<t.points.length;n++){const r=pt.dotProduct(e,t.points[n]);r<i?i=r:r>s&&(s=r)}return{min:i,max:s}}}Et.EPSILON=1;class Tt{constructor(){}static resolveCollision(t,e){const i=Et.getCollisionResult(t,e);if(null===i)return null;const s=this.calcCollisionNormal(i.collisionPoint,t.calcCenter()),n=this.calcImpulseMagnitude(t,e,s)+this.calcAngularImpulseMagnitude(t,e);return this.separateEntities(t,i.overlap,s),this.updateAngularVelocity(t,e,i.collisionPoint,n,s),this.updateVelocity(t,e,n,s),i.collisionPoint}static updateAngularVelocity(t,e,i,s,n){const r=this.calcEntityNormal(t),a=pt.subtract(i,e.calcCenter()),o=pt.subtract(i,t.calcCenter()),l=pt.crossProduct(a,n)*s,h=pt.crossProduct(o,r)*s,c=l/e.momentOfInertia;let _=h/t.momentOfInertia;this.shouldReverseReceiving(e.angle,r.angle)&&(_=-_),e.angularVelocity+=c,t.angularVelocity+=_}static shouldReverseReceiving(t,e){const i=M(t-e,0,Math.PI);return i<Math.PI/2&&i>Math.PI/4||i>=Math.PI/2&&i<3*Math.PI/4}static calcEntityNormal(t){const e=t.angle;return A(f(e,t.velocity.angle))?new I(-Math.cos(e),-Math.sin(e)):new I(Math.cos(e),Math.sin(e))}static updateVelocity(t,e,i,s){const n=pt.scale(s,-i/t.mass),r=pt.scale(s,i/e.mass);t.velocity.addVector(n),e.velocity.addVector(r)}static separateEntities(t,e,i){let s=-i.x*e,n=-i.y*e;s+=1===Math.sign(s)?this.CORRECTION_FACTOR:-this.CORRECTION_FACTOR,n+=1===Math.sign(n)?this.CORRECTION_FACTOR:-this.CORRECTION_FACTOR;for(const e of t.points)e.addToCoordinates(s,n);Math.abs(t.angularVelocity)>this.SMALL_ANGULAR_VELOCITY&&(t.angularVelocity-=1===Math.sign(t.angularVelocity)?this.CORRECTION_FACTOR/t.momentOfInertia:-this.CORRECTION_FACTOR/t.momentOfInertia)}static calcImpulseMagnitude(t,e,i){const s=pt.subtract(t.velocity,e.velocity);return 2*pt.dotProduct(s,i)/(1/t.mass+1/e.mass)*this.RETENTION_IMPULSE_COEFFICIENT}static calcAngularImpulseMagnitude(t,e){return Math.abs(t.angularVelocity-e.angularVelocity)/(1/t.momentOfInertia+1/e.momentOfInertia)*this.RETENTION_ANGULAR_IMPULSE_COEFFICIENT}static calcCollisionNormal(t,e){const i=pt.subtract(t,e);return i.normalize(),i}}Tt.RETENTION_IMPULSE_COEFFICIENT=.6,Tt.RETENTION_ANGULAR_IMPULSE_COEFFICIENT=.012,Tt.CORRECTION_FACTOR=.6,Tt.SMALL_ANGULAR_VELOCITY=.001;class Lt{constructor(){this._idForProcessing=new Array}hasForProcessing(){return 0!==this._idForProcessing.length}clear(){this._idForProcessing.length=0}push(t){this._idForProcessing.push(t)}get iterable(){return this._idForProcessing}}class Mt{constructor(t){this._collisionDetection=t}hasCollision(t){const e=this._collisionDetection.getCollisions(t);return function(t){for(const e of t)return!0;return!1}(e)?e:null}}class At{get wallsForProcessing(){return this._wallsForProcessing}get collisionChecker(){return this._collisionDetector}constructor(t){this._wallsForProcessing=new Lt,this._collisionDetector=new Mt(t)}resolveCollision(t){const e=this._collisionDetector.hasCollision(t);if(e){const i=new Array;for(const s of e){const e=Tt.resolveCollision(t,s);e&&(i.push({collisionPoint:e,id:s.id}),this.processCollision(s))}return i}return null}processCollision(t){y.isWall(t.id)&&this._wallsForProcessing.push(t.id)}}class ft{constructor(t,e){this._rectangles=new Array,this._sprites=new Array,this._size=e,this._ctx=t,this._ctx.clearRect(0,0,this._size.width,this._size.height),this._bufferCanvas=document.createElement("canvas"),this._bufferCanvas.width=e.width,this._bufferCanvas.height=e.height,this._bufferCtx=this._bufferCanvas.getContext("2d")}get ctx(){return this._ctx}insert(t){const e=P.extractZIndex(t.id);for(let t=this._sprites.length;t<=e;t++)this._sprites.push(new Map);this._sprites[e].set(t.id,t)}remove(t){this.removeById(t)}removeById(t){const e=P.extractZIndex(t.id);this._sprites[e].delete(t.id)}drawAll(){this._bufferCtx.clearRect(0,0,this._size.width,this._size.height);for(const t of this._sprites)for(const e of t.values())this.draw(e);this.drawAdditionalShapes(),this._ctx.drawImage(this._bufferCanvas,0,0)}drawAdditionalShapes(){this.drawRectangles(),this._rectangles.length=0}drawRectangles(){for(const t of this._rectangles)this._bufferCtx.fillStyle=t.color,this._bufferCtx.fillRect(t.point.x,t.point.y,t.width,t.height)}addRectangle(t){this._rectangles.push(t)}clear(){this._sprites.length=0,this._rectangles.length=0}draw(t){this._bufferCtx.save();const e=t.width/2,i=t.height/2;"opacity"in t&&(this._bufferCtx.globalAlpha=t.opacity),this._bufferCtx.translate(t.point.x+e,t.point.y+i),this._bufferCtx.rotate(t.angle),function(t){return"scaleX"in t&&"scaleY"in t}(t)&&this._bufferCtx.scale(t.scaleX,t.scaleY),!function(t){return"frame"in t&&"originalWidth"in t&&"originalHeight"in t}(t)?this._bufferCtx.drawImage(t.sprite,-e,-i,t.width,t.height):this._bufferCtx.drawImage(t.sprite,t.frame*t.originalWidth,0,t.originalWidth,t.originalHeight,-e,-i,t.width,t.height),this._bufferCtx.restore()}}class wt{constructor(t,e,i,s){this._boundary={xStart:t,yStart:e,xLast:i,yLast:s},this._root=new St(this._boundary)}insert(t){this._root.insert(t)}getCollisions(t){return this._root.getCollisions(t)}remove(t){this._root.remove(t)}clear(){this._root=new St(this._boundary)}}class St{constructor(t){this._totalPolygons=0,this._polygons=new Map,this._children=null,this._boundary=t}isSubdivide(){return null===this._polygons}subdivide(){const t=this._boundary.xStart,e=this._boundary.yStart,i=this._boundary.xLast,s=this._boundary.yLast,n=(i-t)/2,r=(s-e)/2;this._children=[new St({xStart:t,yStart:e,xLast:t+n,yLast:e+r}),new St({xStart:t+n,yStart:e,xLast:i,yLast:e+r}),new St({xStart:t,yStart:e+r,xLast:t+n,yLast:s}),new St({xStart:t+n,yStart:e+r,xLast:i,yLast:s})],this.redistribute()}redistribute(){this._totalPolygons=0;for(const t of this._children){for(const e of this._polygons.values())t.insert(e);this._totalPolygons+=t._totalPolygons}this._polygons=null}insert(t){if(this.isContainsPolygon(t))if(this.isSubdivide()){this._totalPolygons=0;for(const e of this._children)e.insert(t),this._totalPolygons+=e._totalPolygons}else this._totalPolygons++,this._polygons.set(t.id,t),this._polygons.size>St.CAPACITY&&this.subdivide()}remove(t){if(this.isContainsPolygon(t))if(this.isSubdivide()){this._totalPolygons=0;for(const e of this._children)e.remove(t),this._totalPolygons+=e._totalPolygons;this._totalPolygons<=St.HALF_CAPACITY&&this.mergeWithChildren()}else this._totalPolygons--,this._polygons.delete(t.id)}getCollisions(t){const e=new Array;if(this.isSubdivide())for(const i of this._children)i.isContainsPolygon(t)&&e.push(...i.getCollisions(t));else for(const i of this._polygons.values())Et.hasCollision(t,i)&&e.push(i);return e}isContainsPolygon(t){for(const e of t.points)if(this.isContainsPoint(e))return!0;return!1}isContainsPoint(t){return t.x>this._boundary.xStart&&t.x<this._boundary.xLast&&t.y>this._boundary.yStart&&t.y<this._boundary.yLast}mergeWithChildren(){this._polygons=new Map;for(const t of this._children){t.isSubdivide()&&t.mergeWithChildren();for(const e of t._polygons.values())this._polygons.set(e.id,e)}this._totalPolygons=this._polygons.size,this._children=null}}St.CAPACITY=8,St.HALF_CAPACITY=St.CAPACITY>>1;class yt{set resistanceCoeff(t){this._resistanceCoeff=t}set airResistanceCoeff(t){this._airResistanceCoeff=t}constructor(t,e){this._resistanceCoeff=0,this._airResistanceCoeff=0,this._entityStorage=t,this._collisionResolver=e}get entityStorage(){return this._entityStorage}get collisionResolver(){return this._collisionResolver}}class Rt extends yt{residualMovement(t,e){const i=t.sprite;t.model.isIdle()?i.tankTrackEffect.stopped():(i.tankTrackEffect.setResidualMovement(),this.hullUpdate(t,t.model.residualMovement,T.movement,t.sprite.preUpdateAction,e))}residualAngularMovement(t,e){t.model.isAngularMotionStopped()||this.hullUpdate(t,t.model.residualAngularMovement,T.angularMovement,t.sprite.preUpdateAction,e)}turretCounterclockwiseMovement(t,e){t.model.turretCounterclockwiseMovement(e),Rt.turretUpdate(t)}turretClockwiseMovement(t,e){t.model.turretClockwiseMovement(e),Rt.turretUpdate(t)}hullCounterclockwiseMovement(t,e){this.hullUpdate(t,t.model.hullCounterclockwiseMovement,T.angularMovement,t.sprite.preUpdateAction,e)}hullClockwiseMovement(t,e){this.hullUpdate(t,t.model.hullClockwiseMovement,T.angularMovement,t.sprite.preUpdateAction,e)}forwardMovement(t,e){this.hullUpdate(t,t.model.forwardMovement,T.movement,t.sprite.updateForwardAction,e)}backwardMovement(t,e){this.hullUpdate(t,t.model.backwardMovement,T.movement,t.sprite.updateBackwardAction,e)}hullUpdate(t,e,i,s,n){const r=t.model.entity;this._entityStorage.remove(r),e.call(t.model,this._resistanceCoeff,this._airResistanceCoeff,n),i(r),this._collisionResolver.resolveCollision(r)&&t.sprite.removeAcceleration(),s.call(t.sprite,r.points[0],r.angle,t.model.turretAngle),this._entityStorage.insert(r)}static turretUpdate(t){const e=t.model,i=e.entity.angle,s=Math.sin(i),n=Math.cos(i);t.sprite.rotateTurretUpdate(t.sprite.tankSpriteParts.hullSprite.calcPosition(e.entity.points[0],s,n),e.turretAngle,s,n)}}class Ct{constructor(){this._keys=new Set,this.keyDownHandler=this.handleKeyDown.bind(this),this.keyUpHandler=this.handleKeyUp.bind(this),document.addEventListener("keydown",this.keyDownHandler),document.addEventListener("keyup",this.keyUpHandler)}clearKeys(){this._keys.clear()}isKeyDown(t){return this._keys.has(t)}removeEventListeners(){document.removeEventListener("keydown",this.keyDownHandler),document.removeEventListener("keyup",this.keyUpHandler)}handleKeyDown(t){this._keys.add(t.keyCode)}handleKeyUp(t){this._keys.delete(t.keyCode)}}class kt extends yt{constructor(t,e){super(t,e)}get collisionResolver(){return this._collisionResolver}residualAngularMovement(t,e){t.model.isAngularMotionStopped()||this.update(t,t.model.residualAngularMovement,T.angularMovement,e)}residualMovement(t,e){t.model.isIdle()||this.update(t,t.model.residualMovement,T.movement,e)}update(t,e,i,s){const n=t.model.entity;this._entityStorage.remove(n),e.call(t.model,this._resistanceCoeff,this._airResistanceCoeff,s),i(n),this._collisionResolver.resolveCollision(n),t.sprite.updateAfterAction(n.points[0],n.angle),this._entityStorage.insert(n)}isCompleteMotion(t){return t.model.isAngularMotionStopped()&&t.model.isIdle()}movement(t,e){this.residualAngularMovement(t,e),this.residualMovement(t,e)}}class Nt{constructor(t,e,i,s){this._movementManager=t,this._spriteStorage=e,this._elements=i,this._isResponsibleFor=s}get movementManager(){return this._movementManager}get isResponsibleFor(){return this._isResponsibleFor}get(t){return this._elements.has(t)?this._elements.get(t):null}add(t){for(const e of t)this._elements.has(e.id)||(this._elements.set(e.id,e),e.spawn(this._spriteStorage,this._movementManager.entityStorage))}delete(t){this._elements.has(t.id)&&(this._elements.delete(t.id),t.terminate(this._spriteStorage,this._movementManager.entityStorage))}}class Dt{constructor(t){this._vanishingListOfTirePairs=new O,this.tanksAmount=0,this._storage=t}get vanishingListOfTirePairs(){return this.tanksAmount++,this._vanishingListOfTirePairs}removeTireTrackPair(t){this._storage.remove(t.topTire),this._storage.remove(t.bottomTire)}reduceOpacity(){let t=0;for(const e of this._vanishingListOfTirePairs){const i=this._vanishingListOfTirePairs.length*Dt.MIN_REDUCING_OPACITY_NUMBER/this.tanksAmount;e.topTire.opacity-=i,e.bottomTire.opacity-=i,e.topTire.opacity<=0&&t++}for(;t>0;t--)this.removeTireTrackPair(this._vanishingListOfTirePairs.tail),this._vanishingListOfTirePairs.removeFromTail()}}Dt.MIN_REDUCING_OPACITY_NUMBER=1e-4;class Pt extends K{get UPDATE_TIMER_TIME(){return Pt.UPDATE_TIMER_TIME}get MAX_FRAME(){return Pt.MAX_FRAME}constructor(e,i){super(t.EXPLOSION_SIZE,t.EXPLOSION_SIZE,1),this._sprite.src="src/img/tanks/Effects/Sprites/Sprite_Effects_Explosion.png",this._point=new g(e.x-t.EXPLOSION_SIZE/2,e.y-t.EXPLOSION_SIZE/2),this._angle=i}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return Pt.ORIGINAL_SIZE}get originalHeight(){return Pt.ORIGINAL_SIZE}}Pt.UPDATE_TIMER_TIME=90,Pt.MAX_FRAME=8,Pt.ORIGINAL_SIZE=256;class Ht extends K{get UPDATE_TIMER_TIME(){return Ht.UPDATE_TIMER_TIME}get MAX_FRAME(){return Ht.MAX_FRAME}constructor(t,e,i,s,n){super(i,s,1),this._sprite.src=`src/img/tanks/Effects/Sprites/Sprite_Fire_Shots_Impact_${0===n?0:1}.png`;const r=new g(t.x+s/2*Math.sin(e),t.y-s/2*Math.cos(e));x.rotateToDefaultSpritePoint(this,r,Math.sin(e),Math.cos(e)),this._point=r,this._angle=e}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return Ht.ORIGINAL_WIDTH}get originalHeight(){return Ht.ORIGINAL_HEIGHT}}Ht.UPDATE_TIMER_TIME=70,Ht.MAX_FRAME=3,Ht.ORIGINAL_WIDTH=120,Ht.ORIGINAL_HEIGHT=205;class vt extends K{get UPDATE_TIMER_TIME(){return vt.UPDATE_TIMER_TIME}get MAX_FRAME(){return vt.MAX_FRAME}constructor(t,e,i,s,n){super(i,s,1),this._sprite.src=`src/img/tanks/Effects/Sprites/Sprite_Fire_Shots_Shot_${0===n?0:1}.png`;const r=new g(t.x+s/2*Math.sin(e),t.y-s/2*Math.cos(e));x.rotateToDefaultSpritePoint(this,r,Math.sin(e),Math.cos(e)),this._point=r,this._angle=e}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return vt.ORIGINAL_WIDTH}get originalHeight(){return vt.ORIGINAL_HEIGHT}}vt.UPDATE_TIMER_TIME=45,vt.MAX_FRAME=3,vt.ORIGINAL_WIDTH=135,vt.ORIGINAL_HEIGHT=202;class Gt{static playDeathAnimation(t,e){if(y.isWall(e.id),y.isTank(e.id))return new Pt(e.model.entity.calcCenter(),C(-Math.PI,Math.PI));if(y.isBullet(e.id)){const i=e;return this.playImpactAnimation(t,i.model.entity.angle+Math.PI,i.sprite.num)}}static playImpactAnimation(e,i,s){return new Ht(e,i,5*t.BULLET_WIDTH[s],5*t.BULLET_HEIGHT[s],s)}static playShootAnimation(e,i,s){return new vt(e,i,5*t.BULLET_WIDTH[s],5*t.BULLET_HEIGHT[s],s)}}class Ot{constructor(t){this._animationManager=t}get animationManager(){return this._animationManager}createImpactAnimation(t,e){this._animationManager.add(Gt.playImpactAnimation(t,e.model.entity.angle+Math.PI,e.sprite.num))}createDeadAnimation(t,e){this._animationManager.add(Gt.playDeathAnimation(t,e))}}class xt{constructor(t){this._animationManager=t}get animationManager(){return this._animationManager}createShootAnimation(t,e){this._animationManager.add(Gt.playShootAnimation(w(t.entity.points[0],t.entity.points[3]),t.entity.angle,e))}}class Wt extends H{get num(){return this._num}constructor(e){super(t.BULLET_WIDTH[e],t.BULLET_HEIGHT[e],3),this._sprite.src=`src/img/tanks/Bullets/Bullet_${e}.png`,this._num=e}updateAfterAction(t,e){t=t.clone(),x.rotateToDefaultSpritePoint(this,t,Math.sin(e),Math.cos(e)),x.setPosAndAngle(this,t,e)}}class Ut{constructor(t,e,i){this._model=t,this._sprite=new Wt(e),this._source=i}get id(){return this._model.entity.id}get model(){return this._model}get sprite(){return this._sprite}spawn(t,e){t.insert(this._sprite),e.insert(this._model.entity)}terminate(t,e){t.remove(this._sprite),e.remove(this._model.entity)}get source(){return this._source}}class bt extends Nt{constructor(t,e,i,s,n,r,a){super(t,e,i,y.isTank),this._addBulletElement=s,this._KeyHandler=r,this._tankAnimator=new xt(n),this._tireTracksManager=new Dt(e),this._bonusCollisionManager=a}handle(t){this._tireTracksManager.reduceOpacity();for(const e of this._elements.values()){const i=e.tankInfo.control;let s=this._KeyHandler.isKeyDown(i.turretClockwiseKey),n=this._KeyHandler.isKeyDown(i.turretCounterClockwiseKey);if((s&&!n||!s&&n)&&(s?this._movementManager.turretClockwiseMovement(e,t):n&&this._movementManager.turretCounterclockwiseMovement(e,t)),s=this._KeyHandler.isKeyDown(i.forwardKey),n=this._KeyHandler.isKeyDown(i.backwardKey),s&&!n||!s&&n?s?this._movementManager.forwardMovement(e,t):n&&(e.sprite.removeAcceleration(),this._movementManager.backwardMovement(e,t)):(e.sprite.removeAcceleration(),this._movementManager.residualMovement(e,t)),s=this._KeyHandler.isKeyDown(i.hullClockwiseKey),n=this._KeyHandler.isKeyDown(i.hullCounterClockwiseKey),s&&!n||!s&&n?s?this._movementManager.hullClockwiseMovement(e,t):n&&this._movementManager.hullCounterclockwiseMovement(e,t):this._movementManager.residualAngularMovement(e,t),s=this._KeyHandler.isKeyDown(i.shootKey),s){const t=e.model.shot();if(t){const i=e.model.bulletNum;this._tankAnimator.createShootAnimation(t,i),this._addBulletElement.addElement(new Ut(t,i,e))}}this._bonusCollisionManager.checkForBonusHits(e)}}add(t){super.add(t);for(const e of t){const t=e.sprite,i=e.model.entity;t.spawnTireTracks(this._spriteStorage,i.points[0],i.angle,this._tireTracksManager.vanishingListOfTirePairs),t.spawnDriftSmoke(this._tankAnimator.animationManager);const s=t.tankSpriteParts.hullSprite;t.spawnTankAcceleration(this._spriteStorage,s.accelerationEffectIndentX,s.height)}}}class Ft extends Nt{constructor(t,e,i){super(t,e,i,y.isWall),this._wallToProcess=new O}addToProcess(){const t=this._movementManager.collisionResolver.wallsForProcessing;if(t.hasForProcessing()){for(const e of t.iterable)this._wallToProcess.addToTail(this._elements.get(e));t.clear()}}handle(t){this.addToProcess(),this._wallToProcess.isEmpty()||this._wallToProcess.applyAndRemove(this._movementManager.movement.bind(this._movementManager),this._movementManager.isCompleteMotion.bind(this._movementManager),t)}}class Bt{constructor(t){this._animationList=new O,this._storage=t}add(t){this._storage.insert(t),this._animationList.addToTail(t)}handle(t){this._animationList.isEmpty()||this._animationList.applyAndRemove(((t,e)=>t.changeFrame(e)),this.removalCondition.bind(this),t)}removalCondition(t){return t.isEnded&&this._storage.removeById(t),t.isEnded}}class Vt extends Nt{constructor(t,e,i,s,n,r,a){super(t,e,i,y.isBullet),this._handlingManagers=s,this._bulletAnimator=new Ot(n),this._killProcessor=r,this._healthManager=a}handle(t){if(0!==this._elements.size){const e=new Array;for(const i of this._elements.values())this._movementManager.movement(i,t),this._movementManager.hasResidualMovement(i)||e.push(i);for(const t of e)this.delete(t)}this._movementManager.bulletCollisionDates.hasForProcessing()&&this.handleBulletCollisions()}handleBulletCollisions(){for(const t of this._movementManager.bulletCollisionDates.iterable){for(const e of t.collisionPacks){this._bulletAnimator.createImpactAnimation(e.collisionPoint,t.bulletElement);const i=e.id,s=this.getElementHandling(i),n=s.get(i);n&&(n.model.takeDamage(t.bulletElement.model),n.model.isDead()?(s.delete(n),this._bulletAnimator.createDeadAnimation(e.collisionPoint,n),this._healthManager.remove(n.model),this._killProcessor.processKill(t.bulletElement.source,n)):this._healthManager.add(n.model))}this.delete(t.bulletElement),this._healthManager.remove(t.bulletElement.model)}this._movementManager.bulletCollisionDates.clear()}getElementHandling(t){for(const e of this._handlingManagers)if(e.isResponsibleFor(t))return e}}class Xt{constructor(t,e,i){this._elements=t,this._storage=e,this._bulletMovementManager=i}addElement(t){this._elements.has(t.id)||this._bulletMovementManager.checkForSpawn(t)&&(this._elements.set(t.id,t),t.spawn(this._storage,this._bulletMovementManager.entityStorage))}}class Kt{constructor(){}static movePolygon(t,e){for(const i of t.points)i.addToCoordinates(e.x,e.y)}static rotatePolygon(t,e){const i=Math.sin(e),s=Math.cos(e),n=t.calcCenter();for(const e of t.points)E.rotatePointAroundTarget(e,n,i,s)}}class Yt extends yt{constructor(){super(...arguments),this._bulletCollisionDates=new Lt}get bulletCollisionDates(){return this._bulletCollisionDates}hasResidualMovement(t){return!t.model.isIdle()}movement(t,e){t.model.isIdle()||this.update(t,e)}update(t,e){const i=t.model.entity;this._entityStorage.remove(i),t.model.residualMovement(this._airResistanceCoeff,e);const s=pt.createFromAngleAndLength(i.velocity.angle,i.movementLength);let n=!1;const r=Math.floor(pt.calcCoDirectionalScaleFactor(i.velocity,s));for(let e=r;e>0;e--){Kt.movePolygon(i,s);const e=this._collisionResolver.resolveCollision(i);if(e){this._bulletCollisionDates.push({bulletElement:t,collisionPacks:e}),n=!0;break}}if(!n){s.scale(-r),s.addVector(i.velocity),Kt.movePolygon(i,s);const e=this._collisionResolver.resolveCollision(i);e&&this._bulletCollisionDates.push({bulletElement:t,collisionPacks:e})}t.sprite.updateAfterAction(i.points[0],i.angle),this._entityStorage.insert(i)}checkForSpawn(t){const e=t.model.entity,i=this._collisionResolver.resolveCollision(e);return i?(this._bulletCollisionDates.push({bulletElement:t,collisionPacks:i}),!1):(t.sprite.updateAfterAction(e.points[0],e.angle),!0)}}class zt{constructor(){this._executioners=new Array}add(...t){this._executioners.push(...t)}renderAll(t){for(const e of this._executioners)e.handle(t)}}class Zt{constructor(t){this._isGameLoopActive=!1,this._lastFrameTime=performance.now(),this._render=new zt,this._drawable=t}get render(){return this._render}start(){this._isGameLoopActive||(this._isGameLoopActive=!0,requestAnimationFrame((()=>this.gameLoop())))}stop(){this._isGameLoopActive=!1}gameLoop(){if(!this._isGameLoopActive)return;const t=performance.now();this._render.renderAll(t-this._lastFrameTime),this._drawable.drawAll(),this._lastFrameTime=t,requestAnimationFrame((()=>this.gameLoop()))}}class jt{get collisionChecker(){return this._collisionDetector}constructor(t,e,i){this._items=new Map,this._spriteStorage=t;const s=new wt(0,0,i.width,i.height);this._collectibleStorage=s,this._collisionDetector=new Mt(s),this._bonusManager=e}addElements(t){for(const e of t)this.addElement(e)}addElement(t){this._items.has(t.id)||(this._items.set(t.id,t),t.spawn(this._spriteStorage,this._collectibleStorage))}checkForBonusHits(t){const e=this._collisionDetector.hasCollision(t.model.entity);if(e)for(const i of e)this._bonusManager.addBonus(t,i.bonus)&&this.delete(this._items.get(i.id))}delete(t){this._items.delete(t.id),t.terminate(this._spriteStorage,this._collectibleStorage)}}class $t{get point(){return this._point}get width(){return this._width}get height(){return this._height}get color(){return this._color}constructor(t,e,i,s){this._point=t,this._width=e,this._height=i,this._color=s}}class qt{constructor(t){this._drawList=new Map,this._shapeAdder=t}add(t){t.maxHealth!==1/0&&this._drawList.set(t.entity.id,t)}remove(t){this._drawList.delete(t.entity.id)}handle(){this.drawBars()}drawBars(){for(const t of this._drawList.values())this.drawBar(t)}drawBar(t){const e=this.calculateTankWidth(t),i=e/t.maxHealth*t.health,s=L(t.entity.points[1],t.entity.points[2]),n=t.entity.calcCenter(),r=new g(n.x-i/2,n.y-1.5*s);var a;this.drawHealthBar(r,i,this.getHealthColor(t)),"armor"in(a=t)&&"armorStrength"in a&&"maxArmor"in a&&this.drawArmorBar(t,e,r)}calculateTankWidth(t){return 1.15*L(t.entity.points[0],t.entity.points[1])}getHealthColor(t){return t.health>.4*t.maxHealth?"green":t.health>.15*t.maxHealth&&t.health<=.4*t.maxHealth?"yellow":"red"}drawHealthBar(e,i,s){this._shapeAdder.addRectangle(new $t(e,i,t.HEALTH_BAR_HEIGHT,s))}drawArmorBar(e,i,s){const n=i/e.maxArmor*e.armor,r=e.entity.calcCenter(),a=new g(r.x-n/2,s.y+t.HEALTH_BAR_HEIGHT+t.HEALTH_ARMOR_BAR_INDENT_Y);this._shapeAdder.addRectangle(new $t(a,n,t.ARMOR_BAR_HEIGHT,"blue"))}}class Qt{get modelCollisionManager(){return this._modelCollisionManager}get itemCollisionManager(){return this._itemCollisionManager}get size(){return this._size}get ctx(){return this._canvas.ctx}constructor(t,e,i){this._handlingManagers=new Array,this._keyHandler=new Ct,this.handleVisibilityChange=()=>{document.hidden?(this._gameLoop.stop(),this._keyHandler.clearKeys()):this._gameLoop.start()},document.addEventListener("visibilitychange",this.handleVisibilityChange),this._size=e,this._canvas=new ft(t,this._size),this._gameLoop=new Zt(this._canvas),this._animationManager=new Bt(this._canvas),this._healthDrawManager=new qt(this._canvas);const s=new wt(0,0,this._size.width,this._size.height);this._modelCollisionManager=new At(s);const n=new Map,r=new Map,a=new Map,o=new Rt(s,this._modelCollisionManager),l=new kt(s,this._modelCollisionManager),h=new Yt(s,this._modelCollisionManager),c=new Xt(a,this._canvas,h);this._itemCollisionManager=new jt(this._canvas,i,this._size),this._tankHandlingManagers=new bt(o,this._canvas,n,c,this._animationManager,this._keyHandler,this._itemCollisionManager),this._wallHandlingManagers=new Ft(l,this._canvas,r),this._bulletHandlingManager=new Vt(h,this._canvas,a,this._handlingManagers,this._animationManager,i,this._healthDrawManager),this._handlingManagers.push(this._tankHandlingManagers,this._wallHandlingManagers,this._bulletHandlingManager),this._gameLoop.render.add(...this._handlingManagers,this._animationManager,this._healthDrawManager),this._gameLoop.start()}removeEventListeners(){this._keyHandler.removeEventListeners(),document.removeEventListener("visibilitychange",this.handleVisibilityChange)}setBackgroundMaterial(t){this.setCoefficients(t),this.createBackgroundSprites(t)}setCoefficients(t){for(const e of this._handlingManagers)e.movementManager.resistanceCoeff=r[t],e.movementManager.airResistanceCoeff=15e-7}createBackgroundSprites(t){It.fullFillBackground(t,this._size,this._canvas)}addWallElements(t){this._wallHandlingManagers.add(t)}addTankElements(...t){this._tankHandlingManagers.add(t);for(const e of t)this._healthDrawManager.add(e.model)}addBonuses(...t){this._itemCollisionManager.addElements(t)}addExecutioners(...t){this._gameLoop.render.add(...t)}finishGame(){this._gameLoop.stop(),this.ctx.clearRect(0,0,this._size.width,this._size.height)}}class Jt{constructor(t,e){this._collectible=t,this._sprite=e}get id(){return this._collectible.id}get collectible(){return this._collectible}get sprite(){return this._sprite}spawn(t,e){t.insert(this._sprite),e.insert(this._collectible)}terminate(t,e){t.remove(this._sprite),e.remove(this._collectible)}adjustPosition(t,e){this._collectible.adjustPolygon(t,this._sprite.width,this._sprite.height,e),this._sprite.point=t,this._sprite.angle=e}}class te{constructor(t,e,i,s,n,r){this._id=n,this._bonus=r,this.adjustPolygon(t,e,i,s)}get bonus(){return this._bonus}get id(){return this._id}get points(){return this._points}calcCenter(){return w(this._points[0],this._points[2])}adjustPolygon(t,e,i,s){this._points=[t.clone(),new g(t.x+e,t.y),new g(t.x+e,t.y+i),new g(t.x,t.y+i)],0!==s&&Kt.rotatePolygon(this,s)}}class ee extends H{constructor(e,i){super(t.KEY_SIZE,t.KEY_SIZE,6),this._scaleX=1,this._isIncreasing=!1,this._point=e,this._angle=i,this._sprite.src="src/img/item/Key.png"}get scaleX(){return this._isIncreasing?(this._scaleX+=ee.CHANGE_SCALE_X_NUMBER,this._scaleX>=1&&(this._isIncreasing=!1)):(this._scaleX-=ee.CHANGE_SCALE_X_NUMBER,this._scaleX<=-1&&(this._isIncreasing=!0)),this._scaleX}get scaleY(){return 1}}ee.CHANGE_SCALE_X_NUMBER=.01;class ie extends H{constructor(e,i,s){switch(super(t.BOX_SIZE,t.BOX_SIZE,6),this._point=i,this._angle=s,e){case o.bulLight:this._sprite.src="src/img/item/Light_Bullet_Box.png";break;case o.bulMedium:this._sprite.src="src/img/item/Medium_Bullet_Box.png";break;case o.bulHeavy:this._sprite.src="src/img/item/Heavy_Bullet_Box.png";break;case o.bulGrenade:this._sprite.src="src/img/item/Grenade_Bullet_Box.png";break;case o.bulSniper:this._sprite.src="src/img/item/Sniper_Bullet_Box.png";break;default:throw new Error(`Unsupported bulletType: ${e}`)}}}class se{constructor(){}static create(e,i,s){const n=y.collectibleItemId;switch(e){case o.key:return new Jt(new te(i,t.KEY_SIZE,t.KEY_SIZE,s,n,e),new ee(i,s));case o.bulLight:case o.bulMedium:case o.bulHeavy:case o.bulSniper:case o.bulGrenade:return new Jt(new te(i,t.BOX_SIZE,t.BOX_SIZE,s,n,e),new ie(e,i,s))}}}class ne{constructor(t,e){this._ammoSpawnInterval=5e3,this._timer=0,this._spawnPoints=t,this._collectibleItemManager=e}handle(e){this._timer+=e,this._timer>=this._ammoSpawnInterval&&(this.spawnRandomBox(this.getRandomBox(),this._spawnPoints.getRandomSpawnPoint(t.BOX_SIZE,t.BOX_SIZE)),this._timer=0,this._ammoSpawnInterval<ne.MAX_AMMO_SPAWN_INTERVAL&&(this._ammoSpawnInterval+=C(1e3,5e3)))}getRandomBox(){const t=C(1,100);return t<40?o.bulMedium:t<70?o.bulHeavy:o.bulGrenade}spawnRandomBox(e,i){const s=se.create(e,i,0);for(let e=0;e<ne.RESPAWN_TRYS_AMOUNT;e++){if(!this._collectibleItemManager.collisionChecker.hasCollision(s.collectible)){this._collectibleItemManager.addElement(s);break}s.adjustPosition(this._spawnPoints.getRandomSpawnPoint(t.BOX_SIZE,t.BOX_SIZE),0)}}randomSpawn(t,e,i,s,n,r,a){const o=se.create(t,this._spawnPoints.getRandomSpawnPoint(e,i,s,n,r,a),0);for(let t=0;t<ne.RESPAWN_TRYS_AMOUNT;t++){if(!this._collectibleItemManager.collisionChecker.hasCollision(o.collectible))return void this._collectibleItemManager.addElement(o);o.adjustPosition(this._spawnPoints.getRandomSpawnPoint(e,i,s,n,r,a),0)}throw Error("Failed to spawn all the keys")}spawn(t,e,i,s,n){const r=se.create(t,this._spawnPoints.getSpawnPoint(e,i,s,n),0);this._collectibleItemManager.addElement(r)}}ne.MAX_AMMO_SPAWN_INTERVAL=6e4,ne.RESPAWN_TRYS_AMOUNT=5;class re{constructor(t,e,i){this._spawnPoints=[],this._spawnGridsLinesAmount=e,this._spawnGridsColumnsAmount=i,this.calcSpawnPoints(t)}calcSpawnPoints(e){const i=new g(e.x+t.WALL_WIDTH[0],e.y+t.WALL_HEIGHT[0]+t.WALL_WIDTH[0]/2),s=t.WALL_WIDTH[0]+t.WALL_WIDTH[1],n=t.WALL_WIDTH[0]+t.WALL_HEIGHT[1];for(let t=0;t<this._spawnGridsLinesAmount;t++){this._spawnPoints[t]=[];for(let e=0;e<this._spawnGridsColumnsAmount;e++)this._spawnPoints[t][e]=new g(i.x+s*e,i.y+n*t)}}getRandomSpawnPoint(t,e,i=0,s=this._spawnGridsLinesAmount-1,n=0,r=this._spawnGridsColumnsAmount-1){const a=C(i,s),o=C(n,r),l=this._spawnPoints[a][o];return new g(l.x-t/2,l.y-e/2)}getSpawnPoint(t,e,i,s){const n=this._spawnPoints[i][s];return new g(n.x-t/2,n.y-e/2)}}class ae{constructor(t,e,i){this._spawnPoints=t,this._collisionChecker=e,this._tankElementAdder=i}randomSpawn(e,i,s,n,r){const a=new ht(this._spawnPoints.getRandomSpawnPoint(t.getTankEntityWidth(e.hullNum),t.getTankEntityHeight(e.hullNum),i,s,n,r),ae.getRandomAngle(),e);for(let o=0;o<ae.RESPAWN_TRYS_AMOUNT;o++){if(!this._collisionChecker.hasCollision(a.model.entity))return this._tankElementAdder.addTankElements(a),a;a.adjustPosition(this._spawnPoints.getRandomSpawnPoint(t.getTankEntityWidth(e.hullNum),t.getTankEntityHeight(e.hullNum),i,s,n,r),ae.getRandomAngle())}throw Error("Failed to spawn the tank")}static getRandomAngle(){return ae.ANGLES[C(0,3)]}}ae.RESPAWN_TRYS_AMOUNT=5,ae.ANGLES=[0,1.57,3.14,4.71];class oe{constructor(){}static get CONTROL_1(){return{forwardKey:87,backwardKey:83,hullClockwiseKey:68,hullCounterClockwiseKey:65,turretClockwiseKey:86,turretCounterClockwiseKey:67,shootKey:66}}static get CONTROL_2(){return{forwardKey:38,backwardKey:40,hullClockwiseKey:39,hullCounterClockwiseKey:37,turretClockwiseKey:190,turretCounterClockwiseKey:188,shootKey:191}}static start(e){const i=oe.createInfoPanel(e);t.setResolutionResizeCoeff(e.width,e.height);const s={width:e.width,height:e.height},n={color:0,hullNum:0,trackNum:0,turretNum:0,weaponNum:0,control:oe.CONTROL_1},r={color:1,hullNum:0,trackNum:0,turretNum:0,weaponNum:0,control:oe.CONTROL_2};oe.createMaze1(e.getContext("2d"),s,i,n,r)}static createMaze1(t,e,i,s,n){oe.createMaze(t,e,1,2,s,n,i,mt.createMazeLvl1,oe.createMaze2)}static createMaze2(t,e,i,s,n){oe.createMaze(t,e,1,2,s,n,i,mt.createMazeLvl2,oe.createMaze3)}static createMaze3(t,e,i,s,n){oe.createMaze(t,e,1,2,s,n,i,mt.createMazeLvl3,oe.endGame)}static endGame(t,e,i,s,n){const r=new Image(e.width,e.height);r.src="src/img/cat.jpg",r.onload=()=>{t.drawImage(r,0,0,e.width,e.height),i.textContent="The attacker wins"}}static createMaze(t,e,i,s,n,r,o,l,h){const{wallsArray:c,point:_}=dt.createWallsAroundPerimeter(17,7,s,e),u=new re(_,5,a),d=new le(n,r,h,o,t,e,u),m=d.gameMaster;m.setBackgroundMaterial(i),m.addWallElements(c),m.addWallElements(l(s,_));const g=new ne(u,m.itemCollisionManager);oe.addKeys(g),m.addExecutioners(new he(d),g)}static addKeys(e){for(let i=0;i<oe.AMOUNT_OF_KEYS;i++)e.randomSpawn(o.key,t.KEY_SIZE,t.KEY_SIZE,0,4,Math.ceil(5.5),10)}static createInfoPanel(t){t.style.top=`${oe.PANEL_HEIGHT}%`,t.style.height=100-oe.PANEL_HEIGHT+"%";const e=document.createElement("div");e.id="info-panel",e.style.height=`${oe.PANEL_HEIGHT}%`,document.body.appendChild(e);const i=document.createElement("div");return i.id="key-count",e.appendChild(i),i}}oe.AMOUNT_OF_KEYS=3,oe.PANEL_HEIGHT=5;class le{constructor(t,e,i,s,n,r,a){this._score=0,this._panelInfo=s,this._gameMaster=new Qt(n,r,this),this._nextMaze=i,this._tankSpawnManager=new ae(a,this._gameMaster.modelCollisionManager.collisionChecker,this._gameMaster),this.randomAttackerSpawn(t),this.randomDefenderSpawn(e)}randomAttackerSpawn(t){this._attacker=this._tankSpawnManager.randomSpawn(t,0,4,0,Math.floor(5.5))}randomDefenderSpawn(t){this._defender=this._tankSpawnManager.randomSpawn(t,0,4,Math.ceil(5.5),10)}addBonus(t,e){switch(e){case o.key:if(t===this._attacker)return this._score++,this.endGameConditions()&&this.processPostGameActions(),!0;break;case o.bulGrenade:case o.bulHeavy:case o.bulLight:case o.bulMedium:case o.bulSniper:if(t instanceof ht)return t.model.takeBullet(e),!0}return!1}processKill(t,e){e===this._attacker?this.randomAttackerSpawn(this._attacker.tankInfo):e===this._defender&&this.randomDefenderSpawn(this._defender.tankInfo)}endGameConditions(){return 3===this._score}processPostGameActions(){this._gameMaster.removeEventListeners(),this._gameMaster.finishGame(),this._nextMaze(this._gameMaster.ctx,this._gameMaster.size,this.panelInfo,this._attacker.tankInfo,this._defender.tankInfo)}get score(){return this._score}get panelInfo(){return this._panelInfo}get gameMaster(){return this._gameMaster}}class he{constructor(t){this._lastScore=1/0,this._rulesManager=t}handle(){this._lastScore!==this._rulesManager.score&&(this._lastScore=this._rulesManager.score,this.updatePanel())}updatePanel(){this._rulesManager.panelInfo.textContent=`Amount of Keys: ${this._lastScore}`}}const ce=document.querySelector("#canvas");ce.width=window.screen.width,ce.height=window.screen.height,class{constructor(){}static start(t,e){if(0===t)oe.start(e)}}.start(0,ce),ce.addEventListener("click",(function(e){const i=e.clientX-ce.getBoundingClientRect().left,s=e.clientY-ce.getBoundingClientRect().top;console.log(`x = ${t.undoResizeX(i)}px, y = ${t.undoResizeY(s)}px`)}))})();