(()=>{"use strict";class t{static setResolutionResizeCoeff(e){t.resizeWidthCoeff=e.width/t.DEVELOPING_SCREEN_WIDTH,t.resizeHeightCoeff=e.height/t.DEVELOPING_SCREEN_HEIGHT,t.resizeConstants()}static resizeX(e){return Math.round(e*t.resizeWidthCoeff)}static resizeY(e){return Math.round(e*t.resizeHeightCoeff)}static undoResizeX(e){return Math.round(e/t.resizeWidthCoeff)}static undoResizeY(e){return Math.round(e/t.resizeHeightCoeff)}static resizeConstants(){t.BACKGROUND_SIZE=t.resizeX(t.BACKGROUND_SIZE);for(let e=0;e<t.WALL_WIDTH.length;e++)t.WALL_WIDTH[e]=t.resizeX(t.WALL_WIDTH[e]);for(let e=0;e<t.WALL_HEIGHT.length;e++)t.WALL_HEIGHT[e]=t.resizeY(t.WALL_HEIGHT[e]);t.TRACK_INDENT=t.resizeY(t.TRACK_INDENT);for(let e=0;e<t.HULL_WIDTH.length;e++)t.HULL_WIDTH[e]=t.resizeX(t.HULL_WIDTH[e]);for(let e=0;e<t.HULL_HEIGHT.length;e++)t.HULL_HEIGHT[e]=t.resizeY(t.HULL_HEIGHT[e]);for(let e=0;e<t.TURRET_INDENT_X.length;e++)t.TURRET_INDENT_X[e]=t.resizeX(t.TURRET_INDENT_X[e]);for(let e=0;e<t.TURRET_WIDTH.length;e++)t.TURRET_WIDTH[e]=t.resizeX(t.TURRET_WIDTH[e]);for(let e=0;e<t.TURRET_HEIGHT.length;e++)t.TURRET_HEIGHT[e]=t.resizeY(t.TURRET_HEIGHT[e]);for(let e=0;e<t.WEAPON_WIDTH.length;e++)t.WEAPON_WIDTH[e]=t.resizeX(t.WEAPON_WIDTH[e]);for(let e=0;e<t.WEAPON_HEIGHT.length;e++)t.WEAPON_HEIGHT[e]=t.resizeY(t.WEAPON_HEIGHT[e]);for(let e=0;e<t.BULLET_WIDTH.length;e++)t.BULLET_WIDTH[e]=t.resizeX(t.BULLET_WIDTH[e]);for(let e=0;e<t.BULLET_HEIGHT.length;e++)t.BULLET_HEIGHT[e]=t.resizeY(t.BULLET_HEIGHT[e]);t.ACCELERATION_SIZE=t.resizeX(t.ACCELERATION_SIZE),t.EXPLOSION_SIZE=t.resizeX(t.EXPLOSION_SIZE);for(let e=0;e<t.ACCELERATION_EFFECT_INDENT_X.length;e++)t.ACCELERATION_EFFECT_INDENT_X[e]=t.resizeX(t.ACCELERATION_EFFECT_INDENT_X[e])}}t.resizeWidthCoeff=1,t.resizeHeightCoeff=1,t.DEVELOPING_SCREEN_WIDTH=1920,t.DEVELOPING_SCREEN_HEIGHT=1080,t.BACKGROUND_SIZE=115,t.WALL_WIDTH=[100,50],t.WALL_HEIGHT=[50,50],t.TRACK_INDENT=4,t.HULL_WIDTH=[57,61,58,48,61,61,57,52],t.HULL_HEIGHT=[37,47,37,31,52,42,36,31],t.TURRET_INDENT_X=[15,19,15,11,19,19,19,15],t.TURRET_WIDTH=[32,38,27,27,22,27,32,22],t.TURRET_HEIGHT=[27,27,17,27,22,22,27,22],t.WEAPON_WIDTH=[35,37,30,32,38,27,32,27],t.WEAPON_HEIGHT=[11,8,11,5,8,12,11,11],t.BULLET_WIDTH=[12,16,23,24,19],t.BULLET_HEIGHT=[5,8,10,6,8],t.ACCELERATION_SIZE=64,t.EXPLOSION_SIZE=90,t.ACCELERATION_EFFECT_INDENT_X=[4,10,0,0,4,4,0,0,0];const e=Math.PI/180,i=["Grass","Ground","Sandstone"],s=["Rect","Square"],r=[[4,2],[5.5,2.5],[7,3]],n=[.55,.7,.85];class a{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}clone(){return new a(this._x,this._y)}addToCoordinates(t,e){this._x+=t,this._y+=e}}class o extends a{get length(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalize(){const t=this.length;0!==t&&(this._x/=t,this._y/=t)}get angle(){return Math.atan2(this.y,this.x)}clone(){return new o(this.x,this.y)}addVector(t){this._x+=t._x,this._y+=t._y}subtractVector(t){this._x-=t._x,this._y-=t._y}scale(t){this._x*=t,this._y*=t}}class h extends o{constructor(t,e){super(t,e)}static create(t,e){const i=new h(t.y-e.y,e.x-t.x);return i.normalize(),i}clone(){return new h(this._x,this._y)}}class l{get startingSpeed(){return 35}get damage(){return 15}get armorPenetration(){return 5}get mass(){return.008}get health(){return 1}get num(){return 0}}class c{constructor(){}static calcAcceleration(t,e,i,s,r,n,a){return(t-e*n*.01-i*r*r*a)/n*(s/17)}static calcAngularAcceleration(t,e,i,s,r,n,a,o){return this.calcAcceleration(t,e,i,s,r,n,a)/o}}class _{constructor(){}static calcAcceleration(t,e,i,s,r,n){return(t-e*s*s*n)/r*(i/17)}static calcAngularAcceleration(t,e,i,s,r,n,a){return this.calcAcceleration(t,e,i,s,r,n)/a}}class u{constructor(t,e){this._entity=t,this._health=e}get health(){return this._health}isDead(){return this._health<=0}get entity(){return this._entity}isIdle(){return 0===this._entity.velocity.length}isAngularMotionStopped(){return 0===this._entity.angularVelocity}applyVelocityChange(t,e){const i=this._entity,s=Math.sign(i.velocity.x),r=Math.sign(i.velocity.y);i.velocity.addToCoordinates(t*Math.cos(e),t*Math.sin(e)),s!==Math.sign(i.velocity.x)&&(i.velocity.x=0),r!==Math.sign(i.velocity.y)&&(i.velocity.y=0)}applyAngularVelocityChange(t){const e=this._entity,i=e.angularVelocity;i>0?e.angularVelocity+=i+t<0?-i:t:e.angularVelocity-=i+t>0?-i:t}takeDamage(t){this._health-=t.damage}}class d extends u{residualMovement(t,e,i){const s=this._entity,r=c.calcAcceleration(0,t,e,i,s.velocity.length,s.mass,s.lengthwiseArea);this.applyVelocityChange(r,s.velocity.angle)}residualAngularMovement(t,e,i){const s=this._entity,r=c.calcAngularAcceleration(0,t,e,i,s.angularVelocity,s.mass,s.lengthwiseArea,s.radiusLength);this.applyAngularVelocityChange(r)}}class m extends u{residualMovement(t,e){const i=this._entity,s=_.calcAcceleration(0,t,e,i.velocity.length,i.mass,i.lengthwiseArea);this.applyVelocityChange(s,i.velocity.angle)}residualAngularMovement(t,e){const i=this._entity,s=_.calcAngularAcceleration(0,t,e,i.angularVelocity,i.mass,i.lengthwiseArea,i.radiusLength);this.applyAngularVelocityChange(s)}}class g extends m{constructor(t,e,i){super(e,t.health),this._damage=t.damage*i.damageCoeff,this._armorPenetration=t.armorPenetration*i.armorPenetrationCoeff}get damage(){return this._damage}get armorPenetration(){return this._armorPenetration}}class I{constructor(){}static rotatePointAroundTarget(t,e,i,s){const r=t.x-e.x,n=t.y-e.y;t.x=e.x+r*s-n*i,t.y=e.y+r*i+n*s}static rotatePoint(t,e,i){const s=t.x,r=t.y;t.x=s*i-r*e,t.y=s*e+r*i}}class T{constructor(){}static movement(t){for(const e of t.points)e.addToCoordinates(t.velocity.x,t.velocity.y)}static angularMovement(t){T.rotateEntity(t,t.angularVelocity)}static rotateEntity(t,e){const i=Math.sin(e),s=Math.cos(e),r=t.calcCenter();for(const e of t.points)I.rotatePointAroundTarget(e,r,i,s);I.rotatePoint(t.velocity,i,s)}}function p(t,e){const i=e.x-t.x,s=e.y-t.y;return Math.sqrt(i*i+s*s)}function L(t,e=0,i=2*Math.PI){for(;t<e;)t+=i-e;for(;t>=i;)t-=i-e;return t}function E(t){return t>Math.PI/2&&t<3*Math.PI/2}function M(t,e){return L(t-e)}function f(t,e){return new a((t.x+e.x)/2,(t.y+e.y)/2)}class A{constructor(t,e,i,s,r,n){this._angularVelocity=0,this._velocity=new o(0,0);const h=e*e+i*i;this._radiusLength=.5*Math.sqrt(h),this._momentOfInertia=A.scalingCoeff*r*h,this._mass=r,this._id=n,this._width=e,this._height=i,this._points=[t.clone(),new a(t.x+e,t.y),new a(t.x+e,t.y+i),new a(t.x,t.y+i)],0!==s&&T.rotateEntity(this,s)}get velocity(){return this._velocity}get angle(){return Math.atan2(this._points[1].y-this._points[0].y,this._points[1].x-this._points[0].x)}get points(){return this._points}get mass(){return this._mass}get angularVelocity(){return this._angularVelocity}set angularVelocity(t){this._angularVelocity=t}get id(){return this._id}get radiusLength(){return this._radiusLength}get momentOfInertia(){return this._momentOfInertia}calcCenter(){return f(this._points[0],this._points[2])}get lengthwiseArea(){const t=this.angle-this._velocity.angle;return this._height*Math.abs(Math.cos(t))+this._width*Math.abs(Math.sin(t))}get movementLength(){const t=this.angle-this._velocity.angle;return this._width*Math.abs(Math.cos(t))+this._height*Math.abs(Math.sin(t))}}A.scalingCoeff=.3125;class S{constructor(){}static extractType(t){return t%S.TYPE_DIVIDER}static isTank(t){return S.extractType(t)===S.TANK_TYPE}static isWall(t){return S.extractType(t)===S.WALL_TYPE}static isBullet(t){return S.extractType(t)===S.BULLET_TYPE}static checkForMaxValue(t){if(t>=S.MAX_VALUE)throw new Error("Maximum ID is reached.")}static get tankId(){return S.checkForMaxValue(S.TANK_ID),++S.TANK_ID*S.TYPE_DIVIDER+S.TANK_TYPE}static get wallId(){return S.checkForMaxValue(S.WALL_ID),++S.WALL_ID*S.TYPE_DIVIDER+S.WALL_TYPE}static get bulletId(){return S.checkForMaxValue(S.BULLET_ID),++S.BULLET_ID*S.TYPE_DIVIDER+S.BULLET_TYPE}}S.TANK_TYPE=0,S.WALL_TYPE=1,S.BULLET_TYPE=2,S.TYPE_DIVIDER=1e3,S.MAX_VALUE=Math.floor(Number.MAX_SAFE_INTEGER/S.TYPE_DIVIDER)-1,S.TANK_ID=0,S.WALL_ID=0,S.BULLET_ID=0;class y{constructor(){}static create(e,i,s,r){const n=y.createBullet(e),a=y.calcDefaultEntityPoint(e,i,s),o=new A(a,t.BULLET_WIDTH[e],t.BULLET_HEIGHT[e],s,n.mass,S.bulletId),h=n.startingSpeed*r.startingSpeedCoeff;return o.velocity.x=h*Math.cos(s),o.velocity.y=h*Math.sin(s),new g(n,o,r)}static calcDefaultEntityPoint(e,i,s){const r=new a(i.x+t.BULLET_HEIGHT[e]/2*Math.sin(s),i.y-t.BULLET_HEIGHT[e]/2*Math.cos(s)),n=Math.sin(s),o=Math.cos(s),h=new a(r.x+t.BULLET_WIDTH[e]/2*o-t.BULLET_HEIGHT[e]/2*n,r.y+t.BULLET_HEIGHT[e]/2*o+t.BULLET_WIDTH[e]/2*n);return I.rotatePointAroundTarget(r,h,-n,o),r}static createBullet(t){if(0===t)return new l;throw new Error(`Bullet model ${t} was not found`)}}function w(t,e){return Math.floor(Math.random()*(e+1-t))+t}class R{get angleSpeed(){return 6e-4}get mass(){return.35}get bulletCapacity(){return 10}get num(){return 0}}class D{get armorPenetrationCoeff(){return 1}get damageCoeff(){return 1}get startingSpeedCoeff(){return 1}get reloadSpeed(){return 1e3}get mass(){return.15}get num(){return 0}}class C extends d{constructor(t,e){super(e,t.hull.health),this._lastTimeShot=Date.now(),this._bulletQuantity=50,this._bulletNum=0,this._isBraking=!1,this._isDrift=!1,this._tankParts=t,this._turretAngle=e.angle,this._armorStrength=t.hull.armorStrength}takeDamage(t){this._armorStrength-=t.armorPenetration,this._armorStrength<0&&(this._armorStrength=0),this._health-=t.damage-this._tankParts.hull.armor*this._armorStrength}get turretAngle(){return this._turretAngle}get armor(){return this._tankParts.hull.armor}get armorStrength(){return this._armorStrength}get bulletNum(){return this._bulletNum}shot(){const t=Date.now();if(0===this._bulletQuantity||t-this._lastTimeShot<this._tankParts.weapon.reloadSpeed)return null;const e=y.create(this._bulletNum,this.calcBulletExit(),this._turretAngle,this._tankParts.weapon);return this._lastTimeShot=t,this._bulletQuantity--,e}calcBulletExit(){const e=this._entity.calcCenter(),i=this._tankParts,s=(n=i.turret,t.TURRET_WIDTH[n.num]/2+(r=i.weapon,t.WEAPON_WIDTH[r.num]));var r,n;const o=e.x+s*Math.cos(this._turretAngle),h=e.y+s*Math.sin(this._turretAngle);return new a(o,h)}incBulletQuantity(t){this._bulletQuantity=Math.min(this._bulletQuantity+t,this._tankParts.turret.bulletCapacity)}takeNewBullet(t){this._bulletNum=t}turretClockwiseMovement(t){this._turretAngle+=this._tankParts.turret.angleSpeed*t}turretCounterclockwiseMovement(t){this._turretAngle-=this._tankParts.turret.angleSpeed*t}incTurretAngle(t){this._turretAngle+=t}hullClockwiseMovement(t,e,i){const s=this._entity,r=this._tankParts.track.angularData;s.angularVelocity<r.finishSpeed&&(s.angularVelocity+=c.calcAngularAcceleration(r.force,t,e,i,s.angularVelocity,s.mass,s.lengthwiseArea,s.radiusLength)),this.updateAngularVelocity(),this.incTurretAngle(s.angularVelocity)}hullCounterclockwiseMovement(t,e,i){const s=this._entity,r=this._tankParts.track.angularData;-s.angularVelocity<r.finishSpeed&&(s.angularVelocity-=c.calcAngularAcceleration(r.force,t,e,i,s.angularVelocity,s.mass,s.lengthwiseArea,s.radiusLength)),this.updateAngularVelocity(),this.incTurretAngle(s.angularVelocity)}updateAngularVelocity(){if(this.isIdle())return;const t=this._entity,e=t.velocity;(this._isDrift||this._isBraking)&&this.incAngularVelocity(t,e),this._isBraking||this.decAngularVelocity(t,e)}incAngularVelocity(t,e){const i=this.calcCoeff(),s=1+e.length/(this._tankParts.track.forwardData.finishSpeed*i),r=1+t.mass/(10*i);t.angularVelocity*=r*s}calcCoeff(){let t=100;return this._isDrift&&(t-=25),this._isBraking&&(t-=5),t}decAngularVelocity(t,e){const i=1-e.length/(20*this._tankParts.track.forwardData.finishSpeed),s=1-t.mass/200;t.angularVelocity*=s*i,e.scale(s)}forwardMovement(t,e,i){this.movement(this._tankParts.track.forwardData,this._entity.angle,t,e,i)}backwardMovement(t,e,i){this.movement(this._tankParts.track.backwardData,this._entity.angle+Math.PI,t,e,i)}movement(t,e,i,s,r){const n=this._entity,a=n.velocity.length,o=0===a?e:n.velocity.angle,h=M(e,o);this.setBrakingStatus(h),C.isStraightMovement(h)?(this._isDrift=!1,this.handleStraightMovement(t,i,s,r,a,o)):(this._isDrift=!C.isReverseMovement(h),this._isDrift&&(this.determineDribbleSpeed(h),this.applyTurn(this.calcShortestTurn(h))),this.handleDriftMovement(t,i,s,r,a,h,o))}setBrakingStatus(t){this._isBraking=E(t)}calcShortestTurn(t){return this._isBraking&&(t=C.adjustTurnForBraking(t)),t=C.adjustTurnForRecovery(t)}static isStraightMovement(t){return t<=e||2*Math.PI-t<=e}static isReverseMovement(t){return Math.abs(t-Math.PI)<=e}handleStraightMovement(t,e,i,s,r,n){if(r<t.finishSpeed){const a=c.calcAcceleration(t.force,e,i,s,r,this._entity.mass,this._entity.lengthwiseArea);this._entity.velocity.addToCoordinates(a*Math.cos(n),a*Math.sin(n))}}handleDriftMovement(t,e,i,s,r,n,a){if(this._isBraking||r<t.finishSpeed){const o=c.calcAcceleration(t.force*Math.cos(n),e,i,s,r,this._entity.mass,this._entity.lengthwiseArea);this.applyVelocityChange(o,a)}}static adjustTurnForBraking(t){return L(t-Math.PI/2)}static adjustTurnForRecovery(t){const e=t-2*Math.PI;return t>Math.abs(e)?e:t}applyTurn(t){t*=C.VELOCITY_RECOVERY_COEFF*this._entity.mass,I.rotatePoint(this._entity.velocity,Math.sin(t),Math.cos(t))}determineDribbleSpeed(t){const e=(Math.abs(Math.cos(t))-(i=0))/(1-i)*(1-(s=.95))+s;var i,s;this._entity.velocity.scale(e)}residualMovement(t,e,i){const s=M(this._entity.angle,this._entity.velocity.angle);(this._isDrift||!C.isStraightMovement(s)&&!C.isReverseMovement(s))&&(this._isDrift=!0,this.determineDribbleSpeed(s)),this._isBraking=!1,super.residualMovement(t,e,i)}residualAngularMovement(t,e,i){this.updateAngularVelocity(),super.residualAngularMovement(t,e,i),this.incTurretAngle(this._entity.angularVelocity)}}C.VELOCITY_RECOVERY_COEFF=.017;class N{constructor(){}static extractZIndex(t){return t%N.Z_INDEX_DIVIDER}static checkForMaxValue(t){if(t>=N.MAX_VALUE)throw new Error("Maximum ID is reached.")}static generate(t){for(let e=0;e<=t;e++)N.IDs.push(0);return N.checkForMaxValue(N.IDs[t]),++N.IDs[t]*N.Z_INDEX_DIVIDER+t}}N.Z_INDEX_DIVIDER=1e3,N.MAX_VALUE=Math.floor(Number.MAX_SAFE_INTEGER/N.Z_INDEX_DIVIDER)-1,N.IDs=[];class P{constructor(t,e,i){this._sprite=new Image(t,e),this._sprite.classList.add("sprite"),this._id=N.generate(i)}get width(){return this._sprite.width}get height(){return this._sprite.height}get sprite(){return this._sprite}get id(){return this._id}get point(){return this._point}get angle(){return this._angle}set point(t){this._point=t}set angle(t){this._angle=t}}class k extends P{constructor(t,e,i){super(t,e,1),this._opacity=1,this._sprite.src=`src/img/tanks/Effects/Tire Tracks/Tire_Track_Chain_${i}.png`}get opacity(){return this._opacity}set opacity(t){this._opacity=t}}class H{get value(){return this._value}get prev(){return this._prev}get next(){return this._next}set next(t){this._next=t}set prev(t){this._prev=t}constructor(t){this._prev=null,this._next=null,this._value=t}remove(){null!==this._prev&&(this._prev.next=this._next),null!==this._next&&(this._next.prev=this._prev),this._prev=null,this._next=null}}class v{constructor(){this._tail=null,this._head=null,this._length=0}get head(){return null!==this._head?this._head.value:null}get tail(){return null!==this._tail?this._tail.value:null}get length(){return this._length}*[Symbol.iterator](){let t=this._head;for(let e=this._length;e>0;e--)yield t.value,t=t.next}applyAndRemove(t,e,i){let s=this._head;for(;null!==s;)if(t(s.value,i),e(s.value)){const t=s;s=s.next,this.removeNode(t)}else s=s.next}isEmpty(){return 0===this._length}remove(t){let e=this._head;for(;null!==e;){if(e.value===t)return void this.removeNode(e);e=e.next}}removeNode(t){t===this._tail&&(this._tail=t.prev),t===this._head&&(this._head=t.next),this._length--,t.remove()}addToHead(t){const e=new H(t);null===this._head?(this._tail=e,this._head=e):(e.next=this._head,this._head.prev=e,this._head=e),this._length++}addToTail(t){const e=new H(t);null===this._tail?(this._tail=e,this._head=e):(e.prev=this._tail,this._tail.next=e,this._tail=e),this._length++}removeFromTail(){this._tail===this._head?this.clear():(this._tail=this._tail.prev,this._tail.next=null,this._length--)}removeFromHead(){this._tail===this._head?this.clear():(this._head=this._head.next,this._head.prev=null,this._length--)}moveToTail(t){let e=this._tail;for(;null!==e;){if(e.value===t){if(e!==this._tail){const t=e.prev,i=e.next;null!==t&&(t.next=i),null!==i&&(i.prev=t),e.next=null,e.prev=this._tail,this._tail.next=e,this._tail=e}return}e=e.prev}}moveToHead(t){let e=this._head;for(;null!==e;){if(e.value===t){if(e!==this._head){const t=e.prev,i=e.next;null!==t&&(t.next=i),null!==i&&(i.prev=t),e.next=this._head,e.prev=null,this._head.prev=e,this._head=e}return}e=e.next}}clear(){this._tail=this._head=null,this._length=0}}class G{constructor(){}static rotateToDefaultSpritePoint(t,e,i,s){const r=t.width>>1,n=t.height>>1;I.rotatePointAroundTarget(e,new a(e.x+r*s-n*i,e.y+n*s+r*i),-i,s)}static rotateToActualSpritePoint(t,e,i,s){const r=t.width>>1,n=t.height>>1;I.rotatePointAroundTarget(e,new a(e.x+r,e.y+n),i,s)}static updateSpritePart(t,e,i,s,r){G.rotateToDefaultSpritePoint(t,e,i,s),G.setPosAndAngle(t,e,r)}static setPosAndAngle(t,e,i){t.point=e,t.angle=i}static rotateForTurretPoint(t,e,i,s,r,n){const o=t.width>>1,h=t.height>>1;I.rotatePointAroundTarget(e,new a(e.x+o*s-h*i,e.y+h*s+o*i),r*s-n*i,s*n+i*r)}}class O extends P{constructor(t,e,i){super(t,e,1),this._opacity=1,this._sprite.src=`src/img/tanks/Effects/Tire Tracks/Tire_Track_${i}.png`}get opacity(){return this._opacity}set opacity(t){this._opacity=t}}var U,W;!function(t){t[t.dirForward=1]="dirForward",t[t.dirRotate=0]="dirRotate",t[t.dirBackward=1]="dirBackward"}(U||(U={}));class x{get chainWidth(){return this._chainWidth}constructor(t,e,i){this._listOfTirePairs=new v,this._vanishingListOfTirePairs=i,this._storage=t,this._trackWidth=e.width,this._trackHeight=e.height,this._trackType=e.num,this._chainWidth=this.calcWidthOfChain(),this._chainHeight=e.height,this._chainType=e.num%2}calcWidthOfChain(){return this._trackWidth/x.AMOUNT_OF_CHAINS}static calcPositionOfFirstChain(t,e,i,s,r){return new a(t.x+e*r-i*r,t.y+e*s-i*s)}moveToNextChain(t,e,i){t.x=t.x-this._chainWidth*i,t.y=t.y-this._chainWidth*e}vanishFullTrack(){for(const t of this._listOfTirePairs)this._vanishingListOfTirePairs.addToHead(this._listOfTirePairs.head),this._listOfTirePairs.removeFromHead()}static setAndPosTireTrackPair(t,e,i,s,r,n){const a=e.clone(),o=i.clone();G.rotateToDefaultSpritePoint(t.topTire,a,r,n),G.rotateToDefaultSpritePoint(t.bottomTire,o,r,n),G.setPosAndAngle(t.topTire,a,s),G.setPosAndAngle(t.bottomTire,o,s)}createTireTrackChainPair(t,e,i,s,r){const n={topTire:new k(this._chainWidth,this._chainHeight,this._chainType),bottomTire:new k(this._chainWidth,this._chainHeight,this._chainType)};return this._storage.insert(n.topTire),this._storage.insert(n.bottomTire),x.setAndPosTireTrackPair(n,t,e,i,s,r),n}createTireTrackPair(t,e,i,s,r){this.vanishFullTrack();const n={topTire:new O(this._trackWidth,this._trackHeight,this._trackType),bottomTire:new O(this._trackWidth,this._trackHeight,this._trackType)};this._storage.insert(n.topTire),this._storage.insert(n.bottomTire),x.setAndPosTireTrackPair(n,t,e,i,s,r),this._listOfTirePairs.addToHead(n)}calcFirstTopBottomChainPoints(t,e,i,s){const r=x.calcPositionOfFirstChain(e,this._trackWidth,this.chainWidth,i,s),n=t.hullSprite.calcPosition(e,i,s);let a=t.bottomTrackSprite.calcPosition(n,i,s);return a=x.calcPositionOfFirstChain(a,this._trackWidth,this.chainWidth,i,s),{topFirstChainPoint:r,bottomFirstChainPoint:a}}calcLastTopBottomChainPoints(t,e,i,s){const r=e.clone(),n=t.hullSprite.calcPosition(e,i,s);return{topLastChainPoint:r,bottomLastChainPoint:t.bottomTrackSprite.calcPosition(n,i,s)}}spawnFullTireTrack(t,e,i,s,r){this._topFirstChainPoint=t.clone(),this._bottomFirstChainPoint=e.clone();for(let n=0;n<x.AMOUNT_OF_CHAINS;n++){const a=this.createTireTrackChainPair(t,e,i,s,r);this._listOfTirePairs.addToHead(a),n===x.AMOUNT_OF_CHAINS-1&&(this._topLastChainPoint=t.clone(),this._bottomLastChainPoint=e.clone()),this.moveToNextChain(t,s,r),this.moveToNextChain(e,s,r)}}updateAllChainPoints(t,e,i,s){this._topFirstChainPoint=t,this._bottomFirstChainPoint=e,this._topLastChainPoint=i,this._bottomLastChainPoint=s}checkForUpdate(t,e,i,s){const r=p(t,this._topFirstChainPoint),n=p(e,this._bottomFirstChainPoint),a=p(i,this._topLastChainPoint),o=p(s,this._bottomLastChainPoint);return r>=this._chainWidth?{isUpdate:!0,prevPoint:this._topFirstChainPoint,currPoint:t}:n>=this._chainWidth?{isUpdate:!0,prevPoint:this._bottomFirstChainPoint,currPoint:e}:a>=this._chainWidth?{isUpdate:!0,prevPoint:this._topLastChainPoint,currPoint:i}:o>=this._chainWidth?{isUpdate:!0,prevPoint:this._bottomLastChainPoint,currPoint:s}:{isUpdate:!1}}getMovementAngle(t,e){const i=e.x-t.x,s=e.y-t.y;return Math.atan2(s,i)}detectMovementDirection(t,e,i){const s=this.getMovementAngle(t,e);let r=L(i-x.DIRECTION_ANGLE_DIFFERENCE,-Math.PI,Math.PI),n=L(i+x.DIRECTION_ANGLE_DIFFERENCE,-Math.PI,Math.PI),a=!1;if(r>=Math.PI/2&&r<=Math.PI&&n>=-Math.PI&&n<=-Math.PI/2&&(a=!0,s>=0?n=L(n,0,2*Math.PI):r=L(r,-2*Math.PI,0)),s>=r&&s<=n||s<=r&&s>=n)return U.dirForward;{a&&(r<0?(r=L(r,0,2*Math.PI),n=L(n,0,2*Math.PI)):(r=L(r,-2*Math.PI,0),n=L(n,-2*Math.PI,0)));const t=L(s-Math.PI,-Math.PI,Math.PI);return t>=r&&t<=n||t<=r&&t>=n?U.dirBackward:U.dirRotate}}forwardUpdate(t,e,i,s,r){const n=this.createTireTrackChainPair(t,e,i,s,r);this._listOfTirePairs.addToTail(n),this._listOfTirePairs.length>x.AMOUNT_OF_CHAINS&&(this._vanishingListOfTirePairs.addToHead(this._listOfTirePairs.head),this._listOfTirePairs.removeFromHead())}backwardUpdate(t,e,i,s,r){const n=this.createTireTrackChainPair(t,e,i,s,r);this._listOfTirePairs.addToHead(n),this._listOfTirePairs.length>x.AMOUNT_OF_CHAINS&&(this._vanishingListOfTirePairs.addToHead(this._listOfTirePairs.tail),this._listOfTirePairs.removeFromTail())}}x.DIRECTION_ANGLE_DIFFERENCE=.6,x.AMOUNT_OF_CHAINS=10;class b extends P{constructor(){super(t.ACCELERATION_SIZE,t.ACCELERATION_SIZE,1),this._frame=0,this._sprite.src="src/img/tanks/Effects/Movement/Movement.png"}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return b.ORIGINAL_SIZE}get originalHeight(){return b.ORIGINAL_SIZE}}b.ORIGINAL_SIZE=256;class F{constructor(t,e,i){this._topSpriteAccelerationEffect=new b,this._bottomSpriteAccelerationEffect=new b,this._counter=0,this._frame=0,this._storage=t,this._indentX=e,this._tankHeight=i}changeFrame(){this._frame===F.LAST_Frame&&(this._frame=F.WORKING_Frame),this._counter++,this._counter===F.THRESHOLD&&(this._counter=0,this._frame++,this._topSpriteAccelerationEffect.frame=this._frame,this._bottomSpriteAccelerationEffect.frame=this._frame)}setPosition(t,e,i,s){0===this._frame&&0===this._counter&&(this._storage.insert(this._topSpriteAccelerationEffect),this._storage.insert(this._bottomSpriteAccelerationEffect)),this.changeFrame();let r=this.calcPosition(t,e,i,28*this._tankHeight/42);G.updateSpritePart(this._topSpriteAccelerationEffect,r,e,i,s),r=this.calcPosition(t,e,i,37*this._tankHeight/42),G.updateSpritePart(this._bottomSpriteAccelerationEffect,r,e,i,s)}removeAcceleration(){if(0===this._frame&&0===this._counter)return;this._frame=0,this._counter=0;const t=this._topSpriteAccelerationEffect,e=this._bottomSpriteAccelerationEffect;t.frame=this._frame,e.frame=this._frame,this._storage.remove(this._topSpriteAccelerationEffect),this._storage.remove(this._bottomSpriteAccelerationEffect)}calcPosition(e,i,s,r){return new a(e.x+this._indentX*s-r*i-t.ACCELERATION_SIZE/2*s+t.ACCELERATION_SIZE/1.517*i,e.y+r*s+this._indentX*i-t.ACCELERATION_SIZE/1.517*s-t.ACCELERATION_SIZE/2*i)}}F.THRESHOLD=7,F.LAST_Frame=19,F.WORKING_Frame=10;class V{constructor(t,e){this._frame=0,this._counter=0,this._isForwardMovement=!0,this._isResidualMovement=!1,this._minFrameChangeThreshold=[Math.max(Math.round(V.MIN_THRESHOLD_COEFF/e.finishSpeed),V.MIN_FRAME_CHANGE_THRESHOLD_MINIMUM),Math.max(Math.round(V.MIN_THRESHOLD_COEFF/t.finishSpeed),V.MIN_FRAME_CHANGE_THRESHOLD_MINIMUM)],this._maxFrameChangeThreshold=[Math.min(Math.round(V.MAX_THRESHOLD_COEFF/e.force),V.MAX_FRAME_CHANGE_THRESHOLD_MAXIMUM),Math.min(Math.round(V.MAX_THRESHOLD_COEFF/t.force),V.MAX_FRAME_CHANGE_THRESHOLD_MAXIMUM)],this._currentThreshold=this._maxFrameChangeThreshold[this._isForwardMovement?1:0]}set isForwardMovement(t){this._isResidualMovement=!1,this._isForwardMovement!==t&&(this._isForwardMovement=t,this._currentThreshold=this._maxFrameChangeThreshold[this._isForwardMovement?1:0])}setResidualMovement(){this._isResidualMovement=!0}changeFrame(t,e){this._counter++,this._counter>=this._currentThreshold&&(this._counter=0,this._frame^=1,t.frame=this._frame,e.frame=this._frame,this._isResidualMovement?this._currentThreshold<this._maxFrameChangeThreshold[this._isForwardMovement?1:0]&&this._currentThreshold++:this._currentThreshold>this._minFrameChangeThreshold[this._isForwardMovement?1:0]&&this._currentThreshold--)}stopped(){this._currentThreshold=this._maxFrameChangeThreshold[this._isForwardMovement?1:0]}}V.MIN_THRESHOLD_COEFF=17.5,V.MAX_THRESHOLD_COEFF=.5,V.MIN_FRAME_CHANGE_THRESHOLD_MINIMUM=2,V.MAX_FRAME_CHANGE_THRESHOLD_MAXIMUM=30;class B extends P{constructor(){super(...arguments),this._frame=0,this._isEnded=!1,this._timer=0}changeFrame(t){this._timer+=t,this._timer>=this.UPDATE_TIMER_TIME&&(this._timer-=this.UPDATE_TIMER_TIME,this._frame++,this._frame>this.MAX_FRAME&&(this._frame=this.MAX_FRAME,this._isEnded=!0))}get isEnded(){return this._isEnded}}class X extends B{get UPDATE_TIMER_TIME(){return X.UPDATE_TIMER_TIME}get MAX_FRAME(){return X.MAX_FRAME}constructor(t,e){super(t,e,1),this._sprite.src="src/img/tanks/Effects/Sprites/Sprite_Effects_Smoke.png"}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return X.ORIGINAL_SIZE}get originalHeight(){return X.ORIGINAL_SIZE}}X.UPDATE_TIMER_TIME=60,X.MAX_FRAME=9,X.ORIGINAL_SIZE=496;class K extends X{constructor(t,e){super(t,e)}get scaleX(){return-1}get scaleY(){return 1}calcPosition(t,e,i){return new a(t.x+this.width*e+this.height*i,t.y-this.width*i+this.height*e)}}class z extends X{constructor(t,e,i){super(t,e),this._trackHeight=i}calcPosition(t,e,i){return new a(t.x-this._trackHeight*e+this.height*i,t.y+this._trackHeight*i+this.height*e)}}!function(t){t[t.rotLeft=-1]="rotLeft",t[t.rotStraight=0]="rotStraight",t[t.rotRight=1]="rotRight",t[t.rotNoRotate=2]="rotNoRotate"}(W||(W={}));class Y{constructor(t,e,i){this._delayedAngle=0,this._animationManager=t,this._width=e/4,this._height=e/5,this._trackHeight=i}detectRotateDirection(t){(t>=Math.PI/2&&t<=Math.PI&&this._delayedAngle>=-Math.PI&&this._delayedAngle<=-Math.PI/2||this._delayedAngle>=Math.PI/2&&this._delayedAngle<=Math.PI&&t>=-Math.PI&&t<=-Math.PI/2)&&(t=this._delayedAngle>=0?L(t,0,2*Math.PI):L(t,-2*Math.PI,0));const e=t-this._delayedAngle;return e<0&&Math.abs(e)>Y.UPDATE_SMOKE_DELTA_ANGLE?(this._delayedAngle=L(t,-Math.PI,Math.PI),W.rotLeft):e>0&&Math.abs(e)>Y.UPDATE_SMOKE_DELTA_ANGLE?(this._delayedAngle=L(t,-Math.PI,Math.PI),W.rotRight):W.rotNoRotate}setPosAndAngle(t,e){const i=Math.sin(e),s=Math.cos(e);G.rotateToDefaultSpritePoint(this._currAnimation,t,i,s),this._currAnimation.point=t,this._currAnimation.angle=e}addAnimation(){this._animationManager.add(this._currAnimation)}spawnTopSmoke(t,e,i,s){this._currAnimation=new K(this._width,this._height);let r=this._currAnimation.calcPosition(t,i,s);const n=e+1.5708;this.setPosAndAngle(r,n),this.addAnimation()}spawnBottomSmoke(t,e,i,s){this._currAnimation=new z(this._width,this._height,this._trackHeight);let r=this._currAnimation.calcPosition(t,i,s);const n=e+1.5708;this.setPosAndAngle(r,n),this.addAnimation()}}Y.UPDATE_SMOKE_DELTA_ANGLE=.113446;class Z{constructor(t,e,i){this._tankSpriteParts=t,this._tankTrackEffect=new V(e,i)}get tankSpriteParts(){return this._tankSpriteParts}get tankTrackEffect(){return this._tankTrackEffect}get tankTireTrack(){return this._tankTireTrack}spawnTankAcceleration(t,e,i){this._tankAcceleration=new F(t,e,i)}removeAcceleration(){this._tankAcceleration.removeAcceleration()}spawnTireTracks(t,e,i,s){this._tankTireTrack=new x(t,this._tankSpriteParts.topTrackSprite,s);const r=Math.sin(i),n=Math.cos(i),{topFirstChainPoint:a,bottomFirstChainPoint:o}=this._tankTireTrack.calcFirstTopBottomChainPoints(this._tankSpriteParts,e,r,n);this._tankTireTrack.spawnFullTireTrack(a,o,i,r,n)}spawnDriftSmoke(t){this._tankDrift=new Y(t,this._tankSpriteParts.topTrackSprite.width,this._tankSpriteParts.topTrackSprite.height)}updateTireTrack(t,e,i,s){const{topFirstChainPoint:r,bottomFirstChainPoint:n}=this._tankTireTrack.calcFirstTopBottomChainPoints(this._tankSpriteParts,t,i,s),{topLastChainPoint:a,bottomLastChainPoint:o}=this._tankTireTrack.calcLastTopBottomChainPoints(this._tankSpriteParts,t,i,s),{isUpdate:h,prevPoint:l,currPoint:c}=this._tankTireTrack.checkForUpdate(r,n,a,o);if(h){this._tankTireTrack.updateAllChainPoints(r,n,a,o);switch(this._tankTireTrack.detectMovementDirection(l,c,e)){case U.dirForward:this._tankTireTrack.forwardUpdate(r,n,e,i,s);break;case U.dirRotate:this._tankTireTrack.createTireTrackPair(a,o,e,i,s);break;case U.dirBackward:this._tankTireTrack.backwardUpdate(a,o,e,i,s)}}}updateDriftSmoke(t,e,i,s){let r=this._tankSpriteParts.hullSprite.calcPosition(t,i,s);r=this._tankSpriteParts.bottomTrackSprite.calcPosition(r,i,s);switch(this._tankDrift.detectRotateDirection(e)){case W.rotLeft:this._tankDrift.spawnTopSmoke(t,e,i,s);break;case W.rotRight:this._tankDrift.spawnBottomSmoke(r,e,i,s)}}updateForwardAction(t,e,i){this._tankTrackEffect.isForwardMovement=!0;const s=Math.sin(e),r=Math.cos(e),n=this._tankSpriteParts.hullSprite.calcPosition(t,s,r);this.updateSprite(t,e,i,s,r,n),this._tankAcceleration.setPosition(n,s,r,e),this.updateTireTrack(t,e,s,r),this.updateDriftSmoke(t,e,s,r)}updateBackwardAction(t,e,i){this._tankTrackEffect.isForwardMovement=!1;const s=Math.sin(e),r=Math.cos(e);this.defaultUpdate(t,e,i,s,r),this.updateTireTrack(t,e,s,r),this.updateDriftSmoke(t,e,s,r)}preUpdateAction(t,e,i){const s=Math.sin(e),r=Math.cos(e);this.updateTireTrack(t,e,s,r),this.updateDriftSmoke(t,e,s,r),this.defaultUpdate(t,e,i,s,r)}updateAfterAction(t,e,i){const s=Math.sin(e),r=Math.cos(e);this.defaultUpdate(t,e,i,s,r)}defaultUpdate(t,e,i,s,r){const n=this._tankSpriteParts.hullSprite.calcPosition(t,s,r);this.updateSprite(t,e,i,s,r,n)}rotateTurretUpdate(t,e,i,s){const r=Math.sin(e),n=Math.cos(e),a=this._tankSpriteParts.turretSprite,o=a.calcPosition(t,i,s),h=o.clone();G.rotateForTurretPoint(a,h,i,s,r,n),G.rotateToDefaultSpritePoint(a,o,i,s),G.setPosAndAngle(a,o,e);let l=this._tankSpriteParts.weaponSprite.calcPosition(h,r,n);G.updateSpritePart(this._tankSpriteParts.weaponSprite,l,r,n,e)}updateSprite(t,e,i,s,r,n){const a=this._tankSpriteParts.topTrackSprite,o=this._tankSpriteParts.bottomTrackSprite,h=this._tankSpriteParts.hullSprite;let l=a.calcPosition(t);G.updateSpritePart(a,l,s,r,e),l=h.calcPosition(t,s,r),G.updateSpritePart(h,l,s,r,e),l=o.calcPosition(n,s,r),G.updateSpritePart(o,l,s,r,e),this.rotateTurretUpdate(n,i,s,r),this._tankTrackEffect.changeFrame(a,o)}}class ${get health(){return 100}get armor(){return 100}get mass(){return 1}get armorStrength(){return 1}get num(){return 0}}class j{constructor(){this._angularData={finishSpeed:.0175,force:.03},this._forwardData={finishSpeed:3,force:.03},this._backwardData={finishSpeed:2,force:.025}}get angularData(){return this._angularData}get forwardData(){return this._forwardData}get backwardData(){return this._backwardData}get num(){return 0}}class q{constructor(t,e,i,s){this._hull=t,this._track=e,this._turret=i,this._weapon=s}get hull(){return this._hull}get track(){return this._track}get turret(){return this._turret}get weapon(){return this._weapon}}class Q{constructor(){}static create(t,e,i,s){const r=Q.createTurret(i),n=Q.createWeapon(s),a=Q.createHull(t),o=Q.createTrack(e);return new q(a,o,r,n)}static createHull(t){if(0===t)return new $;throw new Error(`Hull model ${t} was not found`)}static createTrack(t){if(0===t)return new j;throw new Error(`Track model ${t} was not found`)}static createTurret(t){if(0===t)return new R;throw new Error(`Turret model ${t} was not found`)}static createWeapon(t){if(0===t)return new D;throw new Error(`Weapon model ${t} was not found`)}}class J extends P{get accelerationEffectIndentX(){return this._accelerationEffectIndentX}constructor(e,i){super(t.HULL_WIDTH[i],t.HULL_HEIGHT[i],4),this._accelerationEffectIndentX=t.ACCELERATION_EFFECT_INDENT_X[i],this._sprite.src=`src/img/tanks/Hulls/Hull_${i}/Hull_${e}.png`}calcPosition(e,i,s){return new a(e.x-t.TRACK_INDENT*i,e.y+t.TRACK_INDENT*s)}}class tt extends P{static calcHeight(t){return tt.PROPORTION_WIDTH_HEIGHT*t}get num(){return this._num}constructor(e,i,s){super(i+t.TRACK_INDENT,s,3),this._frame=0,this._num=e,this._sprite.src=`src/img/tanks/Tracks/Track_${e}.png`}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return tt.ORIGINAL_WIDTH}get originalHeight(){return tt.ORIGINAL_HEIGHT}}tt.PROPORTION_WIDTH_HEIGHT=42/246,tt.ORIGINAL_WIDTH=246,tt.ORIGINAL_HEIGHT=42;class et extends tt{constructor(t,e){super(t,e,tt.calcHeight(e))}calcPosition(t){return t.clone()}}class it extends tt{constructor(e,i,s){const r=tt.calcHeight(i);super(e,i,r),this._deltaHeight=s+t.TRACK_INDENT-r}calcPosition(t,e,i){return new a(t.x-this._deltaHeight*e,t.y+this._deltaHeight*i)}}class st extends P{constructor(e,i,s,r){super(t.TURRET_WIDTH[i],t.TURRET_HEIGHT[i],5),this._sprite.src=`src/img/tanks/Turrets/Turret_${i}/Turret_${e}.png`,this._indentX=s,this._indentY=r}calcPosition(t,e,i){return new a(t.x+this._indentX*i-this._indentY*e,t.y+this._indentY*i+this._indentX*e)}}class rt extends P{constructor(e,i,s){super(t.WEAPON_WIDTH[e],t.WEAPON_HEIGHT[e],5),this._sprite.src=`src/img/tanks/Weapons/Weapon_${e}.png`,this._indentX=i,this._indentY=s}calcPosition(t,e,i){return new a(t.x+this._indentX*i-this._indentY*e,t.y+this._indentY*i+this._indentX*e)}}class nt{constructor(t,e,i,s,r){this._hullSprite=t,this._bottomTrackSprite=e,this._topTrackSprite=i,this._turretSprite=s,this._weaponSprite=r}get hullSprite(){return this._hullSprite}get bottomTrackSprite(){return this._bottomTrackSprite}get topTrackSprite(){return this._topTrackSprite}get turretSprite(){return this._turretSprite}get weaponSprite(){return this._weaponSprite}}class at{constructor(){}static create(e,i,s,r,n){return new nt(new J(e,i),new it(s,t.HULL_WIDTH[i],t.HULL_HEIGHT[i]),new et(s,t.HULL_WIDTH[i]),new st(e,r,t.TURRET_INDENT_X[i],(t.HULL_HEIGHT[i]>>1)-(t.TURRET_HEIGHT[r]>>1)),new rt(n,9*t.TURRET_WIDTH[r]/10,(t.TURRET_HEIGHT[r]>>1)-(t.WEAPON_HEIGHT[n]>>1)))}}class ot{get model(){return this._model}get sprite(){return this._sprite}get id(){return this._id}get control(){return this._control}set control(t){this._control=t}constructor(e,i,s,r,n,a,o,h){this._control=h;const l=Q.create(r,n,a,o),c=new A(e,t.HULL_WIDTH[r]+t.TRACK_INDENT,t.HULL_HEIGHT[r]+(t.TRACK_INDENT<<1),i,l.turret.mass+l.hull.mass+l.weapon.mass,S.tankId);this._model=new C(l,c),this._id=c.id;const _=l.track;this._sprite=new Z(at.create(s,r,n,a,o),_.forwardData,_.backwardData)}spawn(t,e){const i=this._sprite.tankSpriteParts;t.insert(i.topTrackSprite),t.insert(i.bottomTrackSprite),t.insert(i.hullSprite),t.insert(i.weaponSprite),t.insert(i.turretSprite);const s=this._model.entity;e.insert(s),this._sprite.updateAfterAction(s.points[0],s.angle,this._model.turretAngle)}terminate(t,e){const i=this._sprite.tankSpriteParts;this._sprite.tankTireTrack.vanishFullTrack(),t.remove(i.topTrackSprite),t.remove(i.bottomTrackSprite),t.remove(i.hullSprite),t.remove(i.weaponSprite),t.remove(i.turretSprite),e.remove(this._model.entity)}}class ht{constructor(t,e){this._model=t,this._sprite=e,this._id=t.entity.id}get model(){return this._model}get sprite(){return this._sprite}get id(){return this._id}spawn(t,e){t.insert(this._sprite),e.insert(this._model.entity)}terminate(t,e){t.remove(this._sprite),e.remove(this._model.entity)}}class lt extends P{constructor(e,r){super(t.WALL_WIDTH[r],t.WALL_HEIGHT[r],2),this._sprite.src=`src/img/blocks/${i[e]}_${s[r]}.png`}updateAfterAction(t,e){t=t.clone(),G.rotateToDefaultSpritePoint(this,t,Math.sin(e),Math.cos(e)),G.setPosAndAngle(this,t,e)}}class ct extends d{constructor(t){super(t,1/0)}}class _t{constructor(){}static createWallsAroundPerimeter(e,i,s,r){const n=new Array,o=this.calcIndent(e,r.width),h=this.calcIndent(i,r.height-2*t.WALL_HEIGHT[0]);return this.createHorWalls(s,o,h,r,n),this.createVertWalls(s,o,h,r,n),{wallsArray:n,point:new a(o,h)}}static calcIndent(e,i){return(i-e*t.WALL_WIDTH[0])/2}static createHorWalls(e,i,s,r,n){for(let o=i;o<=r.width-i-t.WALL_WIDTH[this.RECT_NUM];o+=t.WALL_WIDTH[this.RECT_NUM])n.push(this.createWall(new a(o,s),0,e,this.RECT_NUM)),n.push(this.createWall(new a(o,r.height-t.WALL_HEIGHT[this.RECT_NUM]-s),0,e,this.RECT_NUM))}static createVertWalls(e,i,s,r,n){for(let o=s+t.WALL_HEIGHT[this.RECT_NUM]+(t.WALL_HEIGHT[this.RECT_NUM]>>1);o<=r.height-s-t.WALL_WIDTH[this.RECT_NUM];o+=t.WALL_WIDTH[this.RECT_NUM])n.push(this.createWall(new a(i-(t.WALL_HEIGHT[this.RECT_NUM]>>1),o),this.RAD_90,e,this.RECT_NUM)),n.push(this.createWall(new a(r.width-i-t.WALL_WIDTH[this.RECT_NUM]+(t.WALL_HEIGHT[this.RECT_NUM]>>1),o),this.RAD_90,e,this.RECT_NUM))}static createWall(e,i,s,n,a=!1){const o=a?r[s][n]:1/0,h=new ct(new A(e,t.WALL_WIDTH[n],t.WALL_HEIGHT[n],i,o,S.wallId)),l=new lt(s,n);return l.point=e,l.angle=i,new ht(h,l)}}_t.RAD_90=Math.PI/2,_t.RECT_NUM=0;class ut{constructor(){}static calcGridPoints(e){const i={GRID_COLUMNS_AMOUNT:ut.GRID_COLUMNS_AMOUNT,GRID_LINES_AMOUNT:ut.GRID_LINES_AMOUNT,GRID_COLUMNS:[],GRID_LINES:[]},s=3*t.WALL_WIDTH[0]/2;for(let t=0;t<i.GRID_COLUMNS_AMOUNT;t++)i.GRID_COLUMNS[t]=e.x+t*s;for(let t=0;t<i.GRID_LINES_AMOUNT;t++)i.GRID_LINES[t]=e.y+t*s;return i}static makeHorWallLine(e,i,s,r,n,o,h){if(e.y===o.GRID_LINES[0]||e.y===o.GRID_LINES[o.GRID_LINES.length-1])throw new Error("Horizontal wall line was made on the obstacle!");e.x!==o.GRID_COLUMNS[0]&&s&&n.push(_t.createWall(e,0,h,1,!1));let l=new a(e.x+t.WALL_WIDTH[1],e.y);for(let s=0;s<i;s++){if(l.x>=o.GRID_COLUMNS[o.GRID_COLUMNS.length-1])throw new Error("Horizontal wall line was made on the obstacle!");n.push(_t.createWall(new a(l.x,l.y),0,h,0,!1)),l=new a(l.x+t.WALL_WIDTH[0],e.y),s!==i-1?(n.push(_t.createWall(new a(l.x,l.y),0,h,1,!1)),l=new a(l.x+t.WALL_WIDTH[1],e.y)):e.x+i*(t.WALL_WIDTH[0]+t.WALL_WIDTH[1])<o.GRID_COLUMNS[o.GRID_COLUMNS.length-1]&&r&&n.push(_t.createWall(new a(l.x,l.y),0,h,1,!1))}}static makeVertWallLine(e,i,s,r,n,o,h){if(e.x===o.GRID_COLUMNS[0]||e.x===o.GRID_COLUMNS[o.GRID_COLUMNS.length-1])throw new Error("Vertical wall line was made on the obstacle!");let l=new a(e.x,e.y);l.y!==o.GRID_LINES[0]&&s&&n.push(_t.createWall(l,0,h,1,!1)),l=new a(l.x,l.y+t.WALL_HEIGHT[1]);let c=new a(l.x+t.WALL_HEIGHT[0],l.y);I.rotatePointAroundTarget(c,new a(c.x-t.WALL_HEIGHT[0]/2,c.y+t.WALL_WIDTH[0]/2),Math.sin(-Math.PI/2),Math.cos(-Math.PI/2));for(let s=0;s<i;s++){if(l.y>=o.GRID_LINES[o.GRID_LINES.length-1])throw new Error("Vertical wall line was made on the obstacle!");n.push(_t.createWall(new a(c.x,c.y),Math.PI/2,h,0,!1)),c=new a(c.x,c.y+t.WALL_WIDTH[0]),l=new a(l.x,l.y+t.WALL_WIDTH[0]),s!==i-1?(n.push(_t.createWall(new a(l.x,l.y),0,h,1,!1)),l=new a(l.x,l.y+t.WALL_HEIGHT[1]),c=new a(c.x,c.y+t.WALL_HEIGHT[1])):e.y+i*(t.WALL_WIDTH[0]+t.WALL_HEIGHT[1])<o.GRID_LINES[o.GRID_LINES.length-1]&&r&&n.push(_t.createWall(new a(l.x,l.y),0,h,1,!1))}}static createMazeLvl1(t,e){const i=ut.calcGridPoints(e),s=new Array;return ut.makeVertWallLine(new a(i.GRID_COLUMNS[1],i.GRID_LINES[1]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[0],i.GRID_LINES[2]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[1],i.GRID_LINES[3]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[1],i.GRID_LINES[4]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[2],i.GRID_LINES[4]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[2],i.GRID_LINES[0]),3,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[2],i.GRID_LINES[3]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[3],i.GRID_LINES[1]),3,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[3],i.GRID_LINES[2]),2,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[5],i.GRID_LINES[2]),2,!1,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[5],i.GRID_LINES[3]),1,!1,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[4],i.GRID_LINES[4]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[4],i.GRID_LINES[3]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[5],i.GRID_LINES[0]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[4],i.GRID_LINES[1]),3,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[6],i.GRID_LINES[1]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[6],i.GRID_LINES[4]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[8],i.GRID_LINES[1]),2,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[7],i.GRID_LINES[2]),2,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[7],i.GRID_LINES[2]),2,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[9],i.GRID_LINES[2]),1,!1,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[9],i.GRID_LINES[3]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[8],i.GRID_LINES[3]),2,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[8],i.GRID_LINES[4]),1,!1,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[9],i.GRID_LINES[1]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[10],i.GRID_LINES[1]),1,!1,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[10],i.GRID_LINES[2]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[10],i.GRID_LINES[4]),1,!0,!0,s,i,t),s}static createMazeLvl2(t,e){const i=ut.calcGridPoints(e),s=new Array;return ut.makeHorWallLine(new a(i.GRID_COLUMNS[0],i.GRID_LINES[1]),2,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[2],i.GRID_LINES[1]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[3],i.GRID_LINES[0]),2,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[3],i.GRID_LINES[2]),2,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[5],i.GRID_LINES[1]),2,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[5],i.GRID_LINES[1]),1,!1,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[5],i.GRID_LINES[3]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[4],i.GRID_LINES[0]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[0],i.GRID_LINES[4]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[1],i.GRID_LINES[2]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[1],i.GRID_LINES[3]),3,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[2],i.GRID_LINES[3]),2,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[7],i.GRID_LINES[0]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[6],i.GRID_LINES[4]),1,!1,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[3],i.GRID_LINES[4]),5,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[7],i.GRID_LINES[2]),2,!1,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[6],i.GRID_LINES[2]),2,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[8],i.GRID_LINES[1]),2,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[9],i.GRID_LINES[0]),3,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[9],i.GRID_LINES[3]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[10],i.GRID_LINES[1]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[10],i.GRID_LINES[2]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[9],i.GRID_LINES[4]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[9],i.GRID_LINES[4]),1,!1,!0,s,i,t),s}static createMazeLvl3(t,e){const i=ut.calcGridPoints(e),s=new Array;return ut.makeVertWallLine(new a(i.GRID_COLUMNS[1],i.GRID_LINES[0]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[0],i.GRID_LINES[2]),2,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[0],i.GRID_LINES[4]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[3],i.GRID_LINES[0]),3,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[2],i.GRID_LINES[1]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[1],i.GRID_LINES[3]),2,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[2],i.GRID_LINES[4]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[4],i.GRID_LINES[3]),2,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[3],i.GRID_LINES[4]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[6],i.GRID_LINES[0]),3,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[4],i.GRID_LINES[1]),2,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[6],i.GRID_LINES[2]),3,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[7],i.GRID_LINES[1]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[9],i.GRID_LINES[1]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[9],i.GRID_LINES[1]),1,!1,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[8],i.GRID_LINES[0]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[6],i.GRID_LINES[4]),1,!1,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[5],i.GRID_LINES[4]),3,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[5],i.GRID_LINES[2]),2,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[4],i.GRID_LINES[2]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[7],i.GRID_LINES[3]),1,!0,!0,s,i,t),ut.makeVertWallLine(new a(i.GRID_COLUMNS[9],i.GRID_LINES[3]),2,!1,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[8],i.GRID_LINES[3]),2,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[10],i.GRID_LINES[2]),1,!0,!0,s,i,t),ut.makeHorWallLine(new a(i.GRID_COLUMNS[10],i.GRID_LINES[4]),1,!0,!0,s,i,t),s}}ut.GRID_COLUMNS_AMOUNT=12,ut.GRID_LINES_AMOUNT=6;class dt extends P{constructor(e){super(t.BACKGROUND_SIZE,t.BACKGROUND_SIZE,0),this._sprite.src=`src/img/backgrounds/${i[e]}_${w(0,1)}.png`}}class mt{constructor(){}static fullFillBackground(e,i,s){for(let r=0;r<i.width;r+=t.BACKGROUND_SIZE)for(let n=0;n<i.height;n+=t.BACKGROUND_SIZE)s.insert(this.addBackgroundTile(new a(r,n),e))}static addBackgroundTile(t,e){const i=new dt(e);return i.point=t,i}}class gt{constructor(){}static dotProduct(t,e){return t.x*e.x+t.y*e.y}static crossProduct(t,e){return t.x*e.y-t.y*e.x}static add(t,e){return new o(t.x+e.x,t.y+e.y)}static subtract(t,e){return new o(t.x-e.x,t.y-e.y)}static scale(t,e){return new o(t.x*e,t.y*e)}static createFromAngleAndLength(t,e){return new o(e*Math.cos(t),e*Math.sin(t))}static calcCoDirectionalScaleFactor(t,e){return t.x/e.x}static calcScaleFactor(t,e){return t.length/e.length}}class It{constructor(){}static hasCollision(t,e){const i=It.getAxes(t),s=It.getAxes(e);function r(i){for(const s of i){const i=It.getProjection(t,s),r=It.getProjection(e,s);if(Math.min(i.max-r.min,r.max-i.min)<=0)return!1}return!0}return r(i)&&r(s)}static getCollisionResult(t,e){const i=It.getAxes(t),s=It.getAxes(e);let r,n,a=Number.MAX_VALUE;function o(s){const o=s===i;for(const i of s){const s=It.getProjection(t,i),h=It.getProjection(e,i),l=Math.min(s.max-h.min,h.max-s.min);if(l<=0)return!1;l<a&&(a=l,r=i,n=o)}return!0}return o(i)&&o(s)?{collisionPoint:It.findClosestVertex(t,e,r,n),overlap:a}:null}static findClosestVertex(t,e,i,s){let r,n;return s?(r=this.getProjection(t,i),n=this.getExtendedProjection(e,i)):(r=this.getProjection(e,i),n=this.getExtendedProjection(t,i)),n.max-r.min<r.max-n.min?n.maxPoint:n.minPoint}static getExtendedProjection(t,e){let i=gt.dotProduct(e,t.points[0]),s=i,r=t.points[0],n=t.points[0];for(let a=1;a<t.points.length;a++){const o=gt.dotProduct(e,t.points[a]);Math.abs(o-i)<this.EPSILON?r=f(r,t.points[a]):Math.abs(o-s)<this.EPSILON?n=f(n,t.points[a]):o<i?(i=o,r=t.points[a]):o>s&&(s=o,n=t.points[a])}return{min:i,max:s,minPoint:r,maxPoint:n}}static getAxes(t){const e=new Array,i=t.points.length-1;for(let s=0;s<i;s++)e.push(h.create(t.points[s],t.points[s+1]));return e.push(h.create(t.points[i],t.points[0])),e}static getProjection(t,e){let i=gt.dotProduct(e,t.points[0]),s=i;for(let r=1;r<t.points.length;r++){const n=gt.dotProduct(e,t.points[r]);n<i?i=n:n>s&&(s=n)}return{min:i,max:s}}}It.EPSILON=1;class Tt{constructor(){}static resolveCollision(t,e){const i=It.getCollisionResult(t,e);if(null===i)return null;const s=this.calcCollisionNormal(i.collisionPoint,t.calcCenter()),r=this.calsImpulseMagnitude(t,e,s);return this.separateEntities(t,i.overlap,s),this.updateAngularVelocity(t,e,i.collisionPoint,r,s),this.updateVelocity(t,e,r,s),i.collisionPoint}static updateAngularVelocity(t,e,i,s,r){const n=this.calcEntityNormal(t),a=gt.subtract(i,e.calcCenter()),o=gt.subtract(i,t.calcCenter()),h=gt.crossProduct(a,r)*s,l=gt.crossProduct(o,n)*s,c=h/e.momentOfInertia;let _=l/t.momentOfInertia;this.shouldReverseReceiving(e.angle,n.angle)&&(_=-_),Math.abs(_+t.angularVelocity)<this.SMALL_ANGULAR_IMPULSE&&Math.abs(_)>this.ORTHOGONAL_IMPULSE&&(_=1===Math.sign(_)?this.SMALL_ANGULAR_IMPULSE:-this.SMALL_ANGULAR_IMPULSE),e.angularVelocity+=c,t.angularVelocity+=_}static shouldReverseReceiving(t,e){const i=L(t-e,0,Math.PI);return i<Math.PI/2&&i>Math.PI/4||i>=Math.PI/2&&i<3*Math.PI/4}static calcEntityNormal(t){const e=t.angle;return E(M(e,t.velocity.angle))?new o(-Math.cos(e),-Math.sin(e)):new o(Math.cos(e),Math.sin(e))}static updateVelocity(t,e,i,s){const r=gt.scale(s,-i/t.mass),n=gt.scale(s,i/e.mass);t.velocity.addVector(r),e.velocity.addVector(n)}static separateEntities(t,e,i){let s=-i.x*e,r=-i.y*e;s+=1===Math.sign(s)?this.CORRECTION_FACTOR:-this.CORRECTION_FACTOR,r+=1===Math.sign(r)?this.CORRECTION_FACTOR:-this.CORRECTION_FACTOR;for(const e of t.points)e.addToCoordinates(s,r)}static calsImpulseMagnitude(t,e,i){const s=gt.subtract(t.velocity,e.velocity);return 2*gt.dotProduct(s,i)/(1/t.mass+1/e.mass)*this.COEFFICIENT_OF_RESTITUTION}static calcCollisionNormal(t,e){const i=gt.subtract(t,e);return i.normalize(),i}}Tt.COEFFICIENT_OF_RESTITUTION=.6,Tt.CORRECTION_FACTOR=.55,Tt.SMALL_ANGULAR_IMPULSE=.004,Tt.ORTHOGONAL_IMPULSE=1e-4;class pt{constructor(){this._idForProcessing=new Array}hasForProcessing(){return 0!==this._idForProcessing.length}clear(){this._idForProcessing.length=0}push(t){this._idForProcessing.push(t)}get iterable(){return this._idForProcessing}}class Lt{get wallsForProcessing(){return this._wallsForProcessing}constructor(t){this._wallsForProcessing=new pt,this._collisionDetection=t}hasCollision(t){const e=this._collisionDetection.getCollisions(t),i=new Array;for(const s of e){const e=Tt.resolveCollision(t,s);e&&(i.push({collisionPoint:e,id:s.id}),this.processCollision(s))}return 0!==i.length?i:null}processCollision(t){S.isWall(t.id)&&this._wallsForProcessing.push(t.id)}}class Et{constructor(t,e){this._sprites=[],this._size=e,this._ctx=t,this._ctx.clearRect(0,0,this._size.width,this._size.height),this._bufferCanvas=document.createElement("canvas"),this._bufferCanvas.width=e.width,this._bufferCanvas.height=e.height,this._bufferCtx=this._bufferCanvas.getContext("2d")}insert(t){const e=N.extractZIndex(t.id);for(let t=this._sprites.length;t<=e;t++)this._sprites.push(new Map);this._sprites[e].set(t.id,t)}remove(t){this.removeById(t)}removeById(t){const e=N.extractZIndex(t.id);this._sprites[e].delete(t.id)}drawAll(){this._bufferCtx.clearRect(0,0,this._size.width,this._size.height);for(const t of this._sprites)for(const e of t.values())this.draw(e);this._ctx.drawImage(this._bufferCanvas,0,0)}clear(){this._sprites=[]}draw(t){this._bufferCtx.save();const e=t.width/2,i=t.height/2;var s;"opacity"in(s=t)&&"number"==typeof s.opacity&&(this._bufferCtx.globalAlpha=t.opacity),this._bufferCtx.translate(t.point.x+e,t.point.y+i),this._bufferCtx.rotate(t.angle),function(t){return"scaleX"in t&&"scaleY"in t&&"number"==typeof t.scaleX&&"number"==typeof t.scaleY}(t)&&this._bufferCtx.scale(t.scaleX,t.scaleY),!function(t){return"frame"in t&&"originalWidth"in t&&"originalHeight"in t&&"number"==typeof t.frame&&"number"==typeof t.originalWidth&&"number"==typeof t.originalHeight}(t)?this._bufferCtx.drawImage(t.sprite,-e,-i,t.width,t.height):this._bufferCtx.drawImage(t.sprite,t.frame*t.originalWidth,0,t.originalWidth,t.originalHeight,-e,-i,t.width,t.height),this._bufferCtx.restore()}}class Mt{constructor(t,e,i,s){this._boundary={xStart:t,yStart:e,xLast:i,yLast:s},this._root=new ft(this._boundary)}insert(t){this._root.insert(t)}getCollisions(t){return this._root.getCollisions(t)}remove(t){this._root.remove(t)}clear(){this._root=new ft(this._boundary)}}class ft{constructor(t){this._totalPolygons=0,this._polygons=new Map,this._children=null,this._boundary=t}isSubdivide(){return null===this._polygons}subdivide(){const t=this._boundary.xStart,e=this._boundary.yStart,i=this._boundary.xLast,s=this._boundary.yLast,r=(i-t)/2,n=(s-e)/2;this._children=[new ft({xStart:t,yStart:e,xLast:t+r,yLast:e+n}),new ft({xStart:t+r,yStart:e,xLast:i,yLast:e+n}),new ft({xStart:t,yStart:e+n,xLast:t+r,yLast:s}),new ft({xStart:t+r,yStart:e+n,xLast:i,yLast:s})],this.redistribute()}redistribute(){this._totalPolygons=0;for(const t of this._children){for(const e of this._polygons.values())t.insert(e);this._totalPolygons+=t._totalPolygons}this._polygons=null}insert(t){if(this.isContainsPolygon(t))if(this.isSubdivide()){this._totalPolygons=0;for(const e of this._children)e.insert(t),this._totalPolygons+=e._totalPolygons}else this._totalPolygons++,this._polygons.set(t.id,t),this._polygons.size>ft.CAPACITY&&this.subdivide()}remove(t){if(this.isContainsPolygon(t))if(this.isSubdivide()){this._totalPolygons=0;for(const e of this._children)e.remove(t),this._totalPolygons+=e._totalPolygons;this._totalPolygons<=ft.HALF_CAPACITY&&this.mergeWithChildren()}else this._totalPolygons--,this._polygons.delete(t.id)}getCollisions(t){const e=new Array;if(this.isSubdivide())for(const i of this._children)i.isContainsPolygon(t)&&e.push(...i.getCollisions(t));else for(const i of this._polygons.values())It.hasCollision(t,i)&&e.push(i);return e}isContainsPolygon(t){for(const e of t.points)if(this.isContainsPoint(e))return!0;return!1}isContainsPoint(t){return t.x>this._boundary.xStart&&t.x<this._boundary.xLast&&t.y>this._boundary.yStart&&t.y<this._boundary.yLast}mergeWithChildren(){this._polygons=new Map;for(const t of this._children){t.isSubdivide()&&t.mergeWithChildren();for(const e of t._polygons.values())this._polygons.set(e.id,e)}this._totalPolygons=this._polygons.size,this._children=null}}ft.CAPACITY=8,ft.HALF_CAPACITY=ft.CAPACITY>>1;class At{set resistanceCoeff(t){this._resistanceCoeff=t}set airResistanceCoeff(t){this._airResistanceCoeff=t}constructor(t,e){this._resistanceCoeff=0,this._airResistanceCoeff=0,this._entityStorage=t,this._collisionManager=e}get entityStorage(){return this._entityStorage}get collisionManager(){return this._collisionManager}}class St extends At{residualMovement(t,e){const i=t.sprite;t.model.isIdle()?i.tankTrackEffect.stopped():(i.tankTrackEffect.setResidualMovement(),this.hullUpdate(t,t.model.residualMovement,T.movement,t.sprite.preUpdateAction,e))}residualAngularMovement(t,e){t.model.isAngularMotionStopped()||this.hullUpdate(t,t.model.residualAngularMovement,T.angularMovement,t.sprite.preUpdateAction,e)}turretCounterclockwiseMovement(t,e){t.model.turretCounterclockwiseMovement(e),St.turretUpdate(t)}turretClockwiseMovement(t,e){t.model.turretClockwiseMovement(e),St.turretUpdate(t)}hullCounterclockwiseMovement(t,e){this.hullUpdate(t,t.model.hullCounterclockwiseMovement,T.angularMovement,t.sprite.preUpdateAction,e)}hullClockwiseMovement(t,e){this.hullUpdate(t,t.model.hullClockwiseMovement,T.angularMovement,t.sprite.preUpdateAction,e)}forwardMovement(t,e){this.hullUpdate(t,t.model.forwardMovement,T.movement,t.sprite.updateForwardAction,e)}backwardMovement(t,e){this.hullUpdate(t,t.model.backwardMovement,T.movement,t.sprite.updateBackwardAction,e)}hullUpdate(t,e,i,s,r){const n=t.model.entity;this._entityStorage.remove(n),e.call(t.model,this._resistanceCoeff,this._airResistanceCoeff,r),i(n),this._collisionManager.hasCollision(n)&&t.sprite.removeAcceleration(),s.call(t.sprite,n.points[0],n.angle,t.model.turretAngle),this._entityStorage.insert(n)}static turretUpdate(t){const e=t.model,i=e.entity.angle,s=Math.sin(i),r=Math.cos(i);t.sprite.rotateTurretUpdate(t.sprite.tankSpriteParts.hullSprite.calcPosition(e.entity.points[0],s,r),e.turretAngle,s,r)}}class yt{constructor(){this._keys=new Set,this.keyDownHandler=this.handleKeyDown.bind(this),this.keyUpHandler=this.handleKeyUp.bind(this),document.addEventListener("keydown",this.keyDownHandler),document.addEventListener("keyup",this.keyUpHandler)}clearKeys(){this._keys.clear()}isKeyDown(t){return this._keys.has(t)}removeEventListeners(){document.removeEventListener("keydown",this.keyDownHandler),document.removeEventListener("keyup",this.keyUpHandler)}handleKeyDown(t){this._keys.add(t.keyCode)}handleKeyUp(t){this._keys.delete(t.keyCode)}}class wt extends At{residualAngularMovement(t,e){t.model.isAngularMotionStopped()||this.update(t,t.model.residualAngularMovement,T.angularMovement,e)}residualMovement(t,e){t.model.isIdle()||this.update(t,t.model.residualMovement,T.movement,e)}update(t,e,i,s){const r=t.model.entity;this._entityStorage.remove(r),e.call(t.model,this._resistanceCoeff,this._airResistanceCoeff,s),i(r),this._collisionManager.hasCollision(r),t.sprite.updateAfterAction(r.points[0],r.angle),this._entityStorage.insert(r)}isCompleteMotion(t){return t.model.isAngularMotionStopped()&&t.model.isIdle()}movement(t,e){this.residualAngularMovement(t,e),this.residualMovement(t,e)}}class Rt{constructor(t,e,i,s){this._movementManager=t,this._storage=e,this._elements=i,this._isResponsibleFor=s}get movementManager(){return this._movementManager}get isResponsibleFor(){return this._isResponsibleFor}get(t){return this._elements.has(t)?this._elements.get(t):null}add(t){for(const e of t)this._elements.has(e.id)||(this._elements.set(e.id,e),e.spawn(this._storage,this._movementManager.entityStorage))}delete(t){this._elements.has(t.id)&&(this._elements.delete(t.id),t.terminate(this._storage,this._movementManager.entityStorage))}}class Dt{constructor(t){this._vanishingListOfTirePairs=new v,this.tanksAmount=0,this._storage=t}get vanishingListOfTirePairs(){return this.tanksAmount++,this._vanishingListOfTirePairs}removeTireTrackPair(t){this._storage.remove(t.topTire),this._storage.remove(t.bottomTire)}reduceOpacity(){let t=0;for(const e of this._vanishingListOfTirePairs){const i=this._vanishingListOfTirePairs.length*Dt.MIN_REDUCING_OPACITY_NUMBER/this.tanksAmount;e.topTire.opacity-=i,e.bottomTire.opacity-=i,e.topTire.opacity<=0&&t++}for(;t>0;t--)this.removeTireTrackPair(this._vanishingListOfTirePairs.tail),this._vanishingListOfTirePairs.removeFromTail()}}Dt.MIN_REDUCING_OPACITY_NUMBER=1e-4;class Ct extends B{get UPDATE_TIMER_TIME(){return Ct.UPDATE_TIMER_TIME}get MAX_FRAME(){return Ct.MAX_FRAME}constructor(e,i){super(t.EXPLOSION_SIZE,t.EXPLOSION_SIZE,1),this._sprite.src="src/img/tanks/Effects/Sprites/Sprite_Effects_Explosion.png",this._point=new a(e.x-t.EXPLOSION_SIZE/2,e.y-t.EXPLOSION_SIZE/2),this._angle=i}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return Ct.ORIGINAL_SIZE}get originalHeight(){return Ct.ORIGINAL_SIZE}}Ct.UPDATE_TIMER_TIME=90,Ct.MAX_FRAME=8,Ct.ORIGINAL_SIZE=256;class Nt extends B{get UPDATE_TIMER_TIME(){return Nt.UPDATE_TIMER_TIME}get MAX_FRAME(){return Nt.MAX_FRAME}constructor(t,e,i,s,r){super(i,s,1),this._sprite.src=`src/img/tanks/Effects/Sprites/Sprite_Fire_Shots_Impact_${0===r?0:1}.png`;const n=new a(t.x+s/2*Math.sin(e),t.y-s/2*Math.cos(e));G.rotateToDefaultSpritePoint(this,n,Math.sin(e),Math.cos(e)),this._point=n,this._angle=e}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return Nt.ORIGINAL_WIDTH}get originalHeight(){return Nt.ORIGINAL_HEIGHT}}Nt.UPDATE_TIMER_TIME=70,Nt.MAX_FRAME=3,Nt.ORIGINAL_WIDTH=120,Nt.ORIGINAL_HEIGHT=205;class Pt extends B{get UPDATE_TIMER_TIME(){return Pt.UPDATE_TIMER_TIME}get MAX_FRAME(){return Pt.MAX_FRAME}constructor(t,e,i,s,r){super(i,s,1),this._sprite.src=`src/img/tanks/Effects/Sprites/Sprite_Fire_Shots_Shot_${0===r?0:1}.png`;const n=new a(t.x+s/2*Math.sin(e),t.y-s/2*Math.cos(e));G.rotateToDefaultSpritePoint(this,n,Math.sin(e),Math.cos(e)),this._point=n,this._angle=e}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return Pt.ORIGINAL_WIDTH}get originalHeight(){return Pt.ORIGINAL_HEIGHT}}Pt.UPDATE_TIMER_TIME=45,Pt.MAX_FRAME=3,Pt.ORIGINAL_WIDTH=135,Pt.ORIGINAL_HEIGHT=202;class kt{static playDeathAnimation(t){if(S.isWall(t.id),S.isTank(t.id))return new Ct(t.calcCenter(),w(-Math.PI,Math.PI));S.isBullet(t.id)}static playImpactAnimation(e,i,s){return new Nt(e,i,5*t.BULLET_WIDTH[s],5*t.BULLET_HEIGHT[s],s)}static playShootAnimation(e,i,s){return new Pt(e,i,5*t.BULLET_WIDTH[s],5*t.BULLET_HEIGHT[s],s)}}class Ht{constructor(t){this._animationManager=t}get animationManager(){return this._animationManager}createImpactAnimation(t,e){this._animationManager.add(kt.playImpactAnimation(t,e.model.entity.angle+Math.PI,e.sprite.num))}createDeadAnimation(t){this._animationManager.add(kt.playDeathAnimation(t.model.entity))}}class vt{constructor(t){this._animationManager=t}get animationManager(){return this._animationManager}createShootAnimation(t,e){this._animationManager.add(kt.playShootAnimation(f(t.entity.points[0],t.entity.points[3]),t.entity.angle,e))}}class Gt extends Rt{constructor(t,e,i,s,r,n){super(t,e,i,S.isTank),this._addBulletElement=s,this._KeyHandler=n,this._tankAnimator=new vt(r),this._tireTracksManager=new Dt(e)}handle(t){this._tireTracksManager.reduceOpacity();for(const e of this._elements.values()){const i=e.control;let s=this._KeyHandler.isKeyDown(i.turretClockwiseKey),r=this._KeyHandler.isKeyDown(i.turretCounterClockwiseKey);if((s&&!r||!s&&r)&&(s?this._movementManager.turretClockwiseMovement(e,t):r&&this._movementManager.turretCounterclockwiseMovement(e,t)),s=this._KeyHandler.isKeyDown(i.forwardKey),r=this._KeyHandler.isKeyDown(i.backwardKey),s&&!r||!s&&r?s?this._movementManager.forwardMovement(e,t):r&&(e.sprite.removeAcceleration(),this._movementManager.backwardMovement(e,t)):(e.sprite.removeAcceleration(),this._movementManager.residualMovement(e,t)),s=this._KeyHandler.isKeyDown(i.hullClockwiseKey),r=this._KeyHandler.isKeyDown(i.hullCounterClockwiseKey),s&&!r||!s&&r?s?this._movementManager.hullClockwiseMovement(e,t):r&&this._movementManager.hullCounterclockwiseMovement(e,t):this._movementManager.residualAngularMovement(e,t),s=this._KeyHandler.isKeyDown(i.shootKey),s){const t=e.model.shot();if(t){const i=e.model.bulletNum;this._tankAnimator.createShootAnimation(t,i),this._addBulletElement.addBulletModel(t,i)}}}}add(t){super.add(t);for(const e of t){const t=e.sprite,i=e.model.entity;t.spawnTireTracks(this._storage,i.points[0],i.angle,this._tireTracksManager.vanishingListOfTirePairs),t.spawnDriftSmoke(this._tankAnimator.animationManager);const s=t.tankSpriteParts.hullSprite;t.spawnTankAcceleration(this._storage,s.accelerationEffectIndentX,s.height)}}}class Ot extends Rt{constructor(t,e,i){super(t,e,i,S.isWall),this._wallToProcess=new v}addToProcess(){const t=this._movementManager.collisionManager.wallsForProcessing;if(t.hasForProcessing()){for(const e of t.iterable)this._wallToProcess.addToTail(this._elements.get(e));t.clear()}}handle(t){this.addToProcess(),this._wallToProcess.isEmpty()||this._wallToProcess.applyAndRemove(this._movementManager.movement.bind(this._movementManager),this._movementManager.isCompleteMotion.bind(this._movementManager),t)}}class Ut{constructor(t){this._animationList=new v,this._storage=t}add(t){this._storage.insert(t),this._animationList.addToTail(t)}handle(t){this._animationList.isEmpty()||this._animationList.applyAndRemove(((t,e)=>t.changeFrame(e)),this.removalCondition.bind(this),t)}removalCondition(t){return t.isEnded&&this._storage.removeById(t),t.isEnded}}class Wt{constructor(t,e){this._model=t,this._sprite=e,this._id=t.entity.id}get id(){return this._id}get model(){return this._model}get sprite(){return this._sprite}spawn(t,e){t.insert(this._sprite),e.insert(this._model.entity)}terminate(t,e){t.remove(this._sprite),e.remove(this._model.entity)}}class xt extends P{get num(){return this._num}constructor(e){super(t.BULLET_WIDTH[e],t.BULLET_HEIGHT[e],3),this._sprite.src=`src/img/tanks/Bullets/Bullet_${e}.png`,this._num=e}updateAfterAction(t,e){t=t.clone(),G.rotateToDefaultSpritePoint(this,t,Math.sin(e),Math.cos(e)),G.setPosAndAngle(this,t,e)}}class bt extends Rt{constructor(t,e,i,s,r){super(t,e,i,S.isBullet),this._handlingManagers=s,this._bulletAnimator=new Ht(r)}handle(t){if(0!==this._elements.size){const e=new Array;for(const i of this._elements.values())this._movementManager.movement(i,t),this._movementManager.hasResidualMovement(i)||e.push(i);for(const t of e)this.delete(t)}this._movementManager.bulletCollisionDates.hasForProcessing()&&this.handleBulletCollisions()}handleBulletCollisions(){for(const t of this._movementManager.bulletCollisionDates.iterable){for(const e of t.collisionPacks){this._bulletAnimator.createImpactAnimation(e.collisionPoint,t.bulletElement);const i=e.id,s=this.getElementHandling(i),r=s.get(i);r&&(r.model.takeDamage(t.bulletElement.model),r.model.isDead()&&(this._bulletAnimator.createDeadAnimation(r),s.delete(r)))}this.delete(t.bulletElement)}this._movementManager.bulletCollisionDates.clear()}getElementHandling(t){for(const e of this._handlingManagers)if(e.isResponsibleFor(t))return e}}class Ft{constructor(t,e,i){this._elements=t,this._storage=e,this._bulletMovementManager=i}addBulletModel(t,e){if(!this._elements.has(t.entity.id)){const i=new Wt(t,new xt(e));this._bulletMovementManager.checkForSpawn(i)&&(this._elements.set(i.id,i),i.spawn(this._storage,this._bulletMovementManager.entityStorage))}}}class Vt{constructor(){}static movePolygon(t,e){for(const i of t.points)i.addToCoordinates(e.x,e.y)}}class Bt extends At{constructor(){super(...arguments),this._bulletCollisionDates=new pt}get bulletCollisionDates(){return this._bulletCollisionDates}hasResidualMovement(t){return!t.model.isIdle()}movement(t,e){t.model.isIdle()||this.update(t,e)}update(t,e){const i=t.model.entity;this._entityStorage.remove(i),t.model.residualMovement(this._airResistanceCoeff,e);const s=gt.createFromAngleAndLength(i.velocity.angle,i.movementLength);let r=!1;const n=Math.floor(gt.calcCoDirectionalScaleFactor(i.velocity,s));for(let e=n;e>0;e--){Vt.movePolygon(i,s);const e=this._collisionManager.hasCollision(i);if(e){this._bulletCollisionDates.push({bulletElement:t,collisionPacks:e}),r=!0;break}}if(!r){s.scale(-n),s.addVector(i.velocity),Vt.movePolygon(i,s);const e=this._collisionManager.hasCollision(i);e&&this._bulletCollisionDates.push({bulletElement:t,collisionPacks:e})}t.sprite.updateAfterAction(i.points[0],i.angle),this._entityStorage.insert(i)}checkForSpawn(t){const e=t.model.entity,i=this._collisionManager.hasCollision(e);return i?(this._bulletCollisionDates.push({bulletElement:t,collisionPacks:i}),!1):(t.sprite.updateAfterAction(e.points[0],e.angle),!0)}}class Xt{constructor(){this._executioners=new Array}add(...t){this._executioners.push(...t)}renderAll(t){for(const e of this._executioners)e.handle(t)}}class Kt{constructor(t){this._isGameLoopActive=!1,this._lastFrameTime=performance.now(),this._render=new Xt,this._drawable=t}get render(){return this._render}start(){this._isGameLoopActive||(this._isGameLoopActive=!0,requestAnimationFrame((()=>this.gameLoop())))}stop(){this._isGameLoopActive=!1}gameLoop(){if(!this._isGameLoopActive)return;const t=performance.now();this._render.renderAll(t-this._lastFrameTime),this._drawable.drawAll(),this._lastFrameTime=t,requestAnimationFrame((()=>this.gameLoop()))}}class zt{constructor(t,e){this._handlingManagers=new Array,this._keyHandler=new yt,this.handleVisibilityChange=()=>{document.hidden?(this._gameLoop.stop(),this._keyHandler.clearKeys()):this._gameLoop.start()},document.addEventListener("visibilitychange",this.handleVisibilityChange),this._size=e,this._canvas=new Et(t,this._size),this._gameLoop=new Kt(this._canvas),this._animationManager=new Ut(this._canvas);const i=new Mt(0,0,this._size.width,this._size.height),s=new Lt(i),r=new Map,n=new Map,a=new Map,o=new St(i,s),h=new wt(i,s),l=new Bt(i,s),c=new Ft(a,this._canvas,l);this._tankHandlingManagers=new Gt(o,this._canvas,r,c,this._animationManager,this._keyHandler),this._wallHandlingManagers=new Ot(h,this._canvas,n),this._bulletHandlingManager=new bt(l,this._canvas,a,this._handlingManagers,this._animationManager),this._handlingManagers.push(this._tankHandlingManagers,this._wallHandlingManagers,this._bulletHandlingManager),this._gameLoop.render.add(...this._handlingManagers,this._animationManager),this._gameLoop.start()}removeEventListeners(){this._keyHandler.removeEventListeners(),document.removeEventListener("visibilitychange",this.handleVisibilityChange)}setBackgroundMaterial(t){this.setCoefficients(t),this.createBackgroundSprites(t)}setCoefficients(t){for(const e of this._handlingManagers)e.movementManager.resistanceCoeff=n[t],e.movementManager.airResistanceCoeff=15e-7}createBackgroundSprites(t){mt.fullFillBackground(t,this._size,this._canvas)}addTankElements(t){this._tankHandlingManagers.add(t)}addWallElements(t){this._wallHandlingManagers.add(t)}}class Yt{constructor(){}static get CONTROL_1(){return{forwardKey:87,backwardKey:83,hullClockwiseKey:68,hullCounterClockwiseKey:65,turretClockwiseKey:86,turretCounterClockwiseKey:67,shootKey:66}}static get CONTROL_2(){return{forwardKey:38,backwardKey:40,hullClockwiseKey:39,hullCounterClockwiseKey:37,turretClockwiseKey:190,turretCounterClockwiseKey:188,shootKey:191}}static start(e){Yt.createInfoPanel(e);const i={width:e.width,height:e.height};t.setResolutionResizeCoeff(i);const s=e.getContext("2d");let r=new a(t.resizeX(180),t.resizeY(210));const n=new ot(r,0,0,0,0,0,0,this.CONTROL_1);r=new a(t.resizeX(1680),t.resizeY(800));const o=new ot(r,4.71,1,0,0,0,0,this.CONTROL_2);Yt.createMaze(s,i,1,2,n,o,ut.createMazeLvl1)}static createMaze(t,e,i,s,r,n,a){const o=new zt(t,e);o.setBackgroundMaterial(i),o.addTankElements([r,n]);const{wallsArray:h,point:l}=_t.createWallsAroundPerimeter(17,7,s,e);o.addWallElements(h),o.addWallElements(a(s,l))}static createInfoPanel(t){t.style.top=`${Yt.PANEL_HEIGHT}%`,t.style.height=100-Yt.PANEL_HEIGHT+"%";const e=document.createElement("div");e.id="info-panel",e.style.height=`${Yt.PANEL_HEIGHT}%`,document.body.appendChild(e);const i=document.createElement("div");i.id="tank-attacker";const s=document.createElement("div");s.id="key-count";const r=document.createElement("div");return r.id="tank-defender",e.appendChild(i),e.appendChild(s),e.appendChild(r),{tankAttacker:i,keyCount:s,tankDefender:r}}}Yt.PANEL_HEIGHT=5;const Zt=document.querySelector("#canvas");Zt.width=window.screen.width,Zt.height=window.screen.height,class{constructor(){}static start(t,e){if(0===t)Yt.start(e)}}.start(0,Zt)})();