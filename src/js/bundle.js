(()=>{"use strict";class t{get health(){return t.HEALTH}get armor(){return t.ARMOR}get mass(){return t.MASS}get armorStrength(){return t.ARMOR_STRENGTH}get num(){return t.NUM}}t.HEALTH=100,t.ARMOR=1,t.MASS=1,t.ARMOR_STRENGTH=20,t.NUM=0;class e{get health(){return e.HEALTH}get armor(){return e.ARMOR}get mass(){return e.MASS}get armorStrength(){return e.ARMOR_STRENGTH}get num(){return e.NUM}}e.HEALTH=90,e.ARMOR=1.1,e.MASS=1,e.ARMOR_STRENGTH=25,e.NUM=1;class i{get health(){return i.HEALTH}get armor(){return i.ARMOR}get mass(){return i.MASS}get armorStrength(){return i.ARMOR_STRENGTH}get num(){return i.NUM}}i.HEALTH=150,i.ARMOR=1,i.MASS=1.5,i.ARMOR_STRENGTH=20,i.NUM=2;class r{get health(){return r.HEALTH}get armor(){return r.ARMOR}get mass(){return r.MASS}get armorStrength(){return r.ARMOR_STRENGTH}get num(){return r.NUM}}r.HEALTH=100,r.ARMOR=1.5,r.MASS=1.5,r.ARMOR_STRENGTH=30,r.NUM=3;class s{get health(){return s.HEALTH}get armor(){return s.ARMOR}get mass(){return s.MASS}get armorStrength(){return s.ARMOR_STRENGTH}get num(){return s.NUM}}s.HEALTH=90,s.ARMOR=.9,s.MASS=.9,s.ARMOR_STRENGTH=18,s.NUM=4;class n{get health(){return n.HEALTH}get armor(){return n.ARMOR}get mass(){return n.MASS}get armorStrength(){return n.ARMOR_STRENGTH}get num(){return n.NUM}}n.HEALTH=110,n.ARMOR=.5,n.MASS=.9,n.ARMOR_STRENGTH=20,n.NUM=5;class a{get health(){return a.HEALTH}get armor(){return a.ARMOR}get mass(){return a.MASS}get armorStrength(){return a.ARMOR_STRENGTH}get num(){return a.NUM}}a.HEALTH=100,a.ARMOR=.6,a.MASS=.95,a.ARMOR_STRENGTH=22,a.NUM=6;class o{get health(){return o.HEALTH}get armor(){return o.ARMOR}get mass(){return o.MASS}get armorStrength(){return o.ARMOR_STRENGTH}get num(){return o.NUM}}o.HEALTH=85,o.ARMOR=.6,o.MASS=.5,o.ARMOR_STRENGTH=25,o.NUM=7;class l{constructor(){this._angularData=Object.assign({},l.ANGULAR_DATA),this._forwardData=Object.assign({},l.FORWARD_DATA),this._backwardData=Object.assign({},l.BACKWARD_DATA)}get angularData(){return this._angularData}get forwardData(){return this._forwardData}get backwardData(){return this._backwardData}get num(){return 0}}l.ANGULAR_DATA={finishSpeed:.0175,force:.03},l.FORWARD_DATA={finishSpeed:3,force:.03},l.BACKWARD_DATA={finishSpeed:2,force:.025};class h{constructor(){this._angularData=Object.assign({},h.ANGULAR_DATA),this._forwardData=Object.assign({},h.FORWARD_DATA),this._backwardData=Object.assign({},h.BACKWARD_DATA)}get angularData(){return this._angularData}get forwardData(){return this._forwardData}get backwardData(){return this._backwardData}get num(){return 1}}h.ANGULAR_DATA={finishSpeed:.019,force:.02},h.FORWARD_DATA={finishSpeed:3.5,force:.02},h.BACKWARD_DATA={finishSpeed:2.5,force:.015};class c{constructor(){this._angularData=Object.assign({},c.ANGULAR_DATA),this._forwardData=Object.assign({},c.FORWARD_DATA),this._backwardData=Object.assign({},c.BACKWARD_DATA)}get angularData(){return this._angularData}get forwardData(){return this._forwardData}get backwardData(){return this._backwardData}get num(){return 2}}c.ANGULAR_DATA={finishSpeed:.014,force:.015},c.FORWARD_DATA={finishSpeed:4,force:.035},c.BACKWARD_DATA={finishSpeed:3,force:.03};class _{constructor(){this._angularData=Object.assign({},_.ANGULAR_DATA),this._forwardData=Object.assign({},_.FORWARD_DATA),this._backwardData=Object.assign({},_.BACKWARD_DATA)}get angularData(){return this._angularData}get forwardData(){return this._forwardData}get backwardData(){return this._backwardData}get num(){return 3}}_.ANGULAR_DATA={finishSpeed:.03,force:.04},_.FORWARD_DATA={finishSpeed:2,force:.025},_.BACKWARD_DATA={finishSpeed:1,force:.02};class u{static get BACKGROUND_SIZE(){return u.fieldsX.BACKGROUND_SIZE}static get WALL_WIDTH(){return u.fieldsX.WALL_WIDTH}static get WALL_HEIGHT(){return u.fieldsY.WALL_HEIGHT}static get TRACK_INDENT(){return u.fieldsY.TRACK_INDENT}static get HULL_WIDTH(){return u.fieldsX.HULL_WIDTH}static get HULL_HEIGHT(){return u.fieldsY.HULL_HEIGHT}static get TURRET_INDENT_X(){return u.fieldsX.TURRET_INDENT_X}static get TURRET_WIDTH(){return u.fieldsX.TURRET_WIDTH}static get TURRET_HEIGHT(){return u.fieldsY.TURRET_HEIGHT}static get WEAPON_WIDTH(){return u.fieldsX.WEAPON_WIDTH}static get WEAPON_HEIGHT(){return u.fieldsY.WEAPON_HEIGHT}static get BULLET_WIDTH(){return u.fieldsX.BULLET_WIDTH}static get BULLET_HEIGHT(){return u.fieldsY.BULLET_HEIGHT}static get ACCELERATION_SIZE(){return u.fieldsX.ACCELERATION_SIZE}static get EXPLOSION_SIZE(){return u.fieldsX.EXPLOSION_SIZE}static get ACCELERATION_EFFECT_INDENT_X(){return u.fieldsX.ACCELERATION_EFFECT_INDENT_X}static get KEY_SIZE(){return u.fieldsX.KEY_SIZE}static get BOX_SIZE(){return u.fieldsX.BOX_SIZE}static get HEALTH_BAR_HEIGHT(){return u.fieldsY.HEALTH_BAR_HEIGHT}static get ARMOR_BAR_HEIGHT(){return u.fieldsY.ARMOR_BAR_HEIGHT}static get HEALTH_ARMOR_BAR_INDENT_Y(){return u.fieldsY.HEALTH_ARMOR_BAR_INDENT_Y}static getTankEntityWidth(t){return u.HULL_WIDTH[t]+u.TRACK_INDENT}static getTankEntityHeight(t){return u.HULL_HEIGHT[t]+(u.TRACK_INDENT<<1)}static resizeX(t){return Math.round(t*u.resizeWidthCoeff)}static resizeY(t){return Math.round(t*u.resizeHeightCoeff)}static undoResizeX(t){return Math.round(t/u.resizeWidthCoeff)}static undoResizeY(t){return Math.round(t/u.resizeHeightCoeff)}static setResolutionResizeCoeff(t,e){u.resizeWidthCoeff=t/u.DEVELOPING_SCREEN_WIDTH,u.resizeHeightCoeff=e/u.DEVELOPING_SCREEN_HEIGHT,u.resizeConstants()}static resizeConstants(){for(const t in u.fieldsX){const e=u.fieldsX[t];u.fieldsX[t]=Array.isArray(e)?e.map(u.resizeX):u.resizeX(e)}for(const t in u.fieldsY){const e=u.fieldsY[t];u.fieldsY[t]=Array.isArray(e)?e.map(u.resizeY):u.resizeY(e)}}}u.resizeWidthCoeff=1,u.resizeHeightCoeff=1,u.DEVELOPING_SCREEN_WIDTH=1920,u.DEVELOPING_SCREEN_HEIGHT=1080,u.fieldsX={BACKGROUND_SIZE:115,WALL_WIDTH:[110,55],HULL_WIDTH:[63,67,64,53,67,67,63,57],TURRET_INDENT_X:[17,21,17,12,21,21,21,17],TURRET_WIDTH:[35,42,30,30,24,30,35,24],WEAPON_WIDTH:[39,41,33,35,42,30,35,30],BULLET_WIDTH:[13,18,25,26,21],ACCELERATION_SIZE:70,EXPLOSION_SIZE:99,ACCELERATION_EFFECT_INDENT_X:[4,11,0,0,4,4,0,0,0],KEY_SIZE:55,BOX_SIZE:55},u.fieldsY={WALL_HEIGHT:[55,55],TRACK_INDENT:5,HULL_HEIGHT:[41,52,41,34,57,46,40,34],TURRET_HEIGHT:[30,30,19,30,24,24,30,24],WEAPON_HEIGHT:[12,9,12,6,9,13,12,12],BULLET_HEIGHT:[6,9,11,7,9],HEALTH_BAR_HEIGHT:10,ARMOR_BAR_HEIGHT:4,HEALTH_ARMOR_BAR_INDENT_Y:3};const d=Math.PI/180,m=["Grass","Ground","Sandstone"],g=["Rect","Square"],E=[[4,2],[5.5,2.5],[7,3]],p=[.55,.7,.85],T=11;var A;!function(t){t[t.bulLight=0]="bulLight",t[t.bulMedium=1]="bulMedium",t[t.bulHeavy=2]="bulHeavy",t[t.bulGrenade=3]="bulGrenade",t[t.bulSniper=4]="bulSniper",t[t.key=5]="key"}(A||(A={}));class I{get angleSpeed(){return I.ANGLE_SPEED}get mass(){return I.MASS}get bulletCapacity(){return I.BULLET_CAPACITY}get num(){return 0}}I.ANGLE_SPEED=6e-4,I.MASS=.35,I.BULLET_CAPACITY=3;class S{get angleSpeed(){return S.ANGLE_SPEED}get mass(){return S.MASS}get bulletCapacity(){return S.BULLET_CAPACITY}get num(){return 1}}S.ANGLE_SPEED=.001,S.MASS=.25,S.BULLET_CAPACITY=2;class M{get angleSpeed(){return M.ANGLE_SPEED}get mass(){return M.MASS}get bulletCapacity(){return M.BULLET_CAPACITY}get num(){return 2}}M.ANGLE_SPEED=4e-4,M.MASS=.4,M.BULLET_CAPACITY=5;class L{get angleSpeed(){return L.ANGLE_SPEED}get mass(){return L.MASS}get bulletCapacity(){return L.BULLET_CAPACITY}get num(){return 3}}L.ANGLE_SPEED=8e-4,L.MASS=.4,L.BULLET_CAPACITY=3;class C{get angleSpeed(){return C.ANGLE_SPEED}get mass(){return C.MASS}get bulletCapacity(){return C.BULLET_CAPACITY}get num(){return 4}}C.ANGLE_SPEED=5e-4,C.MASS=.37,C.BULLET_CAPACITY=4;class w{get angleSpeed(){return w.ANGLE_SPEED}get mass(){return w.MASS}get bulletCapacity(){return w.BULLET_CAPACITY}get num(){return 5}}w.ANGLE_SPEED=3e-4,w.MASS=.5,w.BULLET_CAPACITY=6;class R{get angleSpeed(){return R.ANGLE_SPEED}get mass(){return R.MASS}get bulletCapacity(){return R.BULLET_CAPACITY}get num(){return 6}}R.ANGLE_SPEED=45e-5,R.MASS=.42,R.BULLET_CAPACITY=5;class f{get angleSpeed(){return f.ANGLE_SPEED}get mass(){return f.MASS}get bulletCapacity(){return f.BULLET_CAPACITY}get num(){return 7}}f.ANGLE_SPEED=8e-4,f.MASS=.45,f.BULLET_CAPACITY=4;class D{get armorPenetrationCoeff(){return D.ARMOR_PENETRATION_COEFF}get damageCoeff(){return D.DAMAGE_COEFF}get startingSpeedCoeff(){return D.STARTING_SPEED_COEFF}get reloadSpeed(){return D.RELOAD_SPEED}get mass(){return D.MASS}get num(){return 0}}D.ARMOR_PENETRATION_COEFF=1,D.DAMAGE_COEFF=1,D.STARTING_SPEED_COEFF=1,D.RELOAD_SPEED=1e3,D.MASS=.15;class P{get armorPenetrationCoeff(){return P.ARMOR_PENETRATION_COEFF}get damageCoeff(){return P.DAMAGE_COEFF}get startingSpeedCoeff(){return P.STARTING_SPEED_COEFF}get reloadSpeed(){return P.RELOAD_SPEED}get mass(){return P.MASS}get num(){return 1}}P.ARMOR_PENETRATION_COEFF=.95,P.DAMAGE_COEFF=.95,P.STARTING_SPEED_COEFF=1.2,P.RELOAD_SPEED=900,P.MASS=.13;class N{get armorPenetrationCoeff(){return N.ARMOR_PENETRATION_COEFF}get damageCoeff(){return N.DAMAGE_COEFF}get startingSpeedCoeff(){return N.STARTING_SPEED_COEFF}get reloadSpeed(){return N.RELOAD_SPEED}get mass(){return N.MASS}get num(){return 2}}N.ARMOR_PENETRATION_COEFF=1.2,N.DAMAGE_COEFF=1.1,N.STARTING_SPEED_COEFF=.8,N.RELOAD_SPEED=1200,N.MASS=.2;class y{get armorPenetrationCoeff(){return y.ARMOR_PENETRATION_COEFF}get damageCoeff(){return y.DAMAGE_COEFF}get startingSpeedCoeff(){return y.STARTING_SPEED_COEFF}get reloadSpeed(){return y.RELOAD_SPEED}get mass(){return y.MASS}get num(){return 3}}y.ARMOR_PENETRATION_COEFF=.9,y.DAMAGE_COEFF=1.2,y.STARTING_SPEED_COEFF=1,y.RELOAD_SPEED=1100,y.MASS=.14;class k{get armorPenetrationCoeff(){return k.ARMOR_PENETRATION_COEFF}get damageCoeff(){return k.DAMAGE_COEFF}get startingSpeedCoeff(){return k.STARTING_SPEED_COEFF}get reloadSpeed(){return k.RELOAD_SPEED}get mass(){return k.MASS}get num(){return 4}}k.ARMOR_PENETRATION_COEFF=1.1,k.DAMAGE_COEFF=.9,k.STARTING_SPEED_COEFF=1,k.RELOAD_SPEED=1e3,k.MASS=.15;class O{get armorPenetrationCoeff(){return O.ARMOR_PENETRATION_COEFF}get damageCoeff(){return O.DAMAGE_COEFF}get startingSpeedCoeff(){return O.STARTING_SPEED_COEFF}get reloadSpeed(){return O.RELOAD_SPEED}get mass(){return O.MASS}get num(){return 5}}O.ARMOR_PENETRATION_COEFF=.7,O.DAMAGE_COEFF=.7,O.STARTING_SPEED_COEFF=1,O.RELOAD_SPEED=500,O.MASS=.18;class H{get armorPenetrationCoeff(){return H.ARMOR_PENETRATION_COEFF}get damageCoeff(){return H.DAMAGE_COEFF}get startingSpeedCoeff(){return H.STARTING_SPEED_COEFF}get reloadSpeed(){return H.RELOAD_SPEED}get mass(){return H.MASS}get num(){return 6}}H.ARMOR_PENETRATION_COEFF=.6,H.DAMAGE_COEFF=1.4,H.STARTING_SPEED_COEFF=1.2,H.RELOAD_SPEED=1500,H.MASS=.25;class v{get armorPenetrationCoeff(){return v.ARMOR_PENETRATION_COEFF}get damageCoeff(){return v.DAMAGE_COEFF}get startingSpeedCoeff(){return v.STARTING_SPEED_COEFF}get reloadSpeed(){return v.RELOAD_SPEED}get mass(){return v.MASS}get num(){return 7}}v.ARMOR_PENETRATION_COEFF=.75,v.DAMAGE_COEFF=1.3,v.STARTING_SPEED_COEFF=1.1,v.RELOAD_SPEED=1300,v.MASS=.22;class G{constructor(){this._hullKit=new x,this._trackKit=new x,this._turretKit=new x,this._weaponKit=new x,this._colorKit=new x,this._currTankIndex=0}static get CONTROL_1(){return{forwardKey:87,backwardKey:83,hullClockwiseKey:68,hullCounterClockwiseKey:65,turretClockwiseKey:86,turretCounterClockwiseKey:67,shootKey:66}}static get CONTROL_2(){return{forwardKey:38,backwardKey:40,hullClockwiseKey:39,hullCounterClockwiseKey:37,turretClockwiseKey:190,turretCounterClockwiseKey:188,shootKey:191}}start(t,e){this._gameStart=t,this.addHullsToKit(),this.addTracksToKit(),this.addTurretsToKit(),this.addWeaponsToKit(),this.addColorsToKit(),this.attachAllClickHandlers(e),this.resetChooseToDefault(),this.illustrateChoose()}addHullsToKit(){this._hullKit.addComponent(new t),this._hullKit.addComponent(new e),this._hullKit.addComponent(new i),this._hullKit.addComponent(new r),this._hullKit.addComponent(new s),this._hullKit.addComponent(new n),this._hullKit.addComponent(new a),this._hullKit.addComponent(new o)}addTracksToKit(){this._trackKit.addComponent(new l),this._trackKit.addComponent(new h),this._trackKit.addComponent(new c),this._trackKit.addComponent(new _)}addTurretsToKit(){this._turretKit.addComponent(new I),this._turretKit.addComponent(new S),this._turretKit.addComponent(new M),this._turretKit.addComponent(new L),this._turretKit.addComponent(new C),this._turretKit.addComponent(new w),this._turretKit.addComponent(new R),this._turretKit.addComponent(new f)}addWeaponsToKit(){this._weaponKit.addComponent(new D),this._weaponKit.addComponent(new P),this._weaponKit.addComponent(new N),this._weaponKit.addComponent(new y),this._weaponKit.addComponent(new k),this._weaponKit.addComponent(new O),this._weaponKit.addComponent(new H),this._weaponKit.addComponent(new v)}addColorsToKit(){this._colorKit.addComponent("rgb(77, 90, 121)"),this._colorKit.addComponent("rgb(120, 114, 77)"),this._colorKit.addComponent("rgb(140, 89, 77)"),this._colorKit.addComponent("rgb(82, 128, 124)")}resetChooseToDefault(){this._hullKit.currComponentIndex=0,this._trackKit.currComponentIndex=0,this._turretKit.currComponentIndex=0,this._weaponKit.currComponentIndex=0,this._colorKit.currComponentIndex=0}attachAllClickHandlers(t){for(const e of t)-1!==e.id.indexOf("prev")?(-1!==e.id.indexOf("Hull")&&e.addEventListener("click",(()=>this.switchToPrev(this._hullKit))),-1!==e.id.indexOf("Track")&&e.addEventListener("click",(()=>this.switchToPrev(this._trackKit))),-1!==e.id.indexOf("Turret")&&e.addEventListener("click",(()=>this.switchToPrev(this._turretKit))),-1!==e.id.indexOf("Weapon")&&e.addEventListener("click",(()=>this.switchToPrev(this._weaponKit))),-1!==e.id.indexOf("Color")&&e.addEventListener("click",(()=>this.switchToPrev(this._colorKit)))):-1!==e.id.indexOf("next")?(-1!==e.id.indexOf("Hull")&&e.addEventListener("click",(()=>this.switchToNext(this._hullKit))),-1!==e.id.indexOf("Track")&&e.addEventListener("click",(()=>this.switchToNext(this._trackKit))),-1!==e.id.indexOf("Turret")&&e.addEventListener("click",(()=>this.switchToNext(this._turretKit))),-1!==e.id.indexOf("Weapon")&&e.addEventListener("click",(()=>this.switchToNext(this._weaponKit))),-1!==e.id.indexOf("Color")&&e.addEventListener("click",(()=>this.switchToNext(this._colorKit)))):-1!==e.id.indexOf("accept")&&e.addEventListener("click",(()=>this.acceptChoose()))}switchToPrev(t){t.switchToPrevComponent(),this.illustrateChoose()}switchToNext(t){t.switchToNextComponent(),this.illustrateChoose()}determinePaths(){this._hullPath=`${G.DEFAULT_PATH}/Hulls/Hull_${this._hullKit.currComponentIndex}/Hull_${this._colorKit.currComponentIndex}.png`,this._trackPath=`${G.DEFAULT_PATH}/Tracks/Track_${this._trackKit.currComponentIndex}_Solo.png`,this._turretPath=`${G.DEFAULT_PATH}/Turrets/Turret_${this._turretKit.currComponentIndex}/Turret_${this._colorKit.currComponentIndex}.png`,this._weaponPath=`${G.DEFAULT_PATH}/Weapons/Weapon_${this._weaponKit.currComponentIndex}.png`}illustrateChoose(){this.determinePaths(),this.illustrateImages(),this.illustrateCharacteristics()}illustrateImages(){document.querySelector(".hull").src=this._hullPath,document.querySelector(".hull-view").src=this._hullPath,document.querySelector(".track").src=this._trackPath,document.querySelector(".track-bottom-view").src=this._trackPath,document.querySelector(".track-top-view").src=this._trackPath,document.querySelector(".turret").src=this._turretPath,document.querySelector(".turret-view").src=this._turretPath,document.querySelector(".weapon").src=this._weaponPath,document.querySelector(".weapon-view").src=this._weaponPath,document.querySelector(".color").style.backgroundColor=this._colorKit.getCurrComponent()}illustrateCharacteristics(){document.getElementById("hullInfo").textContent=this.getHullCharacteristic(),document.getElementById("trackInfo").textContent=this.getTrackCharacteristic(),document.getElementById("turretInfo").textContent=this.getTurretCharacteristic(),document.getElementById("weaponInfo").textContent=this.getWeaponCharacteristic()}getHullCharacteristic(){const t=this._hullKit.getCurrComponent();return`Mass: ${t.mass} | Health: ${t.health} | Armor: ${t.armor} | Armor Strength: ${t.armorStrength}`}getTrackCharacteristic(){const t=this._trackKit.getCurrComponent();return`Max Forward Speed: ${t.forwardData.finishSpeed} | Forward Acceleration: ${t.forwardData.force} | \n                Max Backward Speed: ${t.backwardData.finishSpeed} | Backward Acceleration: ${t.backwardData.force} |\n                Max Angular Speed: ${t.angularData.finishSpeed} | Angular Acceleration: ${t.angularData.force}`}getTurretCharacteristic(){const t=this._turretKit.getCurrComponent();return`Mass: ${t.mass} | Angle Speed: ${t.angleSpeed} | Bullet Capacity: ${t.bulletCapacity}`}getWeaponCharacteristic(){const t=this._weaponKit.getCurrComponent();return`Mass: ${t.mass} | Penetration: ${t.armorPenetrationCoeff} | Damage: ${t.damageCoeff} | Bullet Speed: ${t.startingSpeedCoeff} | Reload Speed: ${t.reloadSpeed}`}acceptChoose(){if(0===this._currTankIndex)this._currTankIndex++,this._attackerTankInfo={color:this._colorKit.currComponentIndex,hullNum:this._hullKit.currComponentIndex,trackNum:this._trackKit.currComponentIndex,turretNum:this._turretKit.currComponentIndex,weaponNum:this._weaponKit.currComponentIndex,control:G.CONTROL_1},this.resetChooseToDefault(),this.illustrateChoose();else if(1===this._currTankIndex){this._currTankIndex++;const t={color:this._colorKit.currComponentIndex,hullNum:this._hullKit.currComponentIndex,trackNum:this._trackKit.currComponentIndex,turretNum:this._turretKit.currComponentIndex,weaponNum:this._weaponKit.currComponentIndex,control:G.CONTROL_2};this._gameStart(this._attackerTankInfo,t)}}}G.DEFAULT_PATH="./src/img/tanks";class x{get currComponentIndex(){return this._currComponentIndex}set currComponentIndex(t){this._currComponentIndex=t}constructor(){this._kit=[],this._size=0,this._currComponentIndex=0}addComponent(t){this._kit[this._size++]=t}switchToPrevComponent(){this._currComponentIndex--,this._currComponentIndex<0&&(this._currComponentIndex=this._size-1)}switchToNextComponent(){this._currComponentIndex++,this._currComponentIndex>=this._size&&(this._currComponentIndex=0)}getCurrComponent(){return this._kit[this._currComponentIndex]}}class U{get startingSpeed(){return 35}get damage(){return 15}get armorPenetration(){return.1}get mass(){return.008}get health(){return 1}get num(){return 0}}class W{constructor(){}static calcAcceleration(t,e,i,r,s,n,a){return(t-e*n*.01-i*s*s*a)/n*(r/17)}static calcAngularAcceleration(t,e,i,r,s,n,a,o){return this.calcAcceleration(t,e,i,r,s,n,a)/o}}class F{constructor(){}static calcAcceleration(t,e,i,r,s,n){return(t-e*r*r*n)/s*(i/17)}static calcAngularAcceleration(t,e,i,r,s,n,a){return this.calcAcceleration(t,e,i,r,s,n)/a}}class b{constructor(t,e){this._entity=t,this._health=e}get health(){return this._health}isDead(){return this._health<=0}get entity(){return this._entity}isIdle(){return 0===this._entity.velocity.length}isAngularMotionStopped(){return 0===this._entity.angularVelocity}applyVelocityChange(t,e){const i=this._entity,r=Math.sign(i.velocity.x),s=Math.sign(i.velocity.y);i.velocity.addToCoordinates(t*Math.cos(e),t*Math.sin(e)),r!==Math.sign(i.velocity.x)&&(i.velocity.x=0),s!==Math.sign(i.velocity.y)&&(i.velocity.y=0)}applyAngularVelocityChange(t){const e=this._entity,i=e.angularVelocity;i>0?e.angularVelocity+=i+t<0?-i:t:e.angularVelocity-=i+t>0?-i:t}takeDamage(t){this._health-=t.damage}}class B extends b{residualMovement(t,e,i){const r=this._entity,s=W.calcAcceleration(0,t,e,i,r.velocity.length,r.mass,r.lengthwiseArea);this.applyVelocityChange(s,r.velocity.angle)}residualAngularMovement(t,e,i){const r=this._entity,s=W.calcAngularAcceleration(0,t,e,i,r.angularVelocity,r.mass,r.lengthwiseArea,r.radiusLength);this.applyAngularVelocityChange(s)}}class K extends b{residualMovement(t,e){const i=this._entity,r=F.calcAcceleration(0,t,e,i.velocity.length,i.mass,i.lengthwiseArea);this.applyVelocityChange(r,i.velocity.angle)}residualAngularMovement(t,e){const i=this._entity,r=F.calcAngularAcceleration(0,t,e,i.angularVelocity,i.mass,i.lengthwiseArea,i.radiusLength);this.applyAngularVelocityChange(r)}}class V extends K{constructor(t,e,i){super(e,t.health),this._damage=t.damage*i.damageCoeff,this._armorPenetration=t.armorPenetration*i.armorPenetrationCoeff,this._maxHealth=t.health}get maxHealth(){return this._maxHealth}get damage(){return this._damage}get armorPenetration(){return this._armorPenetration}}class X{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}clone(){return new X(this._x,this._y)}addToCoordinates(t,e){this._x+=t,this._y+=e}}class Y extends X{get length(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalize(){const t=this.length;0!==t&&(this._x/=t,this._y/=t)}get angle(){return Math.atan2(this.y,this.x)}clone(){return new Y(this.x,this.y)}addVector(t){this._x+=t._x,this._y+=t._y}subtractVector(t){this._x-=t._x,this._y-=t._y}scale(t){this._x*=t,this._y*=t}}class z extends Y{constructor(t,e){super(t,e)}static create(t,e){const i=new z(t.y-e.y,e.x-t.x);return i.normalize(),i}clone(){return new z(this._x,this._y)}}class Z{constructor(){}static rotatePointAroundTarget(t,e,i,r){const s=t.x-e.x,n=t.y-e.y;t.x=e.x+s*r-n*i,t.y=e.y+s*i+n*r}static rotatePoint(t,e,i){const r=t.x,s=t.y;t.x=r*i-s*e,t.y=r*e+s*i}}class ${constructor(){}static movement(t){for(const e of t.points)e.addToCoordinates(t.velocity.x,t.velocity.y)}static angularMovement(t){$.rotateEntity(t,t.angularVelocity)}static rotateEntity(t,e){const i=Math.sin(e),r=Math.cos(e),s=t.calcCenter();for(const e of t.points)Z.rotatePointAroundTarget(e,s,i,r);Z.rotatePoint(t.velocity,i,r)}}function j(t,e){const i=e.x-t.x,r=e.y-t.y;return Math.sqrt(i*i+r*r)}function q(t,e=0,i=2*Math.PI){for(;t<e;)t+=i-e;for(;t>=i;)t-=i-e;return t}function Q(t){return t>Math.PI/2&&t<3*Math.PI/2}function J(t,e){return q(t-e)}function tt(t,e){return new X((t.x+e.x)/2,(t.y+e.y)/2)}class et{constructor(t,e,i,r,s,n){this._angularVelocity=0,this._velocity=new Y(0,0);const a=e*e+i*i;this._radiusLength=.5*Math.sqrt(a),this._momentOfInertia=et.scalingCoeff*s*a,this._mass=s,this._id=n,this._width=e,this._height=i,this.adjustPolygon(t,e,i,r)}adjustPolygon(t,e,i,r){this._points=[t.clone(),new X(t.x+e,t.y),new X(t.x+e,t.y+i),new X(t.x,t.y+i)],0!==r&&$.rotateEntity(this,r)}get velocity(){return this._velocity}get angle(){return Math.atan2(this._points[1].y-this._points[0].y,this._points[1].x-this._points[0].x)}get points(){return this._points}get mass(){return this._mass}get angularVelocity(){return this._angularVelocity}set angularVelocity(t){this._angularVelocity=t}get id(){return this._id}get radiusLength(){return this._radiusLength}get momentOfInertia(){return this._momentOfInertia}calcCenter(){return tt(this._points[0],this._points[2])}get lengthwiseArea(){const t=this.angle-this._velocity.angle;return this._height*Math.abs(Math.cos(t))+this._width*Math.abs(Math.sin(t))}get movementLength(){const t=this.angle-this._velocity.angle;return this._width*Math.abs(Math.cos(t))+this._height*Math.abs(Math.sin(t))}}et.scalingCoeff=.3125;class it{constructor(){}static extractType(t){return t%it.TYPE_DIVIDER}static isTank(t){return it.extractType(t)===it.TANK_TYPE}static isWall(t){return it.extractType(t)===it.WALL_TYPE}static isBullet(t){return it.extractType(t)===it.BULLET_TYPE}static checkForMaxValue(t){if(t>=it.MAX_VALUE)throw new Error("Maximum ID is reached.")}static get tankId(){return it.checkForMaxValue(it.TANK_ID),++it.TANK_ID*it.TYPE_DIVIDER+it.TANK_TYPE}static get wallId(){return it.checkForMaxValue(it.WALL_ID),++it.WALL_ID*it.TYPE_DIVIDER+it.WALL_TYPE}static get bulletId(){return it.checkForMaxValue(it.BULLET_ID),++it.BULLET_ID*it.TYPE_DIVIDER+it.BULLET_TYPE}static get collectibleItemId(){return it.checkForMaxValue(it.COLLECTIBLE_ITEM_ID),++it.COLLECTIBLE_ITEM_ID*it.TYPE_DIVIDER+it.COLLECTIBLE_ITEM_TYPE}}it.TANK_TYPE=0,it.WALL_TYPE=1,it.BULLET_TYPE=2,it.COLLECTIBLE_ITEM_TYPE=3,it.TYPE_DIVIDER=1e3,it.MAX_VALUE=Math.floor(Number.MAX_SAFE_INTEGER/it.TYPE_DIVIDER)-1,it.TANK_ID=0,it.WALL_ID=0,it.BULLET_ID=0,it.COLLECTIBLE_ITEM_ID=0;class rt{constructor(){}static create(t,e,i,r){const s=rt.createBullet(t),n=rt.calcDefaultEntityPoint(t,e,i),a=new et(n,u.BULLET_WIDTH[t],u.BULLET_HEIGHT[t],i,s.mass,it.bulletId),o=s.startingSpeed*r.startingSpeedCoeff;return a.velocity.x=o*Math.cos(i),a.velocity.y=o*Math.sin(i),new V(s,a,r)}static calcDefaultEntityPoint(t,e,i){const r=new X(e.x+u.BULLET_HEIGHT[t]/2*Math.sin(i),e.y-u.BULLET_HEIGHT[t]/2*Math.cos(i)),s=Math.sin(i),n=Math.cos(i),a=new X(r.x+u.BULLET_WIDTH[t]/2*n-u.BULLET_HEIGHT[t]/2*s,r.y+u.BULLET_HEIGHT[t]/2*n+u.BULLET_WIDTH[t]/2*s);return Z.rotatePointAroundTarget(r,a,-s,n),r}static createBullet(t){if(0===t)return new U;throw new Error(`Bullet model ${t} was not found`)}}function st(t,e){return Math.floor(Math.random()*(e+1-t))+t}class nt extends B{get maxHealth(){return this._tankParts.hull.health}get maxArmor(){return this._tankParts.hull.armor}constructor(t,e){super(e,t.hull.health),this._lastTimeShot=Date.now(),this._bulletQuantity=0,this._bulletNum=nt.DEFAULT_BULLET_NUM,this._isBraking=!1,this._isDrift=!1,this._tankParts=t,this._turretAngle=e.angle,this._armor=t.hull.armor}takeDamage(t){this._armor-=t.armorPenetration,this._armor<0&&(this._armor=0);const e=t.damage-this._armor*this.armorStrength;e>0&&(this._health-=e)}get turretAngle(){return this._turretAngle}get armor(){return this._armor}get armorStrength(){return this._tankParts.hull.armorStrength}get bulletNum(){return this._bulletNum}shot(){const t=Date.now();if(t-this._lastTimeShot<this._tankParts.weapon.reloadSpeed)return null;0===this._bulletQuantity?this._bulletNum=nt.DEFAULT_BULLET_NUM:this._bulletQuantity--;const e=rt.create(this._bulletNum,this.calcBulletExit(),this._turretAngle,this._tankParts.weapon);return this._lastTimeShot=t,e}calcBulletExit(){const t=this._entity.calcCenter(),e=this._tankParts,i=(s=e.turret,u.TURRET_WIDTH[s.num]/2+(r=e.weapon,u.WEAPON_WIDTH[r.num]));var r,s;const n=t.x+i*Math.cos(this._turretAngle),a=t.y+i*Math.sin(this._turretAngle);return new X(n,a)}takeBullet(t){this._bulletNum=t,this._bulletQuantity=this._tankParts.turret.bulletCapacity}turretClockwiseMovement(t){this._turretAngle+=this._tankParts.turret.angleSpeed*t}turretCounterclockwiseMovement(t){this._turretAngle-=this._tankParts.turret.angleSpeed*t}incTurretAngle(t){this._turretAngle+=t}clockwiseMovement(t,e,i){const r=this._entity,s=this._tankParts.track.angularData;r.angularVelocity<s.finishSpeed&&(r.angularVelocity+=W.calcAngularAcceleration(s.force,t,e,i,r.angularVelocity,r.mass,r.lengthwiseArea,r.radiusLength)),this.updateAngularVelocity(),this.incTurretAngle(r.angularVelocity)}counterclockwiseMovement(t,e,i){const r=this._entity,s=this._tankParts.track.angularData;-r.angularVelocity<s.finishSpeed&&(r.angularVelocity-=W.calcAngularAcceleration(s.force,t,e,i,r.angularVelocity,r.mass,r.lengthwiseArea,r.radiusLength)),this.updateAngularVelocity(),this.incTurretAngle(r.angularVelocity)}updateAngularVelocity(){if(this.isIdle())return;const t=this._entity,e=t.velocity;(this._isDrift||this._isBraking)&&this.incAngularVelocity(t,e),this._isBraking||this.decAngularVelocity(t,e)}incAngularVelocity(t,e){const i=this.calcCoeff(),r=1+e.length/(this._tankParts.track.forwardData.finishSpeed*i),s=1+t.mass/(10*i);t.angularVelocity*=s*r}calcCoeff(){let t=100;return this._isDrift&&(t-=25),this._isBraking&&(t-=5),t}decAngularVelocity(t,e){const i=1-e.length/(20*this._tankParts.track.forwardData.finishSpeed),r=1-t.mass/200;t.angularVelocity*=r*i,e.scale(r)}forwardMovement(t,e,i){this.movement(this._tankParts.track.forwardData,this._entity.angle,t,e,i)}backwardMovement(t,e,i){this.movement(this._tankParts.track.backwardData,this._entity.angle+Math.PI,t,e,i)}movement(t,e,i,r,s){const n=this._entity,a=n.velocity.length,o=0===a?e:n.velocity.angle,l=J(e,o);this.setBrakingStatus(l),nt.isStraightMovement(l)?(this._isDrift=!1,this.handleStraightMovement(t,i,r,s,a,o)):(this._isDrift=!nt.isReverseMovement(l),this._isDrift&&(this.determineDribbleSpeed(l),this.applyTurn(this.calcShortestTurn(l))),this.handleDriftMovement(t,i,r,s,a,l,o))}setBrakingStatus(t){this._isBraking=Q(t)}calcShortestTurn(t){return this._isBraking&&(t=nt.adjustTurnForBraking(t)),t=nt.adjustTurnForRecovery(t)}static isStraightMovement(t){return t<=d||2*Math.PI-t<=d}static isReverseMovement(t){return Math.abs(t-Math.PI)<=d}handleStraightMovement(t,e,i,r,s,n){if(s<t.finishSpeed){const a=W.calcAcceleration(t.force,e,i,r,s,this._entity.mass,this._entity.lengthwiseArea);this._entity.velocity.addToCoordinates(a*Math.cos(n),a*Math.sin(n))}}handleDriftMovement(t,e,i,r,s,n,a){if(this._isBraking||s<t.finishSpeed){const o=W.calcAcceleration(t.force*Math.cos(n),e,i,r,s,this._entity.mass,this._entity.lengthwiseArea);this.applyVelocityChange(o,a)}}static adjustTurnForBraking(t){return q(t-Math.PI/2)}static adjustTurnForRecovery(t){const e=t-2*Math.PI;return t>Math.abs(e)?e:t}applyTurn(t){t*=nt.VELOCITY_RECOVERY_COEFF*this._entity.mass,Z.rotatePoint(this._entity.velocity,Math.sin(t),Math.cos(t))}determineDribbleSpeed(t){const e=(Math.abs(Math.cos(t))-(i=0))/(1-i)*(1-(r=.95))+r;var i,r;this._entity.velocity.scale(e)}residualMovement(t,e,i){const r=J(this._entity.angle,this._entity.velocity.angle);(this._isDrift||!nt.isStraightMovement(r)&&!nt.isReverseMovement(r))&&(this._isDrift=!0,this.determineDribbleSpeed(r)),this._isBraking=!1,super.residualMovement(t,e,i)}residualAngularMovement(t,e,i){this.updateAngularVelocity(),super.residualAngularMovement(t,e,i),this.incTurretAngle(this._entity.angularVelocity)}}nt.DEFAULT_BULLET_NUM=0,nt.VELOCITY_RECOVERY_COEFF=.017;class at{constructor(){}static extractZIndex(t){return t%at.Z_INDEX_DIVIDER}static checkForMaxValue(t){if(t>=at.MAX_VALUE)throw new Error("Maximum ID is reached.")}static generate(t){for(let e=this.IDs.length;e<=t;e++)at.IDs.push(0);return at.checkForMaxValue(at.IDs[t]),++at.IDs[t]*at.Z_INDEX_DIVIDER+t}}at.Z_INDEX_DIVIDER=1e3,at.MAX_VALUE=Math.floor(Number.MAX_SAFE_INTEGER/at.Z_INDEX_DIVIDER)-1,at.IDs=new Array;class ot{constructor(t,e,i){this._sprite=new Image(t,e),this._sprite.classList.add("sprite"),this._id=at.generate(i)}get width(){return this._sprite.width}get height(){return this._sprite.height}get sprite(){return this._sprite}get id(){return this._id}get point(){return this._point}get angle(){return this._angle}set point(t){this._point=t}set angle(t){this._angle=t}}class lt extends ot{constructor(t,e,i){super(t,e,1),this._opacity=1,this._sprite.src=`src/img/tanks/Effects/Tire Tracks/Tire_Track_Chain_${i}.png`}get opacity(){return this._opacity}set opacity(t){this._opacity=t}}class ht{get value(){return this._value}get prev(){return this._prev}get next(){return this._next}set next(t){this._next=t}set prev(t){this._prev=t}constructor(t){this._prev=null,this._next=null,this._value=t}remove(){null!==this._prev&&(this._prev.next=this._next),null!==this._next&&(this._next.prev=this._prev),this._prev=null,this._next=null}}class ct{constructor(){this._tail=null,this._head=null,this._length=0}get head(){return null!==this._head?this._head.value:null}get tail(){return null!==this._tail?this._tail.value:null}get length(){return this._length}*[Symbol.iterator](){let t=this._head;for(let e=this._length;e>0;e--)yield t.value,t=t.next}applyAndRemove(t,e,i){let r=this._head;for(;null!==r;)if(t(r.value,i),e(r.value)){const t=r;r=r.next,this.removeNode(t)}else r=r.next}isEmpty(){return 0===this._length}remove(t){let e=this._head;for(;null!==e;){if(e.value===t)return void this.removeNode(e);e=e.next}}removeNode(t){t===this._tail&&(this._tail=t.prev),t===this._head&&(this._head=t.next),this._length--,t.remove()}addToHead(t){const e=new ht(t);null===this._head?(this._tail=e,this._head=e):(e.next=this._head,this._head.prev=e,this._head=e),this._length++}addToTail(t){const e=new ht(t);null===this._tail?(this._tail=e,this._head=e):(e.prev=this._tail,this._tail.next=e,this._tail=e),this._length++}removeFromTail(){this._tail===this._head?this.clear():(this._tail=this._tail.prev,this._tail.next=null,this._length--)}removeFromHead(){this._tail===this._head?this.clear():(this._head=this._head.next,this._head.prev=null,this._length--)}moveToTail(t){let e=this._tail;for(;null!==e;){if(e.value===t){if(e!==this._tail){const t=e.prev,i=e.next;null!==t&&(t.next=i),null!==i&&(i.prev=t),e.next=null,e.prev=this._tail,this._tail.next=e,this._tail=e}return}e=e.prev}}moveToHead(t){let e=this._head;for(;null!==e;){if(e.value===t){if(e!==this._head){const t=e.prev,i=e.next;null!==t&&(t.next=i),null!==i&&(i.prev=t),e.next=this._head,e.prev=null,this._head.prev=e,this._head=e}return}e=e.next}}clear(){this._tail=this._head=null,this._length=0}}class _t{constructor(){}static rotateToDefaultSpritePoint(t,e,i,r){const s=t.width>>1,n=t.height>>1;Z.rotatePointAroundTarget(e,new X(e.x+s*r-n*i,e.y+n*r+s*i),-i,r)}static rotateToActualSpritePoint(t,e,i,r){const s=t.width>>1,n=t.height>>1;Z.rotatePointAroundTarget(e,new X(e.x+s,e.y+n),i,r)}static updateSpritePart(t,e,i,r,s){_t.rotateToDefaultSpritePoint(t,e,i,r),_t.setPosAndAngle(t,e,s)}static setPosAndAngle(t,e,i){t.point=e,t.angle=i}static rotateForTurretPoint(t,e,i,r,s,n){const a=t.width>>1,o=t.height>>1;Z.rotatePointAroundTarget(e,new X(e.x+a*r-o*i,e.y+o*r+a*i),s*r-n*i,r*n+i*s)}}class ut extends ot{constructor(t,e,i){super(t,e,1),this._opacity=1,this._sprite.src=`src/img/tanks/Effects/Tire Tracks/Tire_Track_${i}.png`}get opacity(){return this._opacity}set opacity(t){this._opacity=t}}var dt,mt;!function(t){t[t.dirForward=1]="dirForward",t[t.dirRotate=0]="dirRotate",t[t.dirBackward=1]="dirBackward"}(dt||(dt={}));class gt{get chainWidth(){return this._chainWidth}constructor(t,e,i){this._listOfTirePairs=new ct,this._vanishingListOfTirePairs=i,this._storage=t,this._trackWidth=e.width,this._trackHeight=e.height,this._chainWidth=this.calcWidthOfChain(),this._chainHeight=e.height,this._tireTrackType=Math.floor(e.num/2)}calcWidthOfChain(){return this._trackWidth/gt.AMOUNT_OF_CHAINS}static calcPositionOfFirstChain(t,e,i,r,s){return new X(t.x+e*s-i*s,t.y+e*r-i*r)}moveToNextChain(t,e,i){t.x=t.x-this._chainWidth*i,t.y=t.y-this._chainWidth*e}vanishFullTrack(){for(const t of this._listOfTirePairs)this._vanishingListOfTirePairs.addToHead(this._listOfTirePairs.head),this._listOfTirePairs.removeFromHead()}static setAndPosTireTrackPair(t,e,i,r,s,n){const a=e.clone(),o=i.clone();_t.rotateToDefaultSpritePoint(t.topTire,a,s,n),_t.rotateToDefaultSpritePoint(t.bottomTire,o,s,n),_t.setPosAndAngle(t.topTire,a,r),_t.setPosAndAngle(t.bottomTire,o,r)}createTireTrackChainPair(t,e,i,r,s){const n={topTire:new lt(this._chainWidth,this._chainHeight,this._tireTrackType),bottomTire:new lt(this._chainWidth,this._chainHeight,this._tireTrackType)};return this._storage.insert(n.topTire),this._storage.insert(n.bottomTire),gt.setAndPosTireTrackPair(n,t,e,i,r,s),n}createTireTrackPair(t,e,i,r,s){this.vanishFullTrack();const n={topTire:new ut(this._trackWidth,this._trackHeight,this._tireTrackType),bottomTire:new ut(this._trackWidth,this._trackHeight,this._tireTrackType)};this._storage.insert(n.topTire),this._storage.insert(n.bottomTire),gt.setAndPosTireTrackPair(n,t,e,i,r,s),this._listOfTirePairs.addToHead(n)}calcFirstTopBottomChainPoints(t,e,i,r){const s=gt.calcPositionOfFirstChain(e,this._trackWidth,this.chainWidth,i,r),n=t.hullSprite.calcPosition(e,i,r);let a=t.bottomTrackSprite.calcPosition(n,i,r);return a=gt.calcPositionOfFirstChain(a,this._trackWidth,this.chainWidth,i,r),{topFirstChainPoint:s,bottomFirstChainPoint:a}}calcLastTopBottomChainPoints(t,e,i,r){const s=e.clone(),n=t.hullSprite.calcPosition(e,i,r);return{topLastChainPoint:s,bottomLastChainPoint:t.bottomTrackSprite.calcPosition(n,i,r)}}spawnFullTireTrack(t,e,i,r,s){this._topFirstChainPoint=t.clone(),this._bottomFirstChainPoint=e.clone();for(let n=0;n<gt.AMOUNT_OF_CHAINS;n++){const a=this.createTireTrackChainPair(t,e,i,r,s);this._listOfTirePairs.addToHead(a),n===gt.AMOUNT_OF_CHAINS-1&&(this._topLastChainPoint=t.clone(),this._bottomLastChainPoint=e.clone()),this.moveToNextChain(t,r,s),this.moveToNextChain(e,r,s)}}updateAllChainPoints(t,e,i,r){this._topFirstChainPoint=t,this._bottomFirstChainPoint=e,this._topLastChainPoint=i,this._bottomLastChainPoint=r}checkForUpdate(t,e,i,r){const s=j(t,this._topFirstChainPoint),n=j(e,this._bottomFirstChainPoint),a=j(i,this._topLastChainPoint),o=j(r,this._bottomLastChainPoint);return s>=this._chainWidth?{isUpdate:!0,prevPoint:this._topFirstChainPoint,currPoint:t}:n>=this._chainWidth?{isUpdate:!0,prevPoint:this._bottomFirstChainPoint,currPoint:e}:a>=this._chainWidth?{isUpdate:!0,prevPoint:this._topLastChainPoint,currPoint:i}:o>=this._chainWidth?{isUpdate:!0,prevPoint:this._bottomLastChainPoint,currPoint:r}:{isUpdate:!1}}getMovementAngle(t,e){const i=e.x-t.x,r=e.y-t.y;return Math.atan2(r,i)}detectMovementDirection(t,e,i){const r=this.getMovementAngle(t,e);let s=q(i-gt.DIRECTION_ANGLE_DIFFERENCE,-Math.PI,Math.PI),n=q(i+gt.DIRECTION_ANGLE_DIFFERENCE,-Math.PI,Math.PI),a=!1;if(s>=Math.PI/2&&s<=Math.PI&&n>=-Math.PI&&n<=-Math.PI/2&&(a=!0,r>=0?n=q(n,0,2*Math.PI):s=q(s,-2*Math.PI,0)),r>=s&&r<=n||r<=s&&r>=n)return dt.dirForward;{a&&(s<0?(s=q(s,0,2*Math.PI),n=q(n,0,2*Math.PI)):(s=q(s,-2*Math.PI,0),n=q(n,-2*Math.PI,0)));const t=q(r-Math.PI,-Math.PI,Math.PI);return t>=s&&t<=n||t<=s&&t>=n?dt.dirBackward:dt.dirRotate}}forwardUpdate(t,e,i,r,s){const n=this.createTireTrackChainPair(t,e,i,r,s);this._listOfTirePairs.addToTail(n),this._listOfTirePairs.length>gt.AMOUNT_OF_CHAINS&&(this._vanishingListOfTirePairs.addToHead(this._listOfTirePairs.head),this._listOfTirePairs.removeFromHead())}backwardUpdate(t,e,i,r,s){const n=this.createTireTrackChainPair(t,e,i,r,s);this._listOfTirePairs.addToHead(n),this._listOfTirePairs.length>gt.AMOUNT_OF_CHAINS&&(this._vanishingListOfTirePairs.addToHead(this._listOfTirePairs.tail),this._listOfTirePairs.removeFromTail())}}gt.DIRECTION_ANGLE_DIFFERENCE=.6,gt.AMOUNT_OF_CHAINS=10;class Et extends ot{constructor(){super(u.ACCELERATION_SIZE,u.ACCELERATION_SIZE,2),this._frame=0,this._sprite.src="src/img/tanks/Effects/Movement/Movement.png"}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return Et.ORIGINAL_SIZE}get originalHeight(){return Et.ORIGINAL_SIZE}}Et.ORIGINAL_SIZE=256;class pt{constructor(t,e,i){this._topSpriteAccelerationEffect=new Et,this._bottomSpriteAccelerationEffect=new Et,this._counter=0,this._frame=0,this._storage=t,this._indentX=e,this._tankHeight=i}changeFrame(){this._frame===pt.LAST_Frame&&(this._frame=pt.WORKING_Frame),this._counter++,this._counter===pt.THRESHOLD&&(this._counter=0,this._frame++,this._topSpriteAccelerationEffect.frame=this._frame,this._bottomSpriteAccelerationEffect.frame=this._frame)}setPosition(t,e,i,r){0===this._frame&&0===this._counter&&(this._storage.insert(this._topSpriteAccelerationEffect),this._storage.insert(this._bottomSpriteAccelerationEffect)),this.changeFrame();let s=this.calcPosition(t,e,i,28*this._tankHeight/42);_t.updateSpritePart(this._topSpriteAccelerationEffect,s,e,i,r),s=this.calcPosition(t,e,i,37*this._tankHeight/42),_t.updateSpritePart(this._bottomSpriteAccelerationEffect,s,e,i,r)}removeAcceleration(){if(0===this._frame&&0===this._counter)return;this._frame=0,this._counter=0;const t=this._topSpriteAccelerationEffect,e=this._bottomSpriteAccelerationEffect;t.frame=this._frame,e.frame=this._frame,this._storage.remove(this._topSpriteAccelerationEffect),this._storage.remove(this._bottomSpriteAccelerationEffect)}calcPosition(t,e,i,r){return new X(t.x+this._indentX*i-r*e-u.ACCELERATION_SIZE/2*i+u.ACCELERATION_SIZE/1.517*e,t.y+r*i+this._indentX*e-u.ACCELERATION_SIZE/1.517*i-u.ACCELERATION_SIZE/2*e)}}pt.THRESHOLD=7,pt.LAST_Frame=19,pt.WORKING_Frame=10;class Tt{constructor(t,e){this._frame=0,this._counter=0,this._isForwardMovement=!0,this._isResidualMovement=!1,this._minFrameChangeThreshold=[Math.max(Math.round(Tt.MIN_THRESHOLD_COEFF/e.finishSpeed),Tt.MIN_FRAME_CHANGE_THRESHOLD_MINIMUM),Math.max(Math.round(Tt.MIN_THRESHOLD_COEFF/t.finishSpeed),Tt.MIN_FRAME_CHANGE_THRESHOLD_MINIMUM)],this._maxFrameChangeThreshold=[Math.min(Math.round(Tt.MAX_THRESHOLD_COEFF/e.force),Tt.MAX_FRAME_CHANGE_THRESHOLD_MAXIMUM),Math.min(Math.round(Tt.MAX_THRESHOLD_COEFF/t.force),Tt.MAX_FRAME_CHANGE_THRESHOLD_MAXIMUM)],this._currentThreshold=this._maxFrameChangeThreshold[this._isForwardMovement?1:0]}set isForwardMovement(t){this._isResidualMovement=!1,this._isForwardMovement!==t&&(this._isForwardMovement=t,this._currentThreshold=this._maxFrameChangeThreshold[this._isForwardMovement?1:0])}setResidualMovement(){this._isResidualMovement=!0}changeFrame(t,e){this._counter++,this._counter>=this._currentThreshold&&(this._counter=0,this._frame^=1,t.frame=this._frame,e.frame=this._frame,this._isResidualMovement?this._currentThreshold<this._maxFrameChangeThreshold[this._isForwardMovement?1:0]&&this._currentThreshold++:this._currentThreshold>this._minFrameChangeThreshold[this._isForwardMovement?1:0]&&this._currentThreshold--)}stopped(){this._currentThreshold=this._maxFrameChangeThreshold[this._isForwardMovement?1:0]}}Tt.MIN_THRESHOLD_COEFF=17.5,Tt.MAX_THRESHOLD_COEFF=.5,Tt.MIN_FRAME_CHANGE_THRESHOLD_MINIMUM=2,Tt.MAX_FRAME_CHANGE_THRESHOLD_MAXIMUM=30;class At extends ot{constructor(){super(...arguments),this._frame=0,this._isEnded=!1,this._timer=0}changeFrame(t){this._timer+=t,this._timer>=this.UPDATE_TIMER_TIME&&(this._timer-=this.UPDATE_TIMER_TIME,this._frame++,this._frame>this.MAX_FRAME&&(this._frame=this.MAX_FRAME,this._isEnded=!0))}get isEnded(){return this._isEnded}}class It extends At{get UPDATE_TIMER_TIME(){return It.UPDATE_TIMER_TIME}get MAX_FRAME(){return It.MAX_FRAME}constructor(t,e){super(t,e,1),this._sprite.src="src/img/tanks/Effects/Sprites/Sprite_Effects_Smoke.png"}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return It.ORIGINAL_SIZE}get originalHeight(){return It.ORIGINAL_SIZE}}It.UPDATE_TIMER_TIME=60,It.MAX_FRAME=9,It.ORIGINAL_SIZE=496;class St extends It{constructor(t,e){super(t,e)}get scaleX(){return-1}get scaleY(){return 1}calcPosition(t,e,i){return new X(t.x+this.width*e+this.height*i,t.y-this.width*i+this.height*e)}}class Mt extends It{constructor(t,e,i){super(t,e),this._trackHeight=i}calcPosition(t,e,i){return new X(t.x-this._trackHeight*e+this.height*i,t.y+this._trackHeight*i+this.height*e)}}!function(t){t[t.rotLeft=-1]="rotLeft",t[t.rotStraight=0]="rotStraight",t[t.rotRight=1]="rotRight",t[t.rotNoRotate=2]="rotNoRotate"}(mt||(mt={}));class Lt{constructor(t,e,i){this._delayedAngle=0,this._animationManager=t,this._width=e/4,this._height=e/5,this._trackHeight=i}detectRotateDirection(t){(t>=Math.PI/2&&t<=Math.PI&&this._delayedAngle>=-Math.PI&&this._delayedAngle<=-Math.PI/2||this._delayedAngle>=Math.PI/2&&this._delayedAngle<=Math.PI&&t>=-Math.PI&&t<=-Math.PI/2)&&(t=this._delayedAngle>=0?q(t,0,2*Math.PI):q(t,-2*Math.PI,0));const e=t-this._delayedAngle;return e<0&&Math.abs(e)>Lt.UPDATE_SMOKE_DELTA_ANGLE?(this._delayedAngle=q(t,-Math.PI,Math.PI),mt.rotLeft):e>0&&Math.abs(e)>Lt.UPDATE_SMOKE_DELTA_ANGLE?(this._delayedAngle=q(t,-Math.PI,Math.PI),mt.rotRight):mt.rotNoRotate}setPosAndAngle(t,e){const i=Math.sin(e),r=Math.cos(e);_t.rotateToDefaultSpritePoint(this._currAnimation,t,i,r),this._currAnimation.point=t,this._currAnimation.angle=e}addAnimation(){this._animationManager.add(this._currAnimation)}spawnTopSmoke(t,e,i,r){this._currAnimation=new St(this._width,this._height);let s=this._currAnimation.calcPosition(t,i,r);const n=e+1.5708;this.setPosAndAngle(s,n),this.addAnimation()}spawnBottomSmoke(t,e,i,r){this._currAnimation=new Mt(this._width,this._height,this._trackHeight);let s=this._currAnimation.calcPosition(t,i,r);const n=e+1.5708;this.setPosAndAngle(s,n),this.addAnimation()}}Lt.UPDATE_SMOKE_DELTA_ANGLE=.113446;class Ct{constructor(t,e,i){this._tankSpriteParts=t,this._tankTrackEffect=new Tt(e,i)}get getParts(){return Object.values(this._tankSpriteParts)}get tankSpriteParts(){return this._tankSpriteParts}get tankTrackEffect(){return this._tankTrackEffect}get tankTireTrack(){return this._tankTireTrack}spawnTankAcceleration(t,e,i){this._tankAcceleration=new pt(t,e,i)}removeAcceleration(){this._tankAcceleration.removeAcceleration()}spawnTireTracks(t,e,i,r){this._tankTireTrack=new gt(t,this._tankSpriteParts.topTrackSprite,r);const s=Math.sin(i),n=Math.cos(i),{topFirstChainPoint:a,bottomFirstChainPoint:o}=this._tankTireTrack.calcFirstTopBottomChainPoints(this._tankSpriteParts,e,s,n);this._tankTireTrack.spawnFullTireTrack(a,o,i,s,n)}spawnDriftSmoke(t){this._tankDrift=new Lt(t,this._tankSpriteParts.topTrackSprite.width,this._tankSpriteParts.topTrackSprite.height)}updateTireTrack(t,e,i,r){const{topFirstChainPoint:s,bottomFirstChainPoint:n}=this._tankTireTrack.calcFirstTopBottomChainPoints(this._tankSpriteParts,t,i,r),{topLastChainPoint:a,bottomLastChainPoint:o}=this._tankTireTrack.calcLastTopBottomChainPoints(this._tankSpriteParts,t,i,r),{isUpdate:l,prevPoint:h,currPoint:c}=this._tankTireTrack.checkForUpdate(s,n,a,o);if(l){this._tankTireTrack.updateAllChainPoints(s,n,a,o);switch(this._tankTireTrack.detectMovementDirection(h,c,e)){case dt.dirForward:this._tankTireTrack.forwardUpdate(s,n,e,i,r);break;case dt.dirRotate:this._tankTireTrack.createTireTrackPair(a,o,e,i,r);break;case dt.dirBackward:this._tankTireTrack.backwardUpdate(a,o,e,i,r)}}}updateDriftSmoke(t,e,i,r){let s=this._tankSpriteParts.hullSprite.calcPosition(t,i,r);s=this._tankSpriteParts.bottomTrackSprite.calcPosition(s,i,r);switch(this._tankDrift.detectRotateDirection(e)){case mt.rotLeft:this._tankDrift.spawnTopSmoke(t,e,i,r);break;case mt.rotRight:this._tankDrift.spawnBottomSmoke(s,e,i,r)}}updateForwardAction(t,e,i){this._tankTrackEffect.isForwardMovement=!0;const r=Math.sin(e),s=Math.cos(e),n=this._tankSpriteParts.hullSprite.calcPosition(t,r,s);this.updateSprite(t,e,i,r,s,n),this._tankAcceleration.setPosition(n,r,s,e),this.updateTireTrack(t,e,r,s),this.updateDriftSmoke(t,e,r,s)}updateBackwardAction(t,e,i){this._tankTrackEffect.isForwardMovement=!1;const r=Math.sin(e),s=Math.cos(e);this.defaultUpdate(t,e,i,r,s),this.updateTireTrack(t,e,r,s),this.updateDriftSmoke(t,e,r,s)}preUpdateAction(t,e,i){const r=Math.sin(e),s=Math.cos(e);this.updateTireTrack(t,e,r,s),this.updateDriftSmoke(t,e,r,s),this.defaultUpdate(t,e,i,r,s)}updateAfterAction(t,e,i){const r=Math.sin(e),s=Math.cos(e);this.defaultUpdate(t,e,i,r,s)}defaultUpdate(t,e,i,r,s){const n=this._tankSpriteParts.hullSprite.calcPosition(t,r,s);this.updateSprite(t,e,i,r,s,n)}rotateTurretUpdate(t,e,i,r){const s=Math.sin(e),n=Math.cos(e),a=this._tankSpriteParts.turretSprite,o=a.calcPosition(t,i,r),l=o.clone();_t.rotateForTurretPoint(a,l,i,r,s,n),_t.rotateToDefaultSpritePoint(a,o,i,r),_t.setPosAndAngle(a,o,e);let h=this._tankSpriteParts.weaponSprite.calcPosition(l,s,n);_t.updateSpritePart(this._tankSpriteParts.weaponSprite,h,s,n,e)}updateSprite(t,e,i,r,s,n){const a=this._tankSpriteParts.topTrackSprite,o=this._tankSpriteParts.bottomTrackSprite,l=this._tankSpriteParts.hullSprite;let h=a.calcPosition(t);_t.updateSpritePart(a,h,r,s,e),h=l.calcPosition(t,r,s),_t.updateSpritePart(l,h,r,s,e),h=o.calcPosition(n,r,s),_t.updateSpritePart(o,h,r,s,e),this.rotateTurretUpdate(n,i,r,s),this._tankTrackEffect.changeFrame(a,o)}}class wt{constructor(t,e,i,r){this._hull=t,this._track=e,this._turret=i,this._weapon=r}get hull(){return this._hull}get track(){return this._track}get turret(){return this._turret}get weapon(){return this._weapon}}class Rt{constructor(){}static create(t,e,i,r){const s=Rt.createTurret(i),n=Rt.createWeapon(r),a=Rt.createHull(t),o=Rt.createTrack(e);return new wt(a,o,s,n)}static createHull(l){switch(l){case 0:return new t;case 1:return new e;case 2:return new i;case 3:return new r;case 4:return new s;case 5:return new n;case 6:return new a;case 7:return new o;default:throw new Error(`Hull model ${l} was not found`)}}static createTrack(t){switch(t){case 0:return new l;case 1:return new h;case 2:return new c;case 3:return new _;default:throw new Error(`Track model ${t} was not found`)}}static createTurret(t){switch(t){case 0:return new I;case 1:return new S;case 2:return new M;case 3:return new L;case 4:return new C;case 5:return new w;case 6:return new R;case 7:return new f;default:throw new Error(`Turret model ${t} was not found`)}}static createWeapon(t){switch(t){case 0:return new D;case 1:return new P;case 2:return new N;case 3:return new y;case 4:return new k;case 5:return new O;case 6:return new H;case 7:return new v;default:throw new Error(`Weapon model ${t} was not found`)}}}class ft extends ot{get accelerationEffectIndentX(){return this._accelerationEffectIndentX}constructor(t,e){super(u.HULL_WIDTH[e],u.HULL_HEIGHT[e],4),this._accelerationEffectIndentX=u.ACCELERATION_EFFECT_INDENT_X[e],this._sprite.src=`src/img/tanks/Hulls/Hull_${e}/Hull_${t}.png`}calcPosition(t,e,i){return new X(t.x-u.TRACK_INDENT*e,t.y+u.TRACK_INDENT*i)}}class Dt extends ot{static calcHeight(t){return Dt.PROPORTION_WIDTH_HEIGHT*t}get num(){return this._num}constructor(t,e,i){super(e+u.TRACK_INDENT,i,3),this._frame=0,this._num=t,this._sprite.src=`src/img/tanks/Tracks/Track_${t}.png`}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return Dt.ORIGINAL_WIDTH}get originalHeight(){return Dt.ORIGINAL_HEIGHT}}Dt.PROPORTION_WIDTH_HEIGHT=42/246,Dt.ORIGINAL_WIDTH=246,Dt.ORIGINAL_HEIGHT=42;class Pt extends Dt{constructor(t,e){super(t,e,Dt.calcHeight(e))}calcPosition(t){return t.clone()}}class Nt extends Dt{constructor(t,e,i){const r=Dt.calcHeight(e);super(t,e,r),this._deltaHeight=i+u.TRACK_INDENT-r}calcPosition(t,e,i){return new X(t.x-this._deltaHeight*e,t.y+this._deltaHeight*i)}}class yt extends ot{constructor(t,e,i,r){super(u.TURRET_WIDTH[e],u.TURRET_HEIGHT[e],5),this._sprite.src=`src/img/tanks/Turrets/Turret_${e}/Turret_${t}.png`,this._indentX=i,this._indentY=r}calcPosition(t,e,i){return new X(t.x+this._indentX*i-this._indentY*e,t.y+this._indentY*i+this._indentX*e)}}class kt extends ot{constructor(t,e,i){super(u.WEAPON_WIDTH[t],u.WEAPON_HEIGHT[t],5),this._sprite.src=`src/img/tanks/Weapons/Weapon_${t}.png`,this._indentX=e,this._indentY=i}calcPosition(t,e,i){return new X(t.x+this._indentX*i-this._indentY*e,t.y+this._indentY*i+this._indentX*e)}}class Ot{constructor(t,e,i,r,s){this._hullSprite=t,this._bottomTrackSprite=e,this._topTrackSprite=i,this._turretSprite=r,this._weaponSprite=s}get hullSprite(){return this._hullSprite}get bottomTrackSprite(){return this._bottomTrackSprite}get topTrackSprite(){return this._topTrackSprite}get turretSprite(){return this._turretSprite}get weaponSprite(){return this._weaponSprite}}class Ht{constructor(){}static create(t,e,i,r,s){return new Ot(new ft(t,e),new Nt(i,u.HULL_WIDTH[e],u.HULL_HEIGHT[e]),new Pt(i,u.HULL_WIDTH[e]),new yt(t,r,u.TURRET_INDENT_X[e],(u.HULL_HEIGHT[e]>>1)-(u.TURRET_HEIGHT[r]>>1)),new kt(s,9*u.TURRET_WIDTH[r]/10,(u.TURRET_HEIGHT[r]>>1)-(u.WEAPON_HEIGHT[s]>>1)))}}class vt{get model(){return this._model}get sprite(){return this._sprite}get id(){return this._model.entity.id}get tankInfo(){return this._tankInfo}set tankInfo(t){this._tankInfo=t}constructor(t,e,i){this._tankInfo=i;const r=Rt.create(i.hullNum,i.trackNum,i.turretNum,i.weaponNum),s=new et(t,u.getTankEntityWidth(i.hullNum),u.getTankEntityHeight(i.hullNum),e,r.turret.mass+r.hull.mass+r.weapon.mass,it.tankId);this._model=new nt(r,s);const n=r.track;this._sprite=new Ct(Ht.create(i.color,i.hullNum,i.trackNum,i.turretNum,i.weaponNum),n.forwardData,n.backwardData)}spawn(t,e){const i=this._sprite.tankSpriteParts;t.insert(i.topTrackSprite),t.insert(i.bottomTrackSprite),t.insert(i.hullSprite),t.insert(i.weaponSprite),t.insert(i.turretSprite);const r=this._model.entity;e.insert(r),this._sprite.updateAfterAction(r.points[0],r.angle,this._model.turretAngle)}terminate(t,e){const i=this._sprite.tankSpriteParts;this._sprite.tankTireTrack.vanishFullTrack(),t.remove(i.topTrackSprite),t.remove(i.bottomTrackSprite),t.remove(i.hullSprite),t.remove(i.weaponSprite),t.remove(i.turretSprite),e.remove(this._model.entity)}adjustPosition(t,e){this.model.entity.adjustPolygon(t,u.getTankEntityWidth(this._tankInfo.hullNum),u.getTankEntityHeight(this._tankInfo.hullNum),e)}}class Gt{constructor(t,e){this._model=t,this._sprite=e}get model(){return this._model}get sprite(){return this._sprite}get id(){return this._model.entity.id}spawn(t,e){t.insert(this._sprite),e.insert(this._model.entity)}terminate(t,e){t.remove(this._sprite),e.remove(this._model.entity)}}class xt extends ot{constructor(t,e){super(u.WALL_WIDTH[e],u.WALL_HEIGHT[e],3),this._sprite.src=`src/img/blocks/${m[t]}_${g[e]}.png`}updateAfterAction(t,e){t=t.clone(),_t.rotateToDefaultSpritePoint(this,t,Math.sin(e),Math.cos(e)),_t.setPosAndAngle(this,t,e)}}class Ut extends B{constructor(t){super(t,1/0)}get maxHealth(){return 1/0}}class Wt{constructor(){}static createWallsAroundPerimeter(t,e,i,r){const s=new Array,n=this.calcIndent(t,r.width),a=this.calcIndent(e,r.height-2*u.WALL_HEIGHT[0]);return this.createHorWalls(i,n,a,r,s),this.createVertWalls(i,n,a,r,s),{wallsArray:s,point:new X(n,a)}}static calcIndent(t,e){return(e-t*u.WALL_WIDTH[0])/2}static createHorWalls(t,e,i,r,s){for(let n=e;n<=r.width-e-u.WALL_WIDTH[this.RECT_NUM];n+=u.WALL_WIDTH[this.RECT_NUM])s.push(this.createWall(new X(n,i),0,t,this.RECT_NUM)),s.push(this.createWall(new X(n,r.height-u.WALL_HEIGHT[this.RECT_NUM]-i),0,t,this.RECT_NUM))}static createVertWalls(t,e,i,r,s){for(let n=i+u.WALL_HEIGHT[this.RECT_NUM]+(u.WALL_HEIGHT[this.RECT_NUM]>>1);n<=r.height-i-u.WALL_WIDTH[this.RECT_NUM];n+=u.WALL_WIDTH[this.RECT_NUM])s.push(this.createWall(new X(e-(u.WALL_HEIGHT[this.RECT_NUM]>>1),n),this.RAD_90,t,this.RECT_NUM)),s.push(this.createWall(new X(r.width-e-u.WALL_WIDTH[this.RECT_NUM]+(u.WALL_HEIGHT[this.RECT_NUM]>>1),n),this.RAD_90,t,this.RECT_NUM))}static createWall(t,e,i,r,s=!1){const n=s?E[i][r]:1/0,a=new Ut(new et(t,u.WALL_WIDTH[r],u.WALL_HEIGHT[r],e,n,it.wallId)),o=new xt(i,r);return o.point=t,o.angle=e,new Gt(a,o)}}Wt.RAD_90=Math.PI/2,Wt.RECT_NUM=0;class Ft{constructor(){}static calcGridPoints(t){const e={GRID_COLUMNS_AMOUNT:12,GRID_LINES_AMOUNT:6,GRID_COLUMNS:[],GRID_LINES:[]},i=3*u.WALL_WIDTH[0]/2;for(let r=0;r<e.GRID_COLUMNS_AMOUNT;r++)e.GRID_COLUMNS[r]=t.x+r*i;for(let r=0;r<e.GRID_LINES_AMOUNT;r++)e.GRID_LINES[r]=t.y+r*i;return e}static makeHorWallLine(t,e,i,r,s,n,a){if(t.y===n.GRID_LINES[0]||t.y===n.GRID_LINES[n.GRID_LINES.length-1])throw new Error("Horizontal wall line was made on the obstacle!");t.x!==n.GRID_COLUMNS[0]&&i&&s.push(Wt.createWall(t,0,a,1,!1));let o=new X(t.x+u.WALL_WIDTH[1],t.y);for(let i=0;i<e;i++){if(o.x>=n.GRID_COLUMNS[n.GRID_COLUMNS.length-1])throw new Error("Horizontal wall line was made on the obstacle!");s.push(Wt.createWall(new X(o.x,o.y),0,a,0,!1)),o=new X(o.x+u.WALL_WIDTH[0],t.y),i!==e-1?(s.push(Wt.createWall(new X(o.x,o.y),0,a,1,!1)),o=new X(o.x+u.WALL_WIDTH[1],t.y)):t.x+e*(u.WALL_WIDTH[0]+u.WALL_WIDTH[1])<n.GRID_COLUMNS[n.GRID_COLUMNS.length-1]&&r&&s.push(Wt.createWall(new X(o.x,o.y),0,a,1,!1))}}static makeVertWallLine(t,e,i,r,s,n,a){if(t.x===n.GRID_COLUMNS[0]||t.x===n.GRID_COLUMNS[n.GRID_COLUMNS.length-1])throw new Error("Vertical wall line was made on the obstacle!");let o=new X(t.x,t.y);o.y!==n.GRID_LINES[0]&&i&&s.push(Wt.createWall(o,0,a,1,!1)),o=new X(o.x,o.y+u.WALL_HEIGHT[1]);let l=new X(o.x+u.WALL_HEIGHT[0],o.y);Z.rotatePointAroundTarget(l,new X(l.x-u.WALL_HEIGHT[0]/2,l.y+u.WALL_WIDTH[0]/2),Math.sin(-Math.PI/2),Math.cos(-Math.PI/2));for(let i=0;i<e;i++){if(o.y>=n.GRID_LINES[n.GRID_LINES.length-1])throw new Error("Vertical wall line was made on the obstacle!");s.push(Wt.createWall(new X(l.x,l.y),Math.PI/2,a,0,!1)),l=new X(l.x,l.y+u.WALL_WIDTH[0]),o=new X(o.x,o.y+u.WALL_WIDTH[0]),i!==e-1?(s.push(Wt.createWall(new X(o.x,o.y),0,a,1,!1)),o=new X(o.x,o.y+u.WALL_HEIGHT[1]),l=new X(l.x,l.y+u.WALL_HEIGHT[1])):t.y+e*(u.WALL_WIDTH[0]+u.WALL_HEIGHT[1])<n.GRID_LINES[n.GRID_LINES.length-1]&&r&&s.push(Wt.createWall(new X(o.x,o.y),0,a,1,!1))}}static createMazeLvl1(t,e){const i=Ft.calcGridPoints(e),r=new Array;return Ft.makeVertWallLine(new X(i.GRID_COLUMNS[1],i.GRID_LINES[1]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[0],i.GRID_LINES[2]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[1],i.GRID_LINES[3]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[1],i.GRID_LINES[4]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[2],i.GRID_LINES[4]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[2],i.GRID_LINES[0]),3,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[2],i.GRID_LINES[3]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[3],i.GRID_LINES[1]),3,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[3],i.GRID_LINES[2]),2,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[5],i.GRID_LINES[2]),2,!1,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[5],i.GRID_LINES[3]),1,!1,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[4],i.GRID_LINES[4]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[4],i.GRID_LINES[3]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[5],i.GRID_LINES[0]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[4],i.GRID_LINES[1]),3,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[6],i.GRID_LINES[1]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[6],i.GRID_LINES[4]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[8],i.GRID_LINES[1]),2,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[7],i.GRID_LINES[2]),2,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[7],i.GRID_LINES[2]),2,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[9],i.GRID_LINES[2]),1,!1,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[9],i.GRID_LINES[3]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[8],i.GRID_LINES[3]),2,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[8],i.GRID_LINES[4]),1,!1,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[9],i.GRID_LINES[1]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[10],i.GRID_LINES[1]),1,!1,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[10],i.GRID_LINES[2]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[10],i.GRID_LINES[4]),1,!0,!0,r,i,t),r}static createMazeLvl2(t,e){const i=Ft.calcGridPoints(e),r=new Array;return Ft.makeHorWallLine(new X(i.GRID_COLUMNS[0],i.GRID_LINES[1]),2,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[2],i.GRID_LINES[1]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[3],i.GRID_LINES[0]),2,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[3],i.GRID_LINES[2]),2,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[5],i.GRID_LINES[1]),2,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[5],i.GRID_LINES[1]),1,!1,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[5],i.GRID_LINES[3]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[4],i.GRID_LINES[0]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[0],i.GRID_LINES[4]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[1],i.GRID_LINES[2]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[1],i.GRID_LINES[3]),3,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[2],i.GRID_LINES[3]),2,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[7],i.GRID_LINES[0]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[6],i.GRID_LINES[4]),1,!1,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[3],i.GRID_LINES[4]),5,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[7],i.GRID_LINES[2]),2,!1,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[6],i.GRID_LINES[2]),2,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[8],i.GRID_LINES[1]),2,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[9],i.GRID_LINES[0]),3,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[9],i.GRID_LINES[3]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[10],i.GRID_LINES[1]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[10],i.GRID_LINES[2]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[9],i.GRID_LINES[4]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[9],i.GRID_LINES[4]),1,!1,!0,r,i,t),r}static createMazeLvl3(t,e){const i=Ft.calcGridPoints(e),r=new Array;return Ft.makeVertWallLine(new X(i.GRID_COLUMNS[1],i.GRID_LINES[0]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[0],i.GRID_LINES[2]),2,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[0],i.GRID_LINES[4]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[3],i.GRID_LINES[0]),3,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[2],i.GRID_LINES[1]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[1],i.GRID_LINES[3]),2,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[2],i.GRID_LINES[4]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[4],i.GRID_LINES[3]),2,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[3],i.GRID_LINES[4]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[6],i.GRID_LINES[0]),3,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[4],i.GRID_LINES[1]),2,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[6],i.GRID_LINES[2]),3,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[7],i.GRID_LINES[1]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[9],i.GRID_LINES[1]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[9],i.GRID_LINES[1]),1,!1,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[8],i.GRID_LINES[0]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[6],i.GRID_LINES[4]),1,!1,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[5],i.GRID_LINES[4]),3,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[5],i.GRID_LINES[2]),2,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[4],i.GRID_LINES[2]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[7],i.GRID_LINES[3]),1,!0,!0,r,i,t),Ft.makeVertWallLine(new X(i.GRID_COLUMNS[9],i.GRID_LINES[3]),2,!1,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[8],i.GRID_LINES[3]),2,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[10],i.GRID_LINES[2]),1,!0,!0,r,i,t),Ft.makeHorWallLine(new X(i.GRID_COLUMNS[10],i.GRID_LINES[4]),1,!0,!0,r,i,t),r}}class bt extends ot{constructor(t){super(u.BACKGROUND_SIZE,u.BACKGROUND_SIZE,0),this._sprite.src=`src/img/backgrounds/${m[t]}_${st(0,1)}.png`}}class Bt{constructor(){}static fullFillBackground(t,e,i){for(let r=0;r<e.width;r+=u.BACKGROUND_SIZE)for(let s=0;s<e.height;s+=u.BACKGROUND_SIZE)i.insert(this.addBackgroundTile(new X(r,s),t))}static addBackgroundTile(t,e){const i=new bt(e);return i.point=t,i}}class Kt{constructor(){}static dotProduct(t,e){return t.x*e.x+t.y*e.y}static crossProduct(t,e){return t.x*e.y-t.y*e.x}static add(t,e){return new Y(t.x+e.x,t.y+e.y)}static subtract(t,e){return new Y(t.x-e.x,t.y-e.y)}static scale(t,e){return new Y(t.x*e,t.y*e)}static createFromAngleAndLength(t,e){return new Y(e*Math.cos(t),e*Math.sin(t))}static calcCoDirectionalScaleFactor(t,e){return t.x/e.x}static calcScaleFactor(t,e){return t.length/e.length}}class Vt{constructor(){}static hasCollision(t,e){const i=Vt.getAxes(t),r=Vt.getAxes(e);function s(i){for(const r of i){const i=Vt.getProjection(t,r),s=Vt.getProjection(e,r);if(Math.min(i.max-s.min,s.max-i.min)<=0)return!1}return!0}return s(i)&&s(r)}static getCollisionResult(t,e){const i=Vt.getAxes(t),r=Vt.getAxes(e);let s,n,a=Number.MAX_VALUE;function o(r){const o=r===i;for(const i of r){const r=Vt.getProjection(t,i),l=Vt.getProjection(e,i),h=Math.min(r.max-l.min,l.max-r.min);if(h<=0)return!1;h<a&&(a=h,s=i,n=o)}return!0}return o(i)&&o(r)?{collisionPoint:Vt.findClosestVertex(t,e,s,n),overlap:a}:null}static findClosestVertex(t,e,i,r){let s,n;return r?(s=this.getProjection(t,i),n=this.getExtendedProjection(e,i,!1)):(s=this.getProjection(e,i),n=this.getExtendedProjection(t,i,!0)),n.max-s.min<s.max-n.min?n.maxPoint:n.minPoint}static getExtendedProjection(t,e,i){let r=Kt.dotProduct(e,t.points[0]),s=r,n=t.points[0],a=t.points[0];for(let o=1;o<t.points.length;o++){const l=Kt.dotProduct(e,t.points[o]);l<r?(r=l,n=t.points[o]):l>s?(s=l,a=t.points[o]):i&&Math.abs(l-r)<this.EPSILON?n=tt(n,t.points[o]):i&&Math.abs(l-s)<this.EPSILON&&(a=tt(a,t.points[o]))}return{min:r,max:s,minPoint:n,maxPoint:a}}static getAxes(t){const e=new Array,i=t.points.length-1;for(let r=0;r<i;r++)e.push(z.create(t.points[r],t.points[r+1]));return e.push(z.create(t.points[i],t.points[0])),e}static getProjection(t,e){let i=Kt.dotProduct(e,t.points[0]),r=i;for(let s=1;s<t.points.length;s++){const n=Kt.dotProduct(e,t.points[s]);n<i?i=n:n>r&&(r=n)}return{min:i,max:r}}}Vt.EPSILON=1;class Xt{constructor(){}static resolveCollision(t,e){const i=Vt.getCollisionResult(t,e);if(null===i)return null;const r=this.calcCollisionNormal(i.collisionPoint,t.calcCenter()),s=this.calcImpulseMagnitude(t,e,r)+this.calcAngularImpulseMagnitude(t,e);return this.separateEntities(t,i.overlap,r),this.updateAngularVelocity(t,e,i.collisionPoint,s,r),this.updateVelocity(t,e,s,r),i.collisionPoint}static updateAngularVelocity(t,e,i,r,s){const n=this.calcEntityNormal(t),a=Kt.subtract(i,e.calcCenter()),o=Kt.subtract(i,t.calcCenter()),l=Kt.crossProduct(a,s)*r,h=Kt.crossProduct(o,n)*r,c=l/e.momentOfInertia;let _=h/t.momentOfInertia;this.shouldReverseReceiving(e.angle,n.angle)&&(_=-_),e.angularVelocity+=c,t.angularVelocity+=_}static shouldReverseReceiving(t,e){const i=q(t-e,0,Math.PI);return i<Math.PI/2&&i>Math.PI/4||i>=Math.PI/2&&i<3*Math.PI/4}static calcEntityNormal(t){const e=t.angle;return Q(J(e,t.velocity.angle))?new Y(-Math.cos(e),-Math.sin(e)):new Y(Math.cos(e),Math.sin(e))}static updateVelocity(t,e,i,r){const s=Kt.scale(r,-i/t.mass),n=Kt.scale(r,i/e.mass);t.velocity.addVector(s),e.velocity.addVector(n)}static separateEntities(t,e,i){let r=-i.x*e,s=-i.y*e;r+=1===Math.sign(r)?this.CORRECTION_FACTOR:-this.CORRECTION_FACTOR,s+=1===Math.sign(s)?this.CORRECTION_FACTOR:-this.CORRECTION_FACTOR;for(const e of t.points)e.addToCoordinates(r,s);Math.abs(t.angularVelocity)>this.SMALL_ANGULAR_VELOCITY&&(t.angularVelocity-=1===Math.sign(t.angularVelocity)?this.CORRECTION_FACTOR/t.momentOfInertia:-this.CORRECTION_FACTOR/t.momentOfInertia)}static calcImpulseMagnitude(t,e,i){const r=Kt.subtract(t.velocity,e.velocity);return 2*Kt.dotProduct(r,i)/(1/t.mass+1/e.mass)*this.RETENTION_IMPULSE_COEFFICIENT}static calcAngularImpulseMagnitude(t,e){return Math.abs(t.angularVelocity-e.angularVelocity)/(1/t.momentOfInertia+1/e.momentOfInertia)*this.RETENTION_ANGULAR_IMPULSE_COEFFICIENT}static calcCollisionNormal(t,e){const i=Kt.subtract(t,e);return i.normalize(),i}}Xt.RETENTION_IMPULSE_COEFFICIENT=.6,Xt.RETENTION_ANGULAR_IMPULSE_COEFFICIENT=.012,Xt.CORRECTION_FACTOR=.6,Xt.SMALL_ANGULAR_VELOCITY=.001;class Yt{constructor(){this._idForProcessing=new Array}hasForProcessing(){return 0!==this._idForProcessing.length}clear(){this._idForProcessing.length=0}push(t){this._idForProcessing.push(t)}get iterable(){return this._idForProcessing}}class zt{constructor(t){this._collisionDetection=t}hasCollision(t){const e=this._collisionDetection.getCollisions(t);return function(t){for(const e of t)return!0;return!1}(e)?e:null}}class Zt{get wallsForProcessing(){return this._wallsForProcessing}get collisionChecker(){return this._collisionDetector}constructor(t){this._wallsForProcessing=new Yt,this._collisionDetector=new zt(t)}resolveCollision(t){const e=this._collisionDetector.hasCollision(t);if(e){const i=new Array;for(const r of e){const e=Xt.resolveCollision(t,r);e&&(i.push({collisionPoint:e,id:r.id}),this.processCollision(r))}return i}return null}processCollision(t){it.isWall(t.id)&&this._wallsForProcessing.push(t.id)}}class $t{constructor(t,e){this._rectangles=new Array,this._sprites=new Array,this._size=e,this._ctx=t,this._ctx.clearRect(0,0,this._size.width,this._size.height),this._bufferCanvas=document.createElement("canvas"),this._bufferCanvas.width=e.width,this._bufferCanvas.height=e.height,this._bufferCtx=this._bufferCanvas.getContext("2d")}get ctx(){return this._ctx}insert(t){const e=at.extractZIndex(t.id);for(let t=this._sprites.length;t<=e;t++)this._sprites.push(new Map);this._sprites[e].set(t.id,t)}remove(t){this.removeById(t)}removeById(t){const e=at.extractZIndex(t.id);this._sprites[e].delete(t.id)}drawAll(){this._bufferCtx.clearRect(0,0,this._size.width,this._size.height);for(const t of this._sprites)for(const e of t.values())this.draw(e);this.drawAdditionalShapes(),this._ctx.drawImage(this._bufferCanvas,0,0)}drawAdditionalShapes(){this.drawRectangles(),this._rectangles.length=0}drawRectangles(){for(const t of this._rectangles)this._bufferCtx.fillStyle=t.color,this._bufferCtx.fillRect(t.point.x,t.point.y,t.width,t.height)}addRectangle(t){this._rectangles.push(t)}clear(){this._sprites.length=0,this._rectangles.length=0}draw(t){this._bufferCtx.save();const e=t.width/2,i=t.height/2;"opacity"in t&&(this._bufferCtx.globalAlpha=t.opacity),this._bufferCtx.translate(t.point.x+e,t.point.y+i),this._bufferCtx.rotate(t.angle),function(t){return"scaleX"in t&&"scaleY"in t}(t)&&this._bufferCtx.scale(t.scaleX,t.scaleY),!function(t){return"frame"in t&&"originalWidth"in t&&"originalHeight"in t}(t)?this._bufferCtx.drawImage(t.sprite,-e,-i,t.width,t.height):this._bufferCtx.drawImage(t.sprite,t.frame*t.originalWidth,0,t.originalWidth,t.originalHeight,-e,-i,t.width,t.height),this._bufferCtx.restore()}}class jt{constructor(t,e,i,r){this._boundary={xStart:t,yStart:e,xLast:i,yLast:r},this._root=new qt(this._boundary)}insert(t){this._root.insert(t)}getCollisions(t){return this._root.getCollisions(t)}remove(t){this._root.remove(t)}clear(){this._root=new qt(this._boundary)}}class qt{constructor(t){this._totalPolygons=0,this._polygons=new Map,this._children=null,this._boundary=t}isSubdivide(){return null===this._polygons}subdivide(){const t=this._boundary.xStart,e=this._boundary.yStart,i=this._boundary.xLast,r=this._boundary.yLast,s=(i-t)/2,n=(r-e)/2;this._children=[new qt({xStart:t,yStart:e,xLast:t+s,yLast:e+n}),new qt({xStart:t+s,yStart:e,xLast:i,yLast:e+n}),new qt({xStart:t,yStart:e+n,xLast:t+s,yLast:r}),new qt({xStart:t+s,yStart:e+n,xLast:i,yLast:r})],this.redistribute()}redistribute(){this._totalPolygons=0;for(const t of this._children){for(const e of this._polygons.values())t.insert(e);this._totalPolygons+=t._totalPolygons}this._polygons=null}insert(t){if(this.isContainsPolygon(t))if(this.isSubdivide()){this._totalPolygons=0;for(const e of this._children)e.insert(t),this._totalPolygons+=e._totalPolygons}else this._totalPolygons++,this._polygons.set(t.id,t),this._polygons.size>qt.CAPACITY&&this.subdivide()}remove(t){if(this.isContainsPolygon(t))if(this.isSubdivide()){this._totalPolygons=0;for(const e of this._children)e.remove(t),this._totalPolygons+=e._totalPolygons;this._totalPolygons<=qt.HALF_CAPACITY&&this.mergeWithChildren()}else this._totalPolygons--,this._polygons.delete(t.id)}getCollisions(t){const e=new Array;if(this.isSubdivide())for(const i of this._children)i.isContainsPolygon(t)&&e.push(...i.getCollisions(t));else for(const i of this._polygons.values())Vt.hasCollision(t,i)&&e.push(i);return e}isContainsPolygon(t){for(const e of t.points)if(this.isContainsPoint(e))return!0;return!1}isContainsPoint(t){return t.x>this._boundary.xStart&&t.x<this._boundary.xLast&&t.y>this._boundary.yStart&&t.y<this._boundary.yLast}mergeWithChildren(){this._polygons=new Map;for(const t of this._children){t.isSubdivide()&&t.mergeWithChildren();for(const e of t._polygons.values())this._polygons.set(e.id,e)}this._totalPolygons=this._polygons.size,this._children=null}}qt.CAPACITY=8,qt.HALF_CAPACITY=qt.CAPACITY>>1;class Qt{set resistanceCoeff(t){this._resistanceCoeff=t}set airResistanceCoeff(t){this._airResistanceCoeff=t}constructor(t,e){this._resistanceCoeff=0,this._airResistanceCoeff=0,this._entityStorage=t,this._collisionResolver=e}get entityStorage(){return this._entityStorage}get collisionResolver(){return this._collisionResolver}}class Jt extends Qt{residualMovement(t,e){const i=t.sprite;t.model.isIdle()?i.tankTrackEffect.stopped():(i.tankTrackEffect.setResidualMovement(),this.hullUpdate(t,t.model.residualMovement,$.movement,t.sprite.preUpdateAction,e))}residualAngularMovement(t,e){t.model.isAngularMotionStopped()||this.hullUpdate(t,t.model.residualAngularMovement,$.angularMovement,t.sprite.preUpdateAction,e)}turretCounterclockwiseMovement(t,e){t.model.turretCounterclockwiseMovement(e),Jt.turretUpdate(t)}turretClockwiseMovement(t,e){t.model.turretClockwiseMovement(e),Jt.turretUpdate(t)}counterclockwiseMovement(t,e){this.hullUpdate(t,t.model.counterclockwiseMovement,$.angularMovement,t.sprite.preUpdateAction,e)}clockwiseMovement(t,e){this.hullUpdate(t,t.model.clockwiseMovement,$.angularMovement,t.sprite.preUpdateAction,e)}forwardMovement(t,e){this.hullUpdate(t,t.model.forwardMovement,$.movement,t.sprite.updateForwardAction,e)}backwardMovement(t,e){this.hullUpdate(t,t.model.backwardMovement,$.movement,t.sprite.updateBackwardAction,e)}hullUpdate(t,e,i,r,s){const n=t.model.entity;this._entityStorage.remove(n),e.call(t.model,this._resistanceCoeff,this._airResistanceCoeff,s),i(n),this._collisionResolver.resolveCollision(n)&&t.sprite.removeAcceleration(),r.call(t.sprite,n.points[0],n.angle,t.model.turretAngle),this._entityStorage.insert(n)}static turretUpdate(t){const e=t.model,i=e.entity.angle,r=Math.sin(i),s=Math.cos(i);t.sprite.rotateTurretUpdate(t.sprite.tankSpriteParts.hullSprite.calcPosition(e.entity.points[0],r,s),e.turretAngle,r,s)}}class te{constructor(){this._keys=new Set,this.handleKeyDown=t=>{this._keys.add(t.keyCode)},this.handleKeyUp=t=>{this._keys.delete(t.keyCode)}}addEventListeners(){document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("keyup",this.handleKeyUp)}clearKeys(){this._keys.clear()}isKeyDown(t){return this._keys.has(t)}removeEventListeners(){document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("keyup",this.handleKeyUp)}}class ee extends Qt{constructor(t,e){super(t,e)}get collisionResolver(){return this._collisionResolver}residualAngularMovement(t,e){t.model.isAngularMotionStopped()||this.update(t,t.model.residualAngularMovement,$.angularMovement,e)}residualMovement(t,e){t.model.isIdle()||this.update(t,t.model.residualMovement,$.movement,e)}update(t,e,i,r){const s=t.model.entity;this._entityStorage.remove(s),e.call(t.model,this._resistanceCoeff,this._airResistanceCoeff,r),i(s),this._collisionResolver.resolveCollision(s),t.sprite.updateAfterAction(s.points[0],s.angle),this._entityStorage.insert(s)}isCompleteMotion(t){return t.model.isAngularMotionStopped()&&t.model.isIdle()}movement(t,e){this.residualAngularMovement(t,e),this.residualMovement(t,e)}}class ie{constructor(t,e,i,r){this._movementManager=t,this._spriteStorage=e,this._elements=i,this._isResponsibleFor=r}get movementManager(){return this._movementManager}get isResponsibleFor(){return this._isResponsibleFor}get(t){return this._elements.has(t)?this._elements.get(t):null}add(t){for(const e of t)this._elements.has(e.id)||(this._elements.set(e.id,e),e.spawn(this._spriteStorage,this._movementManager.entityStorage))}delete(t){this._elements.has(t.id)&&(this._elements.delete(t.id),t.terminate(this._spriteStorage,this._movementManager.entityStorage))}}class re{constructor(t){this._vanishingListOfTirePairs=new ct,this.tanksAmount=0,this._storage=t}get vanishingListOfTirePairs(){return this.tanksAmount++,this._vanishingListOfTirePairs}removeTireTrackPair(t){this._storage.remove(t.topTire),this._storage.remove(t.bottomTire)}reduceOpacity(){let t=0;for(const e of this._vanishingListOfTirePairs){const i=this._vanishingListOfTirePairs.length*re.MIN_REDUCING_OPACITY_NUMBER/this.tanksAmount;e.topTire.opacity-=i,e.bottomTire.opacity-=i,e.topTire.opacity<=0&&t++}for(;t>0;t--)this.removeTireTrackPair(this._vanishingListOfTirePairs.tail),this._vanishingListOfTirePairs.removeFromTail()}}re.MIN_REDUCING_OPACITY_NUMBER=1e-4;class se extends At{get UPDATE_TIMER_TIME(){return se.UPDATE_TIMER_TIME}get MAX_FRAME(){return se.MAX_FRAME}constructor(t,e){super(u.EXPLOSION_SIZE,u.EXPLOSION_SIZE,1),this._sprite.src="src/img/tanks/Effects/Sprites/Sprite_Effects_Explosion.png",this._point=new X(t.x-u.EXPLOSION_SIZE/2,t.y-u.EXPLOSION_SIZE/2),this._angle=e}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return se.ORIGINAL_SIZE}get originalHeight(){return se.ORIGINAL_SIZE}}se.UPDATE_TIMER_TIME=90,se.MAX_FRAME=8,se.ORIGINAL_SIZE=256;class ne extends At{get UPDATE_TIMER_TIME(){return ne.UPDATE_TIMER_TIME}get MAX_FRAME(){return ne.MAX_FRAME}constructor(t,e,i,r,s){super(i,r,1),this._sprite.src=`src/img/tanks/Effects/Sprites/Sprite_Fire_Shots_Impact_${0===s?0:1}.png`;const n=new X(t.x+r/2*Math.sin(e),t.y-r/2*Math.cos(e));_t.rotateToDefaultSpritePoint(this,n,Math.sin(e),Math.cos(e)),this._point=n,this._angle=e}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return ne.ORIGINAL_WIDTH}get originalHeight(){return ne.ORIGINAL_HEIGHT}}ne.UPDATE_TIMER_TIME=70,ne.MAX_FRAME=3,ne.ORIGINAL_WIDTH=120,ne.ORIGINAL_HEIGHT=205;class ae extends At{get UPDATE_TIMER_TIME(){return ae.UPDATE_TIMER_TIME}get MAX_FRAME(){return ae.MAX_FRAME}constructor(t,e,i,r,s){super(i,r,1),this._sprite.src=`src/img/tanks/Effects/Sprites/Sprite_Fire_Shots_Shot_${0===s?0:1}.png`;const n=new X(t.x+r/2*Math.sin(e),t.y-r/2*Math.cos(e));_t.rotateToDefaultSpritePoint(this,n,Math.sin(e),Math.cos(e)),this._point=n,this._angle=e}set frame(t){this._frame=t}get frame(){return this._frame}get originalWidth(){return ae.ORIGINAL_WIDTH}get originalHeight(){return ae.ORIGINAL_HEIGHT}}ae.UPDATE_TIMER_TIME=45,ae.MAX_FRAME=3,ae.ORIGINAL_WIDTH=135,ae.ORIGINAL_HEIGHT=202;class oe{static playDeathAnimation(t,e){if(it.isWall(e.id),it.isTank(e.id))return new se(e.model.entity.calcCenter(),st(-Math.PI,Math.PI));if(it.isBullet(e.id)){const i=e;return this.playImpactAnimation(t,i.model.entity.angle+Math.PI,i.sprite.num)}}static playImpactAnimation(t,e,i){return new ne(t,e,5*u.BULLET_WIDTH[i],5*u.BULLET_HEIGHT[i],i)}static playShootAnimation(t,e,i){return new ae(t,e,5*u.BULLET_WIDTH[i],5*u.BULLET_HEIGHT[i],i)}}class le{constructor(t){this._animationManager=t}get animationManager(){return this._animationManager}createImpactAnimation(t,e){this._animationManager.add(oe.playImpactAnimation(t,e.model.entity.angle+Math.PI,e.sprite.num))}createDeadAnimation(t,e){this._animationManager.add(oe.playDeathAnimation(t,e))}}class he{constructor(t){this._animationManager=t}get animationManager(){return this._animationManager}createShootAnimation(t,e){this._animationManager.add(oe.playShootAnimation(tt(t.entity.points[0],t.entity.points[3]),t.entity.angle,e))}}class ce extends ot{get num(){return this._num}constructor(t){super(u.BULLET_WIDTH[t],u.BULLET_HEIGHT[t],3),this._sprite.src=`src/img/tanks/Bullets/Bullet_${t}.png`,this._num=t}updateAfterAction(t,e){t=t.clone(),_t.rotateToDefaultSpritePoint(this,t,Math.sin(e),Math.cos(e)),_t.setPosAndAngle(this,t,e)}}class _e{constructor(t,e,i){this._model=t,this._sprite=new ce(e),this._source=i}get id(){return this._model.entity.id}get model(){return this._model}get sprite(){return this._sprite}spawn(t,e){t.insert(this._sprite),e.insert(this._model.entity)}terminate(t,e){t.remove(this._sprite),e.remove(this._model.entity)}get source(){return this._source}}class ue extends ie{constructor(t,e,i,r,s,n,a){super(t,e,i,it.isTank),this._addBulletElement=r,this._KeyHandler=n,this._tankAnimator=new he(s),this._tireTracksManager=new re(e),this._bonusCollisionManager=a}handle(t){this._tireTracksManager.reduceOpacity();for(const e of this._elements.values()){const i=e.tankInfo.control;let r=this._KeyHandler.isKeyDown(i.turretClockwiseKey),s=this._KeyHandler.isKeyDown(i.turretCounterClockwiseKey);if((r&&!s||!r&&s)&&(r?this._movementManager.turretClockwiseMovement(e,t):s&&this._movementManager.turretCounterclockwiseMovement(e,t)),r=this._KeyHandler.isKeyDown(i.forwardKey),s=this._KeyHandler.isKeyDown(i.backwardKey),r&&!s||!r&&s?r?this._movementManager.forwardMovement(e,t):s&&(e.sprite.removeAcceleration(),this._movementManager.backwardMovement(e,t)):(e.sprite.removeAcceleration(),this._movementManager.residualMovement(e,t)),r=this._KeyHandler.isKeyDown(i.hullClockwiseKey),s=this._KeyHandler.isKeyDown(i.hullCounterClockwiseKey),r&&!s||!r&&s?r?this._movementManager.clockwiseMovement(e,t):s&&this._movementManager.counterclockwiseMovement(e,t):this._movementManager.residualAngularMovement(e,t),r=this._KeyHandler.isKeyDown(i.shootKey),r){const t=e.model.shot();if(t){const i=e.model.bulletNum;this._tankAnimator.createShootAnimation(t,i),this._addBulletElement.addElement(new _e(t,i,e))}}this._bonusCollisionManager.checkForBonusHits(e)}}add(t){super.add(t);for(const e of t){const t=e.sprite,i=e.model.entity;t.spawnTireTracks(this._spriteStorage,i.points[0],i.angle,this._tireTracksManager.vanishingListOfTirePairs),t.spawnDriftSmoke(this._tankAnimator.animationManager);const r=t.tankSpriteParts.hullSprite;t.spawnTankAcceleration(this._spriteStorage,r.accelerationEffectIndentX,r.height)}}}class de extends ie{constructor(t,e,i){super(t,e,i,it.isWall),this._wallToProcess=new ct,this.action=(t,e)=>this._movementManager.movement(t,e),this.removalCondition=t=>this._movementManager.isCompleteMotion(t)}addToProcess(){const t=this._movementManager.collisionResolver.wallsForProcessing;if(t.hasForProcessing()){for(const e of t.iterable)this._wallToProcess.addToTail(this._elements.get(e));t.clear()}}handle(t){this.addToProcess(),this._wallToProcess.isEmpty()||this._wallToProcess.applyAndRemove(this.action,this.removalCondition,t)}}class me{constructor(t){this._animationList=new ct,this.action=(t,e)=>t.changeFrame(e),this.removalCondition=t=>(t.isEnded&&this._storage.removeById(t),t.isEnded),this._storage=t}add(t){this._storage.insert(t),this._animationList.addToTail(t)}handle(t){this._animationList.isEmpty()||this._animationList.applyAndRemove(this.action,this.removalCondition,t)}}class ge extends ie{constructor(t,e,i,r,s,n,a){super(t,e,i,it.isBullet),this._handlingManagers=r,this._bulletAnimator=new le(s),this._killProcessor=n,this._healthManager=a}handle(t){if(0!==this._elements.size){const e=new Array;for(const i of this._elements.values())this._movementManager.movement(i,t),this._movementManager.hasResidualMovement(i)||e.push(i);for(const t of e)this.delete(t)}this._movementManager.bulletCollisionDates.hasForProcessing()&&this.handleBulletCollisions()}handleBulletCollisions(){for(const t of this._movementManager.bulletCollisionDates.iterable){for(const e of t.collisionPacks){this._bulletAnimator.createImpactAnimation(e.collisionPoint,t.bulletElement);const i=e.id,r=this.getElementHandling(i),s=r.get(i);s&&(s.model.takeDamage(t.bulletElement.model),s.model.isDead()?(r.delete(s),this._bulletAnimator.createDeadAnimation(e.collisionPoint,s),this._healthManager.remove(s.model),this._killProcessor.processKill(t.bulletElement.source,s)):this._healthManager.add(s.model))}this.delete(t.bulletElement),this._healthManager.remove(t.bulletElement.model)}this._movementManager.bulletCollisionDates.clear()}getElementHandling(t){for(const e of this._handlingManagers)if(e.isResponsibleFor(t))return e}}class Ee{constructor(t,e,i){this._elements=t,this._storage=e,this._bulletMovementManager=i}addElement(t){this._elements.has(t.id)||this._bulletMovementManager.checkForSpawn(t)&&(this._elements.set(t.id,t),t.spawn(this._storage,this._bulletMovementManager.entityStorage))}}class pe{constructor(){}static movePolygon(t,e){for(const i of t.points)i.addToCoordinates(e.x,e.y)}static rotatePolygon(t,e){const i=Math.sin(e),r=Math.cos(e),s=t.calcCenter();for(const e of t.points)Z.rotatePointAroundTarget(e,s,i,r)}}class Te extends Qt{constructor(){super(...arguments),this._bulletCollisionDates=new Yt}get bulletCollisionDates(){return this._bulletCollisionDates}hasResidualMovement(t){return!t.model.isIdle()}movement(t,e){t.model.isIdle()||this.update(t,e)}update(t,e){const i=t.model.entity;this._entityStorage.remove(i),t.model.residualMovement(this._airResistanceCoeff,e);const r=Kt.createFromAngleAndLength(i.velocity.angle,i.movementLength);let s=!1;const n=Math.floor(Kt.calcCoDirectionalScaleFactor(i.velocity,r));for(let e=n;e>0;e--){pe.movePolygon(i,r);const e=this._collisionResolver.resolveCollision(i);if(e){this._bulletCollisionDates.push({bulletElement:t,collisionPacks:e}),s=!0;break}}if(!s){r.scale(-n),r.addVector(i.velocity),pe.movePolygon(i,r);const e=this._collisionResolver.resolveCollision(i);e&&this._bulletCollisionDates.push({bulletElement:t,collisionPacks:e})}t.sprite.updateAfterAction(i.points[0],i.angle),this._entityStorage.insert(i)}checkForSpawn(t){const e=t.model.entity,i=this._collisionResolver.resolveCollision(e);return i?(this._bulletCollisionDates.push({bulletElement:t,collisionPacks:i}),!1):(t.sprite.updateAfterAction(e.points[0],e.angle),!0)}}class Ae{constructor(){this._executioners=new Array}add(...t){this._executioners.push(...t)}renderAll(t){for(const e of this._executioners)e.handle(t)}}class Ie{constructor(t){this._isGameLoopActive=!1,this._lastFrameTime=performance.now(),this._render=new Ae,this.gameLoop=()=>{if(!this._isGameLoopActive)return;const t=performance.now();this._render.renderAll(t-this._lastFrameTime),this._drawable.drawAll(),this._lastFrameTime=t,requestAnimationFrame(this.gameLoop)},this._drawable=t}get render(){return this._render}start(){this._isGameLoopActive||(this._isGameLoopActive=!0,requestAnimationFrame(this.gameLoop))}stop(){this._isGameLoopActive=!1}}class Se{get collisionChecker(){return this._collisionDetector}constructor(t,e,i){this._items=new Map,this._spriteStorage=t;const r=new jt(0,0,i.width,i.height);this._collectibleStorage=r,this._collisionDetector=new zt(r),this._bonusManager=e}addElements(t){for(const e of t)this.addElement(e)}addElement(t){this._items.has(t.id)||(this._items.set(t.id,t),t.spawn(this._spriteStorage,this._collectibleStorage))}checkForBonusHits(t){const e=this._collisionDetector.hasCollision(t.model.entity);if(e)for(const i of e)this._bonusManager.addBonus(t,i.bonus)&&this.delete(this._items.get(i.id))}delete(t){this._items.delete(t.id),t.terminate(this._spriteStorage,this._collectibleStorage)}}class Me{get point(){return this._point}get width(){return this._width}get height(){return this._height}get color(){return this._color}constructor(t,e,i,r){this._point=t,this._width=e,this._height=i,this._color=r}}class Le{constructor(t){this._drawList=new Map,this._shapeAdder=t}add(t){t.maxHealth!==1/0&&this._drawList.set(t.entity.id,t)}remove(t){this._drawList.delete(t.entity.id)}handle(){this.drawBars()}drawBars(){for(const t of this._drawList.values())this.drawBar(t)}drawBar(t){const e=this.calculateTankWidth(t),i=e/t.maxHealth*t.health,r=j(t.entity.points[1],t.entity.points[2]),s=t.entity.calcCenter(),n=new X(s.x-i/2,s.y-1.5*r);var a;this.drawHealthBar(n,i,this.getHealthColor(t)),"armor"in(a=t)&&"armorStrength"in a&&"maxArmor"in a&&this.drawArmorBar(t,e,n)}calculateTankWidth(t){return 1.15*j(t.entity.points[0],t.entity.points[1])}getHealthColor(t){return t.health>.4*t.maxHealth?"green":t.health>.15*t.maxHealth&&t.health<=.4*t.maxHealth?"yellow":"red"}drawHealthBar(t,e,i){this._shapeAdder.addRectangle(new Me(t,e,u.HEALTH_BAR_HEIGHT,i))}drawArmorBar(t,e,i){const r=e/t.maxArmor*t.armor,s=t.entity.calcCenter(),n=new X(s.x-r/2,i.y+u.HEALTH_BAR_HEIGHT+u.HEALTH_ARMOR_BAR_INDENT_Y);this._shapeAdder.addRectangle(new Me(n,r,u.ARMOR_BAR_HEIGHT,"blue"))}}class Ce{get modelCollisionManager(){return this._modelCollisionManager}get itemCollisionManager(){return this._itemCollisionManager}get size(){return this._size}get ctx(){return this._canvas.ctx}constructor(t,e,i){this._handlingManagers=new Array,this._keyHandler=new te,this.handleVisibilityChange=()=>{document.hidden?(this._gameLoop.stop(),this._keyHandler.clearKeys()):this._gameLoop.start()},this._size=e,this._canvas=new $t(t,this._size),this._gameLoop=new Ie(this._canvas),this._animationManager=new me(this._canvas),this._healthDrawManager=new Le(this._canvas);const r=new jt(0,0,this._size.width,this._size.height);this._modelCollisionManager=new Zt(r);const s=new Map,n=new Map,a=new Map,o=new Jt(r,this._modelCollisionManager),l=new ee(r,this._modelCollisionManager),h=new Te(r,this._modelCollisionManager),c=new Ee(a,this._canvas,h);this._itemCollisionManager=new Se(this._canvas,i,this._size),this._tankHandlingManagers=new ue(o,this._canvas,s,c,this._animationManager,this._keyHandler,this._itemCollisionManager),this._wallHandlingManagers=new de(l,this._canvas,n),this._bulletHandlingManager=new ge(h,this._canvas,a,this._handlingManagers,this._animationManager,i,this._healthDrawManager),this._handlingManagers.push(this._tankHandlingManagers,this._wallHandlingManagers,this._bulletHandlingManager),this._gameLoop.render.add(...this._handlingManagers,this._animationManager,this._healthDrawManager),this._gameLoop.start()}addEventListeners(){this._keyHandler.addEventListeners(),document.addEventListener("visibilitychange",this.handleVisibilityChange)}removeEventListeners(){this._keyHandler.removeEventListeners(),document.removeEventListener("visibilitychange",this.handleVisibilityChange)}setBackgroundMaterial(t){this.setCoefficients(t),this.createBackgroundSprites(t)}setCoefficients(t){for(const e of this._handlingManagers)e.movementManager.resistanceCoeff=p[t],e.movementManager.airResistanceCoeff=15e-7}createBackgroundSprites(t){Bt.fullFillBackground(t,this._size,this._canvas)}addWallElements(t){this._wallHandlingManagers.add(t)}addTankElements(...t){this._tankHandlingManagers.add(t);for(const e of t)this._healthDrawManager.add(e.model)}addBonuses(...t){this._itemCollisionManager.addElements(t)}addExecutioners(...t){this._gameLoop.render.add(...t)}finishGame(){this._gameLoop.stop(),this.ctx.clearRect(0,0,this._size.width,this._size.height)}}class we{constructor(t,e){this._collectible=t,this._sprite=e}get id(){return this._collectible.id}get collectible(){return this._collectible}get sprite(){return this._sprite}spawn(t,e){t.insert(this._sprite),e.insert(this._collectible)}terminate(t,e){t.remove(this._sprite),e.remove(this._collectible)}adjustPosition(t,e){this._collectible.adjustPolygon(t,this._sprite.width,this._sprite.height,e),this._sprite.point=t,this._sprite.angle=e}}class Re{constructor(t,e,i,r,s,n){this._id=s,this._bonus=n,this.adjustPolygon(t,e,i,r)}get bonus(){return this._bonus}get id(){return this._id}get points(){return this._points}calcCenter(){return tt(this._points[0],this._points[2])}adjustPolygon(t,e,i,r){this._points=[t.clone(),new X(t.x+e,t.y),new X(t.x+e,t.y+i),new X(t.x,t.y+i)],0!==r&&pe.rotatePolygon(this,r)}}class fe extends ot{constructor(t,e){super(u.KEY_SIZE,u.KEY_SIZE,6),this._scaleX=1,this._isIncreasing=!1,this._point=t,this._angle=e,this._sprite.src="src/img/item/Key.png"}get scaleX(){return this._isIncreasing?(this._scaleX+=fe.CHANGE_SCALE_X_NUMBER,this._scaleX>=1&&(this._isIncreasing=!1)):(this._scaleX-=fe.CHANGE_SCALE_X_NUMBER,this._scaleX<=-1&&(this._isIncreasing=!0)),this._scaleX}get scaleY(){return 1}}fe.CHANGE_SCALE_X_NUMBER=.01;class De extends ot{constructor(t,e,i){switch(super(u.BOX_SIZE,u.BOX_SIZE,6),this._point=e,this._angle=i,t){case A.bulLight:this._sprite.src="src/img/item/Light_Bullet_Box.png";break;case A.bulMedium:this._sprite.src="src/img/item/Medium_Bullet_Box.png";break;case A.bulHeavy:this._sprite.src="src/img/item/Heavy_Bullet_Box.png";break;case A.bulGrenade:this._sprite.src="src/img/item/Grenade_Bullet_Box.png";break;case A.bulSniper:this._sprite.src="src/img/item/Sniper_Bullet_Box.png";break;default:throw new Error(`Unsupported bulletType: ${t}`)}}}class Pe{constructor(){}static create(t,e,i){const r=it.collectibleItemId;switch(t){case A.key:return new we(new Re(e,u.KEY_SIZE,u.KEY_SIZE,i,r,t),new fe(e,i));case A.bulLight:case A.bulMedium:case A.bulHeavy:case A.bulSniper:case A.bulGrenade:return new we(new Re(e,u.BOX_SIZE,u.BOX_SIZE,i,r,t),new De(t,e,i))}}}class Ne{constructor(t,e){this._ammoSpawnInterval=5e3,this._timer=0,this._spawnPoints=t,this._collectibleItemManager=e}handle(t){this._timer+=t,this._timer>=this._ammoSpawnInterval&&(this.spawnRandomBox(this.getRandomBox(),this._spawnPoints.getRandomSpawnPoint(u.BOX_SIZE,u.BOX_SIZE)),this._timer=0,this._ammoSpawnInterval<Ne.MAX_AMMO_SPAWN_INTERVAL&&(this._ammoSpawnInterval+=st(1e3,5e3)))}getRandomBox(){const t=st(1,100);return t<40?A.bulMedium:t<70?A.bulHeavy:A.bulGrenade}spawnRandomBox(t,e){const i=Pe.create(t,e,0);for(let t=0;t<Ne.RESPAWN_TRYS_AMOUNT;t++){if(!this._collectibleItemManager.collisionChecker.hasCollision(i.collectible)){this._collectibleItemManager.addElement(i);break}i.adjustPosition(this._spawnPoints.getRandomSpawnPoint(u.BOX_SIZE,u.BOX_SIZE),0)}}randomSpawn(t,e,i,r,s,n,a){const o=Pe.create(t,this._spawnPoints.getRandomSpawnPoint(e,i,r,s,n,a),0);for(let t=0;t<Ne.RESPAWN_TRYS_AMOUNT;t++){if(!this._collectibleItemManager.collisionChecker.hasCollision(o.collectible))return void this._collectibleItemManager.addElement(o);o.adjustPosition(this._spawnPoints.getRandomSpawnPoint(e,i,r,s,n,a),0)}throw new Error("Failed to spawn all the keys")}spawn(t,e,i,r,s){const n=Pe.create(t,this._spawnPoints.getSpawnPoint(e,i,r,s),0);this._collectibleItemManager.addElement(n)}}Ne.MAX_AMMO_SPAWN_INTERVAL=6e4,Ne.RESPAWN_TRYS_AMOUNT=5;class ye{constructor(t,e,i){this._spawnPoints=[],this._spawnGridsLinesAmount=e,this._spawnGridsColumnsAmount=i,this.calcSpawnPoints(t)}calcSpawnPoints(t){const e=new X(t.x+u.WALL_WIDTH[0],t.y+u.WALL_HEIGHT[0]+u.WALL_WIDTH[0]/2),i=u.WALL_WIDTH[0]+u.WALL_WIDTH[1],r=u.WALL_WIDTH[0]+u.WALL_HEIGHT[1];for(let t=0;t<this._spawnGridsLinesAmount;t++){this._spawnPoints[t]=[];for(let s=0;s<this._spawnGridsColumnsAmount;s++)this._spawnPoints[t][s]=new X(e.x+i*s,e.y+r*t)}}getRandomSpawnPoint(t,e,i=0,r=this._spawnGridsLinesAmount-1,s=0,n=this._spawnGridsColumnsAmount-1){const a=st(i,r),o=st(s,n),l=this._spawnPoints[a][o];return new X(l.x-t/2,l.y-e/2)}getSpawnPoint(t,e,i,r){const s=this._spawnPoints[i][r];return new X(s.x-t/2,s.y-e/2)}}class ke{constructor(t,e,i){this._spawnPoints=t,this._collisionChecker=e,this._tankElementAdder=i}randomSpawn(t,e,i,r,s){const n=new vt(this._spawnPoints.getRandomSpawnPoint(u.getTankEntityWidth(t.hullNum),u.getTankEntityHeight(t.hullNum),e,i,r,s),ke.getRandomAngle(),t);for(let a=0;a<ke.RESPAWN_TRYS_AMOUNT;a++){if(!this._collisionChecker.hasCollision(n.model.entity))return this._tankElementAdder.addTankElements(n),n;n.adjustPosition(this._spawnPoints.getRandomSpawnPoint(u.getTankEntityWidth(t.hullNum),u.getTankEntityHeight(t.hullNum),e,i,r,s),ke.getRandomAngle())}throw new Error("Failed to spawn the tank")}static getRandomAngle(){return ke.ANGLES[st(0,3)]}}ke.RESPAWN_TRYS_AMOUNT=5,ke.ANGLES=[0,1.57,3.14,4.71];class Oe{constructor(){}static start(t,e,i){const r=Oe.createInfoPanel(t);u.setResolutionResizeCoeff(t.width,t.height);const s={width:t.width,height:t.height};Oe.createMaze1(t.getContext("2d"),s,r,e,i)}static createMaze1(t,e,i,r,s){Oe.createMaze(t,e,1,2,r,s,i,Ft.createMazeLvl1,Oe.createMaze2)}static createMaze2(t,e,i,r,s){Oe.createMaze(t,e,1,2,r,s,i,Ft.createMazeLvl2,Oe.createMaze3)}static createMaze3(t,e,i,r,s){Oe.createMaze(t,e,1,2,r,s,i,Ft.createMazeLvl3,Oe.endGame)}static endGame(t,e,i,r,s){const n=new Image(e.width,e.height);n.src="src/img/cat.jpg";const a=()=>{t.drawImage(n,0,0,e.width,e.height),i.textContent="The attacker wins",n.removeEventListener("load",a)};n.addEventListener("load",a)}static createMaze(t,e,i,r,s,n,a,o,l){const{wallsArray:h,point:c}=Wt.createWallsAroundPerimeter(17,7,r,e),_=new ye(c,5,T),u=new He(s,n,l,a,t,e,_),d=u.gameMaster;d.setBackgroundMaterial(i),d.addWallElements(h),d.addWallElements(o(r,c));const m=new Ne(_,d.itemCollisionManager);Oe.addKeys(m),d.addExecutioners(new ve(u),m),d.addEventListeners()}static addKeys(t){for(let e=0;e<Oe.AMOUNT_OF_KEYS;e++)t.randomSpawn(A.key,u.KEY_SIZE,u.KEY_SIZE,0,4,Math.ceil(5.5),10)}static createInfoPanel(t){t.style.top=`${Oe.PANEL_HEIGHT}%`,t.style.height=100-Oe.PANEL_HEIGHT+"%";const e=document.createElement("div");e.id="info-panel",e.style.height=`${Oe.PANEL_HEIGHT}%`,document.body.appendChild(e);const i=document.createElement("div");return i.id="key-count",e.appendChild(i),i}}Oe.AMOUNT_OF_KEYS=3,Oe.PANEL_HEIGHT=5;class He{constructor(t,e,i,r,s,n,a){this._score=0,this._panelInfo=r,this._gameMaster=new Ce(s,n,this),this._nextMaze=i,this._tankSpawnManager=new ke(a,this._gameMaster.modelCollisionManager.collisionChecker,this._gameMaster),this.randomAttackerSpawn(t),this.randomDefenderSpawn(e)}randomAttackerSpawn(t){this._attacker=this._tankSpawnManager.randomSpawn(t,0,4,0,Math.floor(5.5))}randomDefenderSpawn(t){this._defender=this._tankSpawnManager.randomSpawn(t,0,4,Math.ceil(5.5),10)}addBonus(t,e){switch(e){case A.key:if(t===this._attacker)return this._score++,this.endGameConditions()&&this.processPostGameActions(),!0;break;case A.bulGrenade:case A.bulHeavy:case A.bulLight:case A.bulMedium:case A.bulSniper:if(t instanceof vt)return t.model.takeBullet(e),!0}return!1}processKill(t,e){e===this._attacker?this.randomAttackerSpawn(this._attacker.tankInfo):e===this._defender&&this.randomDefenderSpawn(this._defender.tankInfo)}endGameConditions(){return 3===this._score}processPostGameActions(){this._gameMaster.removeEventListeners(),this._gameMaster.finishGame(),this._nextMaze(this._gameMaster.ctx,this._gameMaster.size,this.panelInfo,this._attacker.tankInfo,this._defender.tankInfo)}get score(){return this._score}get panelInfo(){return this._panelInfo}get gameMaster(){return this._gameMaster}}class ve{constructor(t){this._lastScore=1/0,this._rulesManager=t}handle(){this._lastScore!==this._rulesManager.score&&(this._lastScore=this._rulesManager.score,this.updatePanel())}updatePanel(){this._rulesManager.panelInfo.textContent=`Amount of Keys: ${this._lastScore}`}}class Ge{constructor(){}static selectGame(t,e,i,r){if(0===t)Oe.start(e,i,r)}static gameStart(t,e,i=0){!function(){const t=document.body;for(;t.firstChild;)t.removeChild(t.firstChild)}();const r=document.createElement("canvas");r.width=window.screen.width,r.height=window.screen.height,r.className="canvas",r.id="canvas",document.body.appendChild(r),Ge.selectGame(i,r,t,e)}}const xe=()=>{const t=document.querySelectorAll("button");(new G).start(Ge.gameStart,t),document.removeEventListener("DOMContentLoaded",xe)};document.addEventListener("DOMContentLoaded",xe)})();