(()=>{"use strict";const t=["Grass","Ground","Sandstone"],e=[76,81,77,64,81,81,76,69],s=[49,62,49,41,69,56,48,41],r=[20,25,20,15,25,25,25,20],i=[43,50,36,36,29,36,43,29],n=[36,36,22,36,29,29,36,29],a=[47,49,40,43,50,36,43,36],o=[14,10,14,7,11,16,14,14];class h{constructor(t){this._field=t}fullFillBackground(t){for(let e=0;e<this._field.width;e+=h.BACKGROUND_SIZE)for(let s=0;s<this._field.height;s+=h.BACKGROUND_SIZE)this.addBackgroundTile(e,s,t)}addBackgroundTile(t,e,s){const r=new Image(h.BACKGROUND_SIZE,h.BACKGROUND_SIZE);var i,n;r.src=`src/img/backgrounds/${s}Background_${i=0,n=1,Math.floor(Math.random()*(n+1-i))+i}.png`,r.classList.add("sprite"),r.style.left=`${t}px`,r.style.top=`${e}px`,r.style.zIndex="1",this._field.canvas.appendChild(r)}}h.BACKGROUND_SIZE=115;class l{constructor(t){this._entityStorage=t}isSuccess(t){return!this._entityStorage.isCollision(t)}}class c{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}clone(){return new c(this._x,this._y)}}class _{constructor(){}static rotatePointAroundTarget(t,e,s,r){const i=t.x-e.x,n=t.y-e.y;t.x=e.x+i*r-n*s,t.y=e.y+i*s+n*r}static isIntersect(t,e){const s=_.getAxes(t).concat(_.getAxes(e));for(const r of s){const s=_.project(t,r),i=_.project(e,r);if(!_.isOverlap(s,i))return!1}return!0}static isOverlap(t,e){return t.min<e.max&&e.min<t.max}static getAxes(t){const e=[],s=t.points.length-1;for(let r=0;r<s;r++)e.push(new u(t.points[r],t.points[r+1]));return e.push(new u(t.points[s],t.points[0])),e}static project(t,e){let s=_.dotProduct(e,t.points[0]),r=s;for(let i=1;i<t.points.length;i++){const n=_.dotProduct(e,t.points[i]);n<s?s=n:n>r&&(r=n)}return{min:s,max:r}}static dotProduct(t,e){return t.x*e.x+t.y*e.y}}class u{get x(){return this._x}get y(){return this._y}constructor(t,e){this._x=t.y-e.y,this._y=e.x-t.x,this.normalize()}normalize(){const t=Math.sqrt(this._x*this._x+this._y*this._y);this._x/=t,this._y/=t}}class d{get value(){return this._value}get prev(){return this._prev}get next(){return this._next}set next(t){this._next=t}set prev(t){this._prev=t}constructor(t){this._prev=null,this._next=null,this._value=t}}class p{constructor(){this._head=null,this._tail=null}get tail(){return this._tail}get head(){return this._head}addToTail(t){const e=new d(t);null===this._tail?(this._head=e,this._tail=e):(e.next=this._tail,this._tail.prev=e,this._tail=e)}addToHead(t){const e=new d(t);null===this._head?(this._head=e,this._tail=e):(e.prev=this._head,this._head.next=e,this._head=e)}removeFromHead(){null!==this._head&&(this._head===this._tail?(this._head=null,this._tail=null):(this._head=this._head.prev,this._head.next=null))}removeFromTail(){null!==this._tail&&(this._head===this._tail?(this._head=null,this._tail=null):(this._tail=this._tail.next,this._tail.prev=null))}moveToHead(t){let e=this._head;for(;null!==e;){if(e.value===t){if(e!==this._head){const t=e.prev,s=e.next;null!==t&&(t.next=s),s.prev=t,e.next=null,e.prev=this._head,this._head.next=e,this._head=e}return}e=e.prev}}}class g{constructor(t,e){this._cache=new Map,this._lruList=new p,this._calcFunc=t,this._maxCacheSize=e}getValue(t){if(this._cache.has(t))return this._lruList.moveToHead(t),this._cache.get(t);const e=this._calcFunc(t);if(this._cache.set(t,e),this._lruList.addToHead(t),this._cache.size>this._maxCacheSize){const t=this._lruList.tail.value;this._cache.delete(t),this._lruList.removeFromTail()}return e}}class S{constructor(){}static getSin(t){const e=M(t);return e<=w?S.SIN_CACHE.getValue(e):e<=m?S.SIN_CACHE.getValue(m-e):e<=A?-S.SIN_CACHE.getValue(e-m):-S.SIN_CACHE.getValue(C-e)}}S.SIN_CACHE=new g(Math.sin,21);class k{constructor(){}static getCos(t){const e=M(t);return e<=w?k.COS_CACHE.getValue(e):e<=m?-k.COS_CACHE.getValue(m-e):e<=A?-k.COS_CACHE.getValue(e-m):k.COS_CACHE.getValue(C-e)}}k.COS_CACHE=new g(Math.cos,21);const m=y(Math.PI),C=2*m,w=m/2,A=3*w;function M(t){const e=y(t);return e>=0?e%C:e%C+C}function y(t){return Math.floor(100*t)/100}class E{constructor(t,e,s,r,i){this._angle=0,this._points=[new c(t,e),new c(t+s,e),new c(t+s,e+r),new c(t,e+r)],0!==i&&this.rotatePoints(i)}get points(){return this._points}get angle(){return this._angle}calcCenter(){return new c(this._points[0].x+this._points[2].x>>1,this._points[0].y+this._points[2].y>>1)}movePoints(t,e){for(const s of this._points)s.x+=t,s.y+=e}rotatePoints(t){this._angle+=t;const e=this.calcCenter();for(const s of this.points)_.rotatePointAroundTarget(s,e,S.getSin(t),k.getCos(t))}}class T extends E{constructor(t,e,s,r,i){super(t,e,s,r,i)}}class f{constructor(t,e){this._field=t,this._entityStorage=e}createObstaclesAroundPerimeter(t){const e=f.calculateIndent(this._field.width),s=f.calculateIndent(this._field.height-(f.RECT_WALL_HEIGHT<<1));this.createHorObstacles(t,e,s),this.createVertObstacles(t,e,s)}static calculateIndent(t){const e=t-(f.INDENT<<1);return(e-f.RECT_WALL_WIDTH*Math.floor(e/f.RECT_WALL_WIDTH)>>1)+f.INDENT}createHorObstacles(t,e,s){for(let r=e;r<=this._field.width-e-f.RECT_WALL_WIDTH;r+=f.RECT_WALL_WIDTH)this.createRectObstacle(r,s,t,0),this.createRectObstacle(r,this._field.height-f.RECT_WALL_HEIGHT-s,t,0)}createVertObstacles(t,e,s){for(let r=s+f.RECT_WALL_HEIGHT+(f.RECT_WALL_HEIGHT>>1);r<=this._field.height-s-f.RECT_WALL_WIDTH;r+=f.RECT_WALL_WIDTH)this.createRectObstacle(e-(f.RECT_WALL_HEIGHT>>1),r,t,1.57),this.createRectObstacle(this._field.width-e-f.RECT_WALL_WIDTH+(f.RECT_WALL_HEIGHT>>1),r,t,1.57)}createRectObstacle(t,e,s,r){const i=new Image(f.RECT_WALL_WIDTH,f.RECT_WALL_HEIGHT);i.src=`src/img/blocks/${s}Rectangle.png`,i.classList.add("sprite"),i.style.left=`${t}px`,i.style.top=`${e}px`,i.style.transform=`rotate(${r}rad)`,i.style.zIndex="2",this._entityStorage.insert(new T(t,e,f.RECT_WALL_WIDTH,f.RECT_WALL_HEIGHT,r)),this._field.canvas.appendChild(i)}createSquareObstacle(t,e,s,r){const i=new Image(f.SQUARE_WALL_SIZE,f.SQUARE_WALL_SIZE);i.src=`src/img/blocks/${s}Square.png`,i.classList.add("sprite"),i.style.left=`${t}px`,i.style.top=`${e}px`,i.style.transform=`rotate(${r}rad)`,i.style.zIndex="2",this._entityStorage.insert(new T(t,e,f.SQUARE_WALL_SIZE,f.SQUARE_WALL_SIZE,r)),this._field.canvas.appendChild(i)}}f.INDENT=10,f.RECT_WALL_WIDTH=101,f.RECT_WALL_HEIGHT=50,f.SQUARE_WALL_SIZE=f.RECT_WALL_HEIGHT;class P{constructor(t,e,s){this._canvas=t,this._width=e,this._height=s}get canvas(){return this._canvas}get width(){return this._width}get height(){return this._height}}class v{constructor(t,e,s,r){this._root=new L({xStart:t,yStart:e,xLast:s,yLast:r},null)}insert(t){this._root.insert(t)}isCollision(t){return this._root.isCollision(t)}remove(t){this._root.remove(t)}}class L{constructor(t,e){this._entities=new Set,this._children=null,this._boundary=t,this._parent=e}isSubdivide(){return null===this._entities}subdivide(){const t=this._boundary.xStart,e=this._boundary.yStart,s=this._boundary.xLast,r=this._boundary.yLast,i=(s-t)/2,n=(r-e)/2;this._children=[new L({xStart:t,yStart:e,xLast:t+i,yLast:e+n},this),new L({xStart:t+i,yStart:e,xLast:s,yLast:e+n},this),new L({xStart:t,yStart:e+n,xLast:t+i,yLast:r},this),new L({xStart:t+i,yStart:e+n,xLast:s,yLast:r},this)],this.redistribute()}redistribute(){for(const t of this._entities)for(const e of this._children)e.isContainsEntity(t)&&e.insert(t);this._entities=null}insert(t){if(this.isSubdivide())for(const e of this._children)e.isContainsEntity(t)&&e.insert(t);else this._entities.add(t),this._entities.size>L.CAPACITY&&this.subdivide()}remove(t){if(this.isSubdivide()){for(const e of this._children)e.isContainsEntity(t)&&e.remove(t);this.mergeCheck()}else this._entities.delete(t),null!==this._parent&&this._parent.mergeCheck()}isCollision(t){if(this.isSubdivide()){for(const e of this._children)if(e.isContainsEntity(t)&&e.isCollision(t))return!0}else for(const e of this._entities)if(t!==e&&_.isIntersect(t,e))return!0;return!1}isContainsEntity(t){for(const e of t.points)if(this.isContainsPoint(e))return!0;return!1}isContainsPoint(t){return t.x>this._boundary.xStart&&t.x<this._boundary.xLast&&t.y>this._boundary.yStart&&t.y<this._boundary.yLast}mergeCheck(){let t=0;for(const e of this._children)t+=e.getEntitiesCount();t<=L.HALF_CAPACITY&&this.mergeWithChildren()}mergeWithChildren(){this._entities=new Set;for(const t of this._children){t.isSubdivide()&&t.mergeWithChildren();for(const e of t._entities)this._entities.add(e)}this._children=null}getEntitiesCount(){if(this.isSubdivide()){let t=0;for(const e of this._children)t+=e.getEntitiesCount();return t}return this._entities.size}}L.CAPACITY=8,L.HALF_CAPACITY=L.CAPACITY>>1;class x{constructor(t,e){this._entityStorage=t,this._collisionManager=e}turretCounterclockwiseMovement(t){t.model.turretCounterclockwiseMovement(),x.turretUpdate(t)}turretClockwiseMovement(t){t.model.turretClockwiseMovement(),x.turretUpdate(t)}hullCounterclockwiseMovement(t){this.hullUpdate(t,t.model.hullCounterclockwiseMovement,t.model.hullClockwiseMovement)}hullClockwiseMovement(t){this.hullUpdate(t,t.model.hullClockwiseMovement,t.model.hullCounterclockwiseMovement)}moveForward(t){this.hullUpdate(t,t.model.moveForward,t.model.moveBackward)}moveBackward(t){this.hullUpdate(t,t.model.moveBackward,t.model.moveForward)}hullUpdate(t,e,s){const r=t.model.tankParts.hullEntity;this._entityStorage.remove(r),e.call(t.model),this._collisionManager.isSuccess(r)||s.call(t.model),this._entityStorage.insert(r),t.sprite.updateSprite(r.points[0],r.angle,t.model.tankParts.turret.angle)}static turretUpdate(t){const e=t.model.tankParts,s=S.getSin(e.hullEntity.angle),r=k.getCos(e.hullEntity.angle);t.sprite.rotateTurretUpdate(t.sprite.tankSpriteParts.hullSprite.calcPosition(e.hullEntity.points[0],s,r),e.turret.angle,s,r)}}class H{constructor(){this._keysMask=0,document.addEventListener("keydown",this.handleKeyDown.bind(this)),document.addEventListener("keyup",this.handleKeyUp.bind(this))}clearMask(){this._keysMask=0}get keysMask(){return this._keysMask}handleKeyDown(t){this._keysMask|=H.getMask(t.keyCode)}handleKeyUp(t){this._keysMask&=~H.getMask(t.keyCode)}static getMask(t){switch(t){case 65:return H.A_MASK;case 66:return H.B_MASK;case 67:return H.C_MASK;case 68:return H.D_MASK;case 69:return H.E_MASK;case 70:return H.F_MASK;case 71:return H.G_MASK;case 72:return H.H_MASK;case 73:return H.I_MASK;case 74:return H.J_MASK;case 75:return H.K_MASK;case 76:return H.L_MASK;case 77:return H.M_MASK;case 78:return H.N_MASK;case 79:return H.O_MASK;case 80:return H.P_MASK;case 81:return H.Q_MASK;case 82:return H.R_MASK;case 83:return H.S_MASK;case 84:return H.T_MASK;case 85:return H.U_MASK;case 86:return H.V_MASK;case 87:return H.W_MASK;case 88:return H.X_MASK;case 89:return H.Y_MASK;case 90:return H.Z_MASK;case 190:return H.PERIOD_MASK;case 188:return H.COMMA_MASK;case 38:return H.UP_MASK;case 40:return H.DOWN_MASK;case 37:return H.LEFT_MASK;case 39:return H.RIGHT_MASK;default:return 0}}}H.A_MASK=1,H.B_MASK=2,H.C_MASK=4,H.D_MASK=8,H.E_MASK=16,H.F_MASK=32,H.G_MASK=64,H.H_MASK=128,H.I_MASK=256,H.J_MASK=512,H.K_MASK=1024,H.L_MASK=2048,H.M_MASK=4096,H.N_MASK=8192,H.O_MASK=16384,H.P_MASK=32768,H.Q_MASK=65536,H.R_MASK=1<<17,H.S_MASK=1<<18,H.T_MASK=1<<19,H.U_MASK=1<<20,H.V_MASK=1<<21,H.W_MASK=1<<22,H.X_MASK=1<<23,H.Y_MASK=1<<24,H.Z_MASK=1<<25,H.PERIOD_MASK=1<<26,H.COMMA_MASK=1<<27,H.UP_MASK=1<<28,H.DOWN_MASK=1<<29,H.RIGHT_MASK=1<<30,H.LEFT_MASK=1<<31;class K extends E{get movementSpeed(){return this._movementSpeed}get damage(){return this._damage}get armorPenetration(){return this._armorPenetration}constructor(t,e,s,r,i){super(t,e,s,r,i)}launchFromWeapon(t){this._movementSpeed*=t.movementSpeedCoeff,this._damage*=t.damageCoeff,this._armorPenetration*=t.armorPenetrationCoeff}}class I extends K{constructor(t,e,s){super(t,e,I.WIDTH,I.HEIGHT,s),this._armorPenetration=5,this._damage=15,this._movementSpeed=50}}I.WIDTH=20,I.HEIGHT=45;class b{create(t,e,s){return new I(t,e,s)}}class W{constructor(t){this._isDeltaChanged=!1,this._bulletQuantity=0,this._tankParts=t,this.calcDeltaCoordinates(),this._lastTimeShot=Date.now(),this._bulletManufacturing=new b}get tankParts(){return this._tankParts}shot(){const t=Date.now();if(0===this._bulletQuantity||t-this._lastTimeShot<this._tankParts.weapon.reloadSpeed)return null;const e=this._tankParts.hullEntity,s=(e.points[0].x+e.points[2].x>>1)+this._tankParts.weapon.barrelLength*k.getCos(this._tankParts.turret.angle),r=(e.points[0].y+e.points[2].y>>1)+this._tankParts.weapon.barrelLength*S.getSin(this._tankParts.turret.angle),i=this._bulletManufacturing.create(s,r,this._tankParts.turret.angle);return i.launchFromWeapon(this._tankParts.weapon),this._lastTimeShot=t,this._bulletQuantity--,i}incBulletQuantity(t){this._bulletQuantity=Math.min(this._bulletQuantity+t,this._tankParts.turret.bulletCapacity)}takeNewBulletManufacturing(t){this._bulletManufacturing=t}turretClockwiseMovement(){this._tankParts.turret.clockwiseMovement()}turretCounterclockwiseMovement(){this._tankParts.turret.counterclockwiseMovement()}hullClockwiseMovement(){this._isDeltaChanged=!0,this._tankParts.hullEntity.rotatePoints(this._tankParts.track.angleSpeed),this._tankParts.turret.incAngle(this._tankParts.track.angleSpeed)}hullCounterclockwiseMovement(){this._isDeltaChanged=!0,this._tankParts.hullEntity.rotatePoints(-this._tankParts.track.angleSpeed),this._tankParts.turret.incAngle(-this._tankParts.track.angleSpeed)}moveForward(){this._isDeltaChanged&&(this._isDeltaChanged=!1,this.calcDeltaCoordinates()),this._tankParts.hullEntity.movePoints(this._deltaX,this._deltaY)}moveBackward(){this._isDeltaChanged&&(this._isDeltaChanged=!1,this.calcDeltaCoordinates()),this._tankParts.hullEntity.movePoints(-this._deltaX,-this._deltaY)}calcDeltaCoordinates(){this._deltaX=this._tankParts.track.movementSpeed*k.getCos(this._tankParts.hullEntity.angle),this._deltaY=this._tankParts.track.movementSpeed*S.getSin(this._tankParts.hullEntity.angle)}}class D{constructor(t){this._tankSpriteParts=t}get tankSpriteParts(){return this._tankSpriteParts}updateSprite(t,e,s){const r=S.getSin(e),i=k.getCos(e);let n,a;n=this._tankSpriteParts.topTrackSprite,a=n.calcPosition(t,r,i),D.rotateForPoint(n,a,r,i),D.setPosAndAngle(n,a,e),n=this._tankSpriteParts.hullSprite,a=n.calcPosition(t,r,i);const o=a.clone();D.rotateForPoint(n,a,r,i),D.setPosAndAngle(n,a,e),n=this._tankSpriteParts.bottomTrackSprite,a=n.calcPosition(o,r,i),D.rotateForPoint(n,a,r,i),D.setPosAndAngle(n,a,e),this.rotateTurretUpdate(o,s,r,i)}rotateTurretUpdate(t,e,s,r){const i=S.getSin(e),n=k.getCos(e);let a,o;a=this._tankSpriteParts.turretSprite,o=a.calcPosition(t,s,r);let h=o.clone();D.rotateForTurretPoint(a,h,s,r,i,n),D.rotateForPoint(a,o,s,r),D.setPosAndAngle(a,o,e),a=this._tankSpriteParts.weaponSprite,o=a.calcPosition(h,i,n),D.rotateForPoint(a,o,i,n),D.setPosAndAngle(a,o,e)}static setPosAndAngle(t,e,s){t.setPosition(e),t.setAngle(s)}static rotateForPoint(t,e,s,r){const i=t.width>>1,n=t.height>>1;_.rotatePointAroundTarget(e,new c(e.x+i*r-n*s,e.y+n*r+i*s),-s,r)}static rotateForTurretPoint(t,e,s,r,i,n){const a=t.width>>1,o=t.height>>1;_.rotatePointAroundTarget(e,new c(e.x+a*r-o*s,e.y+o*r+a*s),i*r-n*s,r*n+s*i)}}class R extends E{constructor(t,e,s,r,i){super(t,e,s+5,r+10,i),this._armorStrength=1}get health(){return this._health}get armor(){return this._armor}get armorStrength(){return this._armorStrength}takeDamage(t){this._armorStrength-=t.armorPenetration,this._health-=t.damage-this._armor*this._armorStrength}}class O extends R{constructor(t,r,i){super(t,r,e[0],s[0],i),this._armor=100,this._health=100}}class G{get angleSpeed(){return.05}get movementSpeed(){return 3}}class F{get angle(){return this._angle}constructor(t){this._angle=t}incAngle(t){this._angle+=t}}class N extends F{get bulletCapacity(){return 10}clockwiseMovement(){this._angle+=N.ANGLE_SPEED}counterclockwiseMovement(){this._angle-=N.ANGLE_SPEED}}N.ANGLE_SPEED=.02;class U{get armorPenetrationCoeff(){return 1}get barrelLength(){return o[0]}get damageCoeff(){return 1}get movementSpeedCoeff(){return 1}get reloadSpeed(){return 3e3}}class ${constructor(t,e,s,r){this._hullEntity=t,this._track=e,this._turret=s,this._weapon=r}get hullEntity(){return this._hullEntity}get track(){return this._track}get turret(){return this._turret}get weapon(){return this._weapon}}class B{constructor(){}static create(t,e,s,r,i,n,a){return new $(B.createHull(r,t,e,s),B.createTrack(i),B.createTurret(n,s),B.createWeapon(a))}static createHull(t,e,s,r){if(0===t)return new O(e,s,r);throw new Error(`Hull model ${t} was not found`)}static createTrack(t){if(0===t)return new G;throw new Error(`Track model ${t} was not found`)}static createTurret(t,e){if(0===t)return new N(e);throw new Error(`Turret model ${t} was not found`)}static createWeapon(t){if(0===t)return new U;throw new Error(`Weapon model ${t} was not found`)}}class Y{get sprite(){return this._sprite}constructor(t,e){this._sprite=new Image(t,e),this._sprite.classList.add("sprite")}setPosition(t){this._sprite.style.left=`${t.x}px`,this._sprite.style.top=`${t.y}px`}setAngle(t){this._sprite.style.transform=`rotate(${t}rad)`}}class z extends Y{get width(){return this._width}get height(){return this._height}constructor(t,e){super(t,e),this._width=t,this._height=e}}class Q extends z{constructor(t,r){super(e[r],s[r]),this._sprite.src=`src/img/tanks/Hulls/Hull_${r}/Hull_${t}.png`,this._sprite.style.zIndex="4"}calcPosition(t,e,s){return new c(t.x-5*e,t.y+5*s)}}class V extends z{static calcHeight(t){return V.PROPORTION_WIDTH_HEIGHT*t}constructor(t,e,s){super(e+5,s),this._srcState0=`src/img/tanks/Tracks/Track_${t}_A.png`,this._srcState1=`src/img/tanks/Tracks/Track_${t}_B.png`,this._sprite.style.zIndex="3",this._state=0,this._counter=0,this._sprite.src=this._srcState0}changeState(){this._counter++,this._counter===V.STATE_CHANGE_THRESHOLD&&(this._state^=1,this._sprite.src=1===this._state?this._srcState1:this._srcState0,this._counter=0)}setPosition(t){this.changeState(),super.setPosition(t)}}V.STATE_CHANGE_THRESHOLD=3,V.PROPORTION_WIDTH_HEIGHT=42/246;class X extends V{constructor(t,e){super(t,e,V.calcHeight(e))}calcPosition(t){return t.clone()}}class Z extends V{constructor(t,e,s){const r=V.calcHeight(e);super(t,e,r),this._deltaHeight=s+5-r}calcPosition(t,e,s){return new c(t.x-this._deltaHeight*e,t.y+this._deltaHeight*s)}}class q extends z{constructor(t,e,s,r){super(i[e],n[e]),this._sprite.src=`src/img/tanks/Turrets/Turret_${e}/Turret_${t}.png`,this._sprite.style.zIndex="5",this._indentX=s,this._indentY=r}calcPosition(t,e,s){return new c(t.x+this._indentX*s-this._indentY*e,t.y+this._indentY*s+this._indentX*e)}}class j extends z{constructor(t,e,s){super(a[t],o[t]),this._sprite.src=`src/img/tanks/Weapons/Weapon_${t}.png`,this._sprite.style.zIndex="5",this._indentX=e,this._indentY=s}calcPosition(t,e,s){return new c(t.x+this._indentX*s-this._indentY*e,t.y+this._indentY*s+this._indentX*e)}}class J{constructor(t,e,s,r,i){this._hullSprite=t,this._bottomTrackSprite=e,this._topTrackSprite=s,this._turretSprite=r,this._weaponSprite=i}get hullSprite(){return this._hullSprite}get bottomTrackSprite(){return this._bottomTrackSprite}get topTrackSprite(){return this._topTrackSprite}get turretSprite(){return this._turretSprite}get weaponSprite(){return this._weaponSprite}}class tt{constructor(){}static create(t,a,h,l,c){return new J(new Q(t,a),new Z(h,e[a],s[a]),new X(h,e[a]),new q(t,l,r[a],(s[a]>>1)-(n[l]>>1)),new j(c,i[l],(n[l]>>1)-(o[c]>>1)))}}class et{get forwardMask(){return this._forwardMask}set forwardMask(t){this._forwardMask=t}get backwardMask(){return this._backwardMask}set backwardMask(t){this._backwardMask=t}get hullClockwiseMask(){return this._hullClockwiseMask}set hullClockwiseMask(t){this._hullClockwiseMask=t}get hullCounterClockwiseMask(){return this._hullCounterClockwiseMask}set hullCounterClockwiseMask(t){this._hullCounterClockwiseMask=t}get turretClockwiseMask(){return this._turretClockwiseMask}set turretClockwiseMask(t){this._turretClockwiseMask=t}get turretCounterClockwiseMask(){return this._turretCounterClockwiseMask}set turretCounterClockwiseMask(t){this._turretCounterClockwiseMask=t}get model(){return this._model}get sprite(){return this._sprite}constructor(t,e,s,r,i,n,a,o,h,l,c,_,u,d){this._forwardMask=h,this._backwardMask=l,this._hullClockwiseMask=c,this._hullCounterClockwiseMask=_,this._turretClockwiseMask=u,this._turretCounterClockwiseMask=d,this._sprite=new D(tt.create(r,i,n,a,o)),this._model=new W(B.create(t,e,s,i,n,a,o))}spawn(t,e){const s=this._sprite.tankSpriteParts;t.appendChild(s.topTrackSprite.sprite),t.appendChild(s.bottomTrackSprite.sprite),t.appendChild(s.hullSprite.sprite),t.appendChild(s.weaponSprite.sprite),t.appendChild(s.turretSprite.sprite);const r=this._model.tankParts.hullEntity;e.insert(r),this._sprite.updateSprite(r.points[0],r.angle,this._model.tankParts.turret.angle)}}window.onmousedown=t=>console.log(`x = ${t.clientX}px, y = ${t.clientY}px`);const st=new class{constructor(t,e,s){this.isGameLoopActive=!1,this._tankElements=[],this._field=new P(t,e,s),this._entityStorage=new v(0,0,e,s),this._collisionManager=new l(this._entityStorage),this._decorCreator=new h(this._field),this._obstacleCreator=new f(this._field,this._entityStorage),this._movementManager=new x(this._entityStorage,this._collisionManager),this._keyHandler=new H}createField(){this._decorCreator.fullFillBackground(t[1]),this._obstacleCreator.createObstaclesAroundPerimeter(t[2]),this._obstacleCreator.createSquareObstacle(this._field.width>>1,this._field.height>>1,t[2],.79),this._obstacleCreator.createRectObstacle(this._field.width>>2,this._field.height>>2,t[2],1)}addTankElements(...t){for(const e of t)this._tankElements.includes(e)||(this._tankElements.push(e),e.spawn(this._field.canvas,this._entityStorage))}startGameLoop(){this.isGameLoopActive||(this.isGameLoopActive=!0,this._keyHandler.clearMask(),requestAnimationFrame((()=>this.gameLoop())))}stopGameLoop(){this.isGameLoopActive=!1}gameLoop(){this.isGameLoopActive&&(this.update(),requestAnimationFrame((()=>this.gameLoop())))}update(){const t=this._keyHandler.keysMask;for(const e of this._tankElements)t&e.forwardMask&&this._movementManager.moveForward(e),t&e.backwardMask&&this._movementManager.moveBackward(e),t&e.hullClockwiseMask&&this._movementManager.hullClockwiseMovement(e),t&e.hullCounterClockwiseMask&&this._movementManager.hullCounterclockwiseMovement(e),t&e.turretClockwiseMask&&this._movementManager.turretClockwiseMovement(e),t&e.turretCounterClockwiseMask&&this._movementManager.turretCounterclockwiseMovement(e)}}(document.querySelector("#canvas"),window.screen.width,window.screen.height);st.createField(),st.addTankElements(new et(400,400,0,0,0,0,0,0,H.W_MASK,H.S_MASK,H.D_MASK,H.A_MASK,H.E_MASK,H.Q_MASK),new et(800,800,0,1,0,0,0,0,H.UP_MASK,H.DOWN_MASK,H.RIGHT_MASK,H.LEFT_MASK,H.PERIOD_MASK,H.COMMA_MASK)),st.startGameLoop()})();